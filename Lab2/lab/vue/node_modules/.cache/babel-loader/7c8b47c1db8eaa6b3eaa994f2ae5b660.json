{"ast":null,"code":"import { NOOP, isString, isObject } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../tooltip/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/tooltip.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nconst autocompleteProps = buildProps({\n  valueKey: {\n    type: String,\n    default: \"value\"\n  },\n  modelValue: {\n    type: [String, Number],\n    default: \"\"\n  },\n  debounce: {\n    type: Number,\n    default: 300\n  },\n  placement: {\n    type: definePropType(String),\n    values: [\"top\", \"top-start\", \"top-end\", \"bottom\", \"bottom-start\", \"bottom-end\"],\n    default: \"bottom-start\"\n  },\n  fetchSuggestions: {\n    type: definePropType(Function),\n    default: NOOP\n  },\n  popperClass: {\n    type: String,\n    default: \"\"\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    default: true\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    default: false\n  },\n  hideLoading: {\n    type: Boolean,\n    default: false\n  },\n  popperAppendToBody: {\n    type: Boolean,\n    default: void 0\n  },\n  teleported: useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    default: false\n  }\n});\nconst autocompleteEmits = {\n  [UPDATE_MODEL_EVENT]: value => isString(value),\n  input: value => isString(value),\n  change: value => isString(value),\n  focus: evt => evt instanceof FocusEvent,\n  blur: evt => evt instanceof FocusEvent,\n  clear: () => true,\n  select: item => isObject(item)\n};\nexport { autocompleteEmits, autocompleteProps };","map":{"version":3,"mappings":";;;;;;;AASY,MAACA,iBAAiB,GAAGC,UAAU,CAAC;AAC1CC,UAAQ,EAAE;AACRC,QAAI,EAAEC,MADE;AAERC,WAAO,EAAE;AAFD,GADgC;AAK1CC,YAAU,EAAE;AACVH,QAAI,EAAE,CAACC,MAAD,EAASG,MAAT,CADI;AAEVF,WAAO,EAAE;AAFC,GAL8B;AAS1CG,UAAQ,EAAE;AACRL,QAAI,EAAEI,MADE;AAERF,WAAO,EAAE;AAFD,GATgC;AAa1CI,WAAS,EAAE;AACTN,QAAI,EAAEO,cAAc,CAACN,MAAD,CADX;AAETO,UAAM,EAAE,CACN,KADM,EAEN,WAFM,EAGN,SAHM,EAIN,QAJM,EAKN,cALM,EAMN,YANM,CAFC;AAUTN,WAAO,EAAE;AAVA,GAb+B;AAyB1CO,kBAAgB,EAAE;AAChBT,QAAI,EAAEO,cAAc,CAACG,QAAD,CADJ;AAEhBR,WAAO,EAAES;AAFO,GAzBwB;AA6B1CC,aAAW,EAAE;AACXZ,QAAI,EAAEC,MADK;AAEXC,WAAO,EAAE;AAFE,GA7B6B;AAiC1CW,gBAAc,EAAE;AACdb,QAAI,EAAEc,OADQ;AAEdZ,WAAO,EAAE;AAFK,GAjC0B;AAqC1Ca,qBAAmB,EAAE;AACnBf,QAAI,EAAEc,OADa;AAEnBZ,WAAO,EAAE;AAFU,GArCqB;AAyC1Cc,aAAW,EAAE;AACXhB,QAAI,EAAEc,OADK;AAEXZ,WAAO,EAAE;AAFE,GAzC6B;AA6C1Ce,oBAAkB,EAAE;AAClBjB,QAAI,EAAEc,OADY;AAElBZ,WAAO,EAAE,KAAK;AAFI,GA7CsB;AAiD1CgB,YAAU,EAAEC,sBAAsB,CAACD,UAjDO;AAkD1CE,oBAAkB,EAAE;AAClBpB,QAAI,EAAEc,OADY;AAElBZ,WAAO,EAAE;AAFS;AAlDsB,CAAD,CAA/B;AAuDA,MAACmB,iBAAiB,GAAG;AAC/B,GAACC,kBAAD,GAAuBC,KAAD,IAAWC,QAAQ,CAACD,KAAD,CADV;AAE/BE,OAAK,EAAGF,KAAD,IAAWC,QAAQ,CAACD,KAAD,CAFK;AAG/BG,QAAM,EAAGH,KAAD,IAAWC,QAAQ,CAACD,KAAD,CAHI;AAI/BI,OAAK,EAAGC,GAAD,IAASA,GAAG,YAAYC,UAJA;AAK/BC,MAAI,EAAGF,GAAD,IAASA,GAAG,YAAYC,UALC;AAM/BE,OAAK,EAAE,MAAM,IANkB;AAO/BC,QAAM,EAAGC,IAAD,IAAUC,QAAQ,CAACD,IAAD;AAPK,CAArB","names":["autocompleteProps","buildProps","valueKey","type","String","default","modelValue","Number","debounce","placement","definePropType","values","fetchSuggestions","Function","NOOP","popperClass","triggerOnFocus","Boolean","selectWhenUnmatched","hideLoading","popperAppendToBody","teleported","useTooltipContentProps","highlightFirstItem","autocompleteEmits","UPDATE_MODEL_EVENT","value","isString","input","change","focus","evt","FocusEvent","blur","clear","select","item","isObject"],"sources":["../../../../../../packages/components/autocomplete/src/autocomplete.ts"],"sourcesContent":["import { NOOP } from '@vue/shared'\nimport {\n  isString,\n  isObject,\n  buildProps,\n  definePropType,\n} from '@element-plus/utils'\nimport { useTooltipContentProps } from '@element-plus/components/tooltip'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport type { ExtractPropTypes } from 'vue'\nimport type Autocomplete from './autocomplete.vue'\nimport type { Placement } from '@element-plus/components/popper'\n\nexport const autocompleteProps = buildProps({\n  valueKey: {\n    type: String,\n    default: 'value',\n  },\n  modelValue: {\n    type: [String, Number],\n    default: '',\n  },\n  debounce: {\n    type: Number,\n    default: 300,\n  },\n  placement: {\n    type: definePropType<Placement>(String),\n    values: [\n      'top',\n      'top-start',\n      'top-end',\n      'bottom',\n      'bottom-start',\n      'bottom-end',\n    ],\n    default: 'bottom-start',\n  },\n  fetchSuggestions: {\n    type: definePropType<\n      (queryString: string, cb: (data: any[]) => void) => void\n    >(Function),\n    default: NOOP,\n  },\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    default: true,\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    default: false,\n  },\n  hideLoading: {\n    type: Boolean,\n    default: false,\n  },\n  popperAppendToBody: {\n    type: Boolean,\n    default: undefined,\n  },\n  teleported: useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\nexport type AutocompleteProps = ExtractPropTypes<typeof autocompleteProps>\n\nexport const autocompleteEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  input: (value: string) => isString(value),\n  change: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  select: (item: { value: any }) => isObject(item),\n}\nexport type AutocompleteEmits = typeof autocompleteEmits\n\nexport type AutocompleteInstance = InstanceType<typeof Autocomplete>\n"]},"metadata":{},"sourceType":"module"}