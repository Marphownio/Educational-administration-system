{"ast":null,"code":"import baseFill from './_baseFill.js';\nimport isIterateeCall from './_isIterateeCall.js';\n/**\r\n * Fills elements of `array` with `value` from `start` up to, but not\r\n * including, `end`.\r\n *\r\n * **Note:** This method mutates `array`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.2.0\r\n * @category Array\r\n * @param {Array} array The array to fill.\r\n * @param {*} value The value to fill `array` with.\r\n * @param {number} [start=0] The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns `array`.\r\n * @example\r\n *\r\n * var array = [1, 2, 3];\r\n *\r\n * _.fill(array, 'a');\r\n * console.log(array);\r\n * // => ['a', 'a', 'a']\r\n *\r\n * _.fill(Array(3), 2);\r\n * // => [2, 2, 2]\r\n *\r\n * _.fill([4, 6, 8, 10], '*', 1, 3);\r\n * // => [4, '*', '*', 10]\r\n */\n\nfunction fill(array, value, start, end) {\n  var length = array == null ? 0 : array.length;\n\n  if (!length) {\n    return [];\n  }\n\n  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n    start = 0;\n    end = length;\n  }\n\n  return baseFill(array, value, start, end);\n}\n\nexport default fill;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/fill.js"],"names":["baseFill","isIterateeCall","fill","array","value","start","end","length"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,KAAd,EAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwC;AACtC,MAAIC,MAAM,GAAGJ,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACI,MAAvC;;AACA,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AACD,MAAIF,KAAK,IAAI,OAAOA,KAAP,IAAgB,QAAzB,IAAqCJ,cAAc,CAACE,KAAD,EAAQC,KAAR,EAAeC,KAAf,CAAvD,EAA8E;AAC5EA,IAAAA,KAAK,GAAG,CAAR;AACAC,IAAAA,GAAG,GAAGC,MAAN;AACD;;AACD,SAAOP,QAAQ,CAACG,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,GAAtB,CAAf;AACD;;AAED,eAAeJ,IAAf","sourcesContent":["import baseFill from './_baseFill.js';\r\nimport isIterateeCall from './_isIterateeCall.js';\r\n\r\n/**\r\n * Fills elements of `array` with `value` from `start` up to, but not\r\n * including, `end`.\r\n *\r\n * **Note:** This method mutates `array`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.2.0\r\n * @category Array\r\n * @param {Array} array The array to fill.\r\n * @param {*} value The value to fill `array` with.\r\n * @param {number} [start=0] The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns `array`.\r\n * @example\r\n *\r\n * var array = [1, 2, 3];\r\n *\r\n * _.fill(array, 'a');\r\n * console.log(array);\r\n * // => ['a', 'a', 'a']\r\n *\r\n * _.fill(Array(3), 2);\r\n * // => [2, 2, 2]\r\n *\r\n * _.fill([4, 6, 8, 10], '*', 1, 3);\r\n * // => [4, '*', '*', 10]\r\n */\r\nfunction fill(array, value, start, end) {\r\n  var length = array == null ? 0 : array.length;\r\n  if (!length) {\r\n    return [];\r\n  }\r\n  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\r\n    start = 0;\r\n    end = length;\r\n  }\r\n  return baseFill(array, value, start, end);\r\n}\r\n\r\nexport default fill;\r\n"]},"metadata":{},"sourceType":"module"}