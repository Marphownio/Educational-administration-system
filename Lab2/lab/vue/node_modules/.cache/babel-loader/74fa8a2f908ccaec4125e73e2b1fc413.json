{"ast":null,"code":"import { getCurrentInstance, ref, watchEffect, computed, unref, h } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { cellForced, getDefaultClassName, defaultRenderCell, treeCellPrefix } from '../config.mjs';\nimport { parseWidth, parseMinWidth } from '../util.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../../utils/error.mjs';\n\nfunction useRender(props, slots, owner) {\n  const instance = getCurrentInstance();\n  const columnId = ref(\"\");\n  const isSubColumn = ref(false);\n  const realAlign = ref();\n  const realHeaderAlign = ref();\n  const ns = useNamespace(\"table\");\n  watchEffect(() => {\n    realAlign.value = props.align ? `is-${props.align}` : null;\n    realAlign.value;\n  });\n  watchEffect(() => {\n    realHeaderAlign.value = props.headerAlign ? `is-${props.headerAlign}` : realAlign.value;\n    realHeaderAlign.value;\n  });\n  const columnOrTableParent = computed(() => {\n    let parent = instance.vnode.vParent || instance.parent;\n\n    while (parent && !parent.tableId && !parent.columnId) {\n      parent = parent.vnode.vParent || parent.parent;\n    }\n\n    return parent;\n  });\n  const realWidth = ref(parseWidth(props.width));\n  const realMinWidth = ref(parseMinWidth(props.minWidth));\n\n  const setColumnWidth = column => {\n    if (realWidth.value) column.width = realWidth.value;\n\n    if (realMinWidth.value) {\n      column.minWidth = realMinWidth.value;\n    }\n\n    if (!column.minWidth) {\n      column.minWidth = 80;\n    }\n\n    column.realWidth = Number(column.width === void 0 ? column.minWidth : column.width);\n    return column;\n  };\n\n  const setColumnForcedProps = column => {\n    const type = column.type;\n    const source = cellForced[type] || {};\n    Object.keys(source).forEach(prop => {\n      const value = source[prop];\n\n      if (prop !== \"className\" && value !== void 0) {\n        column[prop] = value;\n      }\n    });\n    const className = getDefaultClassName(type);\n\n    if (className) {\n      const forceClass = `${unref(ns.namespace)}-${className}`;\n      column.className = column.className ? `${column.className} ${forceClass}` : forceClass;\n    }\n\n    return column;\n  };\n\n  const checkSubColumn = children => {\n    if (Array.isArray(children)) {\n      children.forEach(child => check(child));\n    } else {\n      check(children);\n    }\n\n    function check(item) {\n      var _a;\n\n      if (((_a = item == null ? void 0 : item.type) == null ? void 0 : _a.name) === \"ElTableColumn\") {\n        item.vParent = instance;\n      }\n    }\n  };\n\n  const setColumnRenders = column => {\n    if (props.renderHeader) {\n      debugWarn(\"TableColumn\", \"Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.\");\n    } else if (column.type !== \"selection\") {\n      column.renderHeader = scope => {\n        instance.columnConfig.value[\"label\"];\n        const renderHeader = slots.header;\n        return renderHeader ? renderHeader(scope) : column.label;\n      };\n    }\n\n    let originRenderCell = column.renderCell;\n\n    if (column.type === \"expand\") {\n      column.renderCell = data => h(\"div\", {\n        class: \"cell\"\n      }, [originRenderCell(data)]);\n\n      owner.value.renderExpanded = data => {\n        return slots.default ? slots.default(data) : slots.default;\n      };\n    } else {\n      originRenderCell = originRenderCell || defaultRenderCell;\n\n      column.renderCell = data => {\n        let children = null;\n\n        if (slots.default) {\n          children = slots.default(data);\n        } else {\n          children = originRenderCell(data);\n        }\n\n        const prefix = treeCellPrefix(data);\n        const props2 = {\n          class: \"cell\",\n          style: {}\n        };\n\n        if (column.showOverflowTooltip) {\n          props2.class = `${props2.class} ${unref(ns.namespace)}-tooltip`;\n          props2.style = {\n            width: `${(data.column.realWidth || Number(data.column.width)) - 1}px`\n          };\n        }\n\n        checkSubColumn(children);\n        return h(\"div\", props2, [prefix, children]);\n      };\n    }\n\n    return column;\n  };\n\n  const getPropsData = (...propsKey) => {\n    return propsKey.reduce((prev, cur) => {\n      if (Array.isArray(cur)) {\n        cur.forEach(key => {\n          prev[key] = props[key];\n        });\n      }\n\n      return prev;\n    }, {});\n  };\n\n  const getColumnElIndex = (children, child) => {\n    return Array.prototype.indexOf.call(children, child);\n  };\n\n  return {\n    columnId,\n    realAlign,\n    isSubColumn,\n    realHeaderAlign,\n    columnOrTableParent,\n    setColumnWidth,\n    setColumnForcedProps,\n    setColumnRenders,\n    getPropsData,\n    getColumnElIndex\n  };\n}\n\nexport { useRender as default };","map":{"version":3,"mappings":"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","names":["useRender","props","slots","owner","instance","getCurrentInstance","columnId","ref","isSubColumn","realAlign","realHeaderAlign","ns","useNamespace","watchEffect","value","align","headerAlign","columnOrTableParent","computed","parent","vnode","vParent","tableId","realWidth","parseWidth","width","realMinWidth","parseMinWidth","minWidth","setColumnWidth","column","Number","setColumnForcedProps","type","source","cellForced","Object","keys","forEach","prop","className","getDefaultClassName","forceClass","unref","namespace","checkSubColumn","children","Array","isArray","child","check","item","_a","name","setColumnRenders","renderHeader","debugWarn","scope","columnConfig","header","label","originRenderCell","renderCell","data","h","class","renderExpanded","default","defaultRenderCell","prefix","treeCellPrefix","props2","style","showOverflowTooltip","getPropsData","propsKey","reduce","prev","cur","key","getColumnElIndex","prototype","indexOf","call"],"sources":["../../../../../../../packages/components/table/src/table-column/render-helper.ts"],"sourcesContent":["import { getCurrentInstance, h, ref, computed, watchEffect, unref } from 'vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport {\n  cellForced,\n  defaultRenderCell,\n  treeCellPrefix,\n  getDefaultClassName,\n} from '../config'\nimport { parseWidth, parseMinWidth } from '../util'\n\nimport type { ComputedRef } from 'vue'\nimport type { TableColumnCtx, TableColumn } from './defaults'\n\nfunction useRender<T>(\n  props: TableColumnCtx<T>,\n  slots,\n  owner: ComputedRef<any>\n) {\n  const instance = getCurrentInstance() as TableColumn<T>\n  const columnId = ref('')\n  const isSubColumn = ref(false)\n  const realAlign = ref<string>()\n  const realHeaderAlign = ref<string>()\n  const ns = useNamespace('table')\n  watchEffect(() => {\n    realAlign.value = props.align ? `is-${props.align}` : null\n    // nextline help render\n    realAlign.value\n  })\n  watchEffect(() => {\n    realHeaderAlign.value = props.headerAlign\n      ? `is-${props.headerAlign}`\n      : realAlign.value\n    // nextline help render\n    realHeaderAlign.value\n  })\n  const columnOrTableParent = computed(() => {\n    let parent: any = instance.vnode.vParent || instance.parent\n    while (parent && !parent.tableId && !parent.columnId) {\n      parent = parent.vnode.vParent || parent.parent\n    }\n    return parent\n  })\n\n  const realWidth = ref(parseWidth(props.width))\n  const realMinWidth = ref(parseMinWidth(props.minWidth))\n  const setColumnWidth = (column: TableColumnCtx<T>) => {\n    if (realWidth.value) column.width = realWidth.value\n    if (realMinWidth.value) {\n      column.minWidth = realMinWidth.value\n    }\n    if (!column.minWidth) {\n      column.minWidth = 80\n    }\n    column.realWidth = Number(\n      column.width === undefined ? column.minWidth : column.width\n    )\n    return column\n  }\n  const setColumnForcedProps = (column: TableColumnCtx<T>) => {\n    // 对于特定类型的 column，某些属性不允许设置\n    const type = column.type\n    const source = cellForced[type] || {}\n    Object.keys(source).forEach((prop) => {\n      const value = source[prop]\n      if (prop !== 'className' && value !== undefined) {\n        column[prop] = value\n      }\n    })\n    const className = getDefaultClassName(type)\n    if (className) {\n      const forceClass = `${unref(ns.namespace)}-${className}`\n      column.className = column.className\n        ? `${column.className} ${forceClass}`\n        : forceClass\n    }\n    return column\n  }\n\n  const checkSubColumn = (children: TableColumn<T> | TableColumn<T>[]) => {\n    if (Array.isArray(children)) {\n      children.forEach((child) => check(child))\n    } else {\n      check(children)\n    }\n    function check(item: TableColumn<T>) {\n      if (item?.type?.name === 'ElTableColumn') {\n        item.vParent = instance\n      }\n    }\n  }\n  const setColumnRenders = (column: TableColumnCtx<T>) => {\n    // renderHeader 属性不推荐使用。\n    if (props.renderHeader) {\n      debugWarn(\n        'TableColumn',\n        'Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.'\n      )\n    } else if (column.type !== 'selection') {\n      column.renderHeader = (scope) => {\n        // help render\n        instance.columnConfig.value['label']\n        const renderHeader = slots.header\n        return renderHeader ? renderHeader(scope) : column.label\n      }\n    }\n\n    let originRenderCell = column.renderCell\n    // TODO: 这里的实现调整\n    if (column.type === 'expand') {\n      // 对于展开行，renderCell 不允许配置的。在上一步中已经设置过，这里需要简单封装一下。\n      column.renderCell = (data) =>\n        h(\n          'div',\n          {\n            class: 'cell',\n          },\n          [originRenderCell(data)]\n        )\n      owner.value.renderExpanded = (data) => {\n        return slots.default ? slots.default(data) : slots.default\n      }\n    } else {\n      originRenderCell = originRenderCell || defaultRenderCell\n      // 对 renderCell 进行包装\n      column.renderCell = (data) => {\n        let children = null\n        if (slots.default) {\n          children = slots.default(data)\n        } else {\n          children = originRenderCell(data)\n        }\n        const prefix = treeCellPrefix(data)\n        const props = {\n          class: 'cell',\n          style: {},\n        }\n        if (column.showOverflowTooltip) {\n          props.class = `${props.class} ${unref(ns.namespace)}-tooltip`\n          props.style = {\n            width: `${\n              (data.column.realWidth || Number(data.column.width)) - 1\n            }px`,\n          }\n        }\n        checkSubColumn(children)\n        return h('div', props, [prefix, children])\n      }\n    }\n    return column\n  }\n  const getPropsData = (...propsKey: unknown[]) => {\n    return propsKey.reduce((prev, cur) => {\n      if (Array.isArray(cur)) {\n        cur.forEach((key) => {\n          prev[key] = props[key]\n        })\n      }\n      return prev\n    }, {})\n  }\n  const getColumnElIndex = (children, child) => {\n    return Array.prototype.indexOf.call(children, child)\n  }\n\n  return {\n    columnId,\n    realAlign,\n    isSubColumn,\n    realHeaderAlign,\n    columnOrTableParent,\n    setColumnWidth,\n    setColumnForcedProps,\n    setColumnRenders,\n    getPropsData,\n    getColumnElIndex,\n  }\n}\n\nexport default useRender\n"]},"metadata":{},"sourceType":"module"}