{"ast":null,"code":"import { defineComponent, inject, computed, unref, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../roving-focus-group/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { DROPDOWN_INJECTION_KEY } from './tokens.mjs';\nimport { dropdownMenuProps, DROPDOWN_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY, FIRST_LAST_KEYS, LAST_KEYS } from './dropdown.mjs';\nimport { useDropdown } from './useDropdown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { FOCUS_TRAP_INJECTION_KEY } from '../../focus-trap/src/tokens.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY } from '../../roving-focus-group/src/tokens.mjs';\nimport { ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY$1 } from '../../roving-focus-group/src/roving-focus-group.mjs';\nimport { composeRefs } from '../../../utils/vue/refs.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusFirst } from '../../roving-focus-group/src/utils.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElDropdownMenu\",\n  props: dropdownMenuProps,\n\n  setup(props) {\n    const ns = useNamespace(\"dropdown\");\n    const {\n      _elDropdownSize\n    } = useDropdown();\n    const size = _elDropdownSize.value;\n    const {\n      focusTrapRef,\n      onKeydown\n    } = inject(FOCUS_TRAP_INJECTION_KEY, void 0);\n    const {\n      contentRef\n    } = inject(DROPDOWN_INJECTION_KEY, void 0);\n    const {\n      collectionRef: dropdownCollectionRef,\n      getItems\n    } = inject(COLLECTION_INJECTION_KEY, void 0);\n    const {\n      rovingFocusGroupRef,\n      rovingFocusGroupRootStyle,\n      tabIndex,\n      onBlur,\n      onFocus,\n      onMousedown\n    } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);\n    const {\n      collectionRef: rovingFocusGroupCollectionRef\n    } = inject(COLLECTION_INJECTION_KEY$1, void 0);\n    const dropdownKls = computed(() => {\n      return [ns.b(\"menu\"), ns.bm(\"menu\", size == null ? void 0 : size.value)];\n    });\n    const dropdownListWrapperRef = composeRefs(contentRef, dropdownCollectionRef, focusTrapRef, rovingFocusGroupRef, rovingFocusGroupCollectionRef);\n    const composedKeydown = composeEventHandlers(e => {\n      var _a;\n\n      (_a = props.onKeydown) == null ? void 0 : _a.call(props, e);\n    }, e => {\n      const {\n        currentTarget,\n        code,\n        target\n      } = e;\n      const isKeydownContained = currentTarget.contains(target);\n\n      if (isKeydownContained) {}\n\n      if (EVENT_CODE.tab === code) {\n        e.stopImmediatePropagation();\n      }\n\n      e.preventDefault();\n      if (target !== unref(contentRef)) return;\n      if (!FIRST_LAST_KEYS.includes(code)) return;\n      const items = getItems().filter(item => !item.disabled);\n      const targets = items.map(item => item.ref);\n\n      if (LAST_KEYS.includes(code)) {\n        targets.reverse();\n      }\n\n      focusFirst(targets);\n    });\n\n    const handleKeydown = e => {\n      composedKeydown(e);\n      onKeydown(e);\n    };\n\n    return {\n      size,\n      rovingFocusGroupRootStyle,\n      tabIndex,\n      dropdownKls,\n      dropdownListWrapperRef,\n      handleKeydown,\n      onBlur,\n      onFocus,\n      onMousedown\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"ul\", {\n    ref: _ctx.dropdownListWrapperRef,\n    class: normalizeClass(_ctx.dropdownKls),\n    style: normalizeStyle(_ctx.rovingFocusGroupRootStyle),\n    tabindex: -1,\n    role: \"menu\",\n    onBlur: _cache[0] || (_cache[0] = (...args) => _ctx.onBlur && _ctx.onBlur(...args)),\n    onFocus: _cache[1] || (_cache[1] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),\n    onKeydown: _cache[2] || (_cache[2] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args)),\n    onMousedown: _cache[3] || (_cache[3] = (...args) => _ctx.onMousedown && _ctx.onMousedown(...args))\n  }, [renderSlot(_ctx.$slots, \"default\")], 38);\n}\n\nvar DropdownMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { DropdownMenu as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAmCA,MAAKA,YAAaC,eAAa;AAC7BC,MAAM,kBADuB;AAE7BC,OAAO,mBAFsB;;AAG7BC,QAAMD,KAAN,EAAa;AACX,UAAME,KAAKC,YAAa,YAAxB;AACA,UAAM;AAAEC;AAAF,QAAsBC,aAA5B;AACA,UAAMC,OAAOF,eAAgB,MAA7B;AAEA,UAAM;AAAEG,kBAAF;AAAgBC;AAAhB,QAA8BC,OAClCC,wBADkC,EAElC,MAFkC,CAApC;AAKM;AAAEC;AAAF,QAAiBF,OAAOG,sBAAP,EAA+B,MAA/B,CAAjB;AAEN,UAAM;AAAEC,qBAAeC,qBAAjB;AAAwCC;AAAxC,QAAqDN,OACzDO,wBADyD,EAEzD,MAFyD,CAA3D;AAKM;AACJC,yBADI;AAEJC,+BAFI;AAGJC,cAHI;AAIJC,YAJI;AAKJC,aALI;AAMJC;AANI,QAOFb,OAAOc,gCAAP,EAAyC,MAAzC,CAPE;AASN,UAAM;AAAEV,qBAAeW;AAAjB,QAAmDf,OACvDgB,0BADuD,EAEvD,MAFuD,CAAzD;AAKM,wBAAcC,SAAS,MAAM;AACjC,aAAO,CAACxB,EAAG,EAAH,CAAK,MAAL,CAAD,EAAeA,EAAG,GAAH,CAAM,MAAN,EAAcI,IAAM,QAAN,GAAM,MAAN,GAAMA,UAApB,CAAf,CAAP;AAA0C,KADxB,CAAd;AAIN,UAAMqB,sBAAyB,eAC7BhB,UAD6B,EAE7BG,qBAF6B,EAG7BP,YAH6B,EAI7BU,mBAJ6B,EAK7BO,6BAL6B,CAA/B;AAQM,4BAAkBI,oBACtB,CAACC,CAAD,IAAsB;AACpB;;AAAkB,OAEpBC,EAAO,kBAFa,KAEb,IAFa,GAEb,MAFa,GAEbA,iBAFa;AAGZ,KAJR,EAIQD,KAAE;AACF;AAAAE;AAAAC;AAAsBC;AAAtB,UAAsBJ,CAAtB;AAIN,YAAwBK,mDAAxB;;AAAwB,+BAIpB;;AACA;AAAAL;AAGF;;AAEFA;AAAkC,wCAC9B;AAAiC,2CACrC;AAGA,YAAMM,KAAU,WAAM,GAAIC,MAAV,CAAUC,QAAe,cAAzB,CAAhB;AACI,gCAA0BA,gBAA1B;;AACM;AAAAC;AAEC;;AAAAC;AAIT,KAhCJ,CADI;;AAkCY;AACNC;AAAAhC;AAGL,KAJW;;AAKhB;AACAF,UADA;AAEAY,+BAFA;AAGAC,cAHA;AAIAsB,iBAJA;AAKAd,4BALA;AAMAe,mBANA;AAOAtB,YAPA;AAQAC,aARA;AAQAC;AARA;AAQA;;AA7FyB,EAA/B;;2BAtBOqB;AAAA,SAXGC;AACLC,aAAO,uBADF;AAELC,WAAKC,cAAE,kBAFF;AAGLC,SAAU,gDAHL;AAINC,YAAK,IAJC;AAKLC,gBALK;AAML9B,kBAAO,GAAP,KAAOuB,4DAAP,CANK;AAOLtB,mBAAS,GAAT,KAASsB,8DAAT,CAPK;AAQLnC,qBAAW,GAAX,KAAWmC,0EAAX,CARK;AAQMrB;AARN,KAUO,oCAVP,KAWH","names":["_sfc_main","defineComponent","name","props","setup","ns","useNamespace","_elDropdownSize","useDropdown","size","focusTrapRef","onKeydown","inject","FOCUS_TRAP_INJECTION_KEY","contentRef","DROPDOWN_INJECTION_KEY","collectionRef","dropdownCollectionRef","getItems","DROPDOWN_COLLECTION_INJECTION_KEY","rovingFocusGroupRef","rovingFocusGroupRootStyle","tabIndex","onBlur","onFocus","onMousedown","ROVING_FOCUS_GROUP_INJECTION_KEY","rovingFocusGroupCollectionRef","ROVING_FOCUS_COLLECTION_INJECTION_KEY","computed","dropdownListWrapperRef","composeEventHandlers","e","_a","currentTarget","code","target","isKeydownContained","items","filter","item","targets","focusFirst","composedKeydown","dropdownKls","handleKeydown","_cache","_openBlock","ref","class","_normalizeClass","style","tabindex","role"],"sources":["../../../../../../packages/components/dropdown/src/dropdown-menu.vue"],"sourcesContent":["<template>\n  <ul\n    :ref=\"dropdownListWrapperRef\"\n    :class=\"dropdownKls\"\n    :style=\"rovingFocusGroupRootStyle\"\n    :tabindex=\"-1\"\n    role=\"menu\"\n    @blur=\"onBlur\"\n    @focus=\"onFocus\"\n    @keydown=\"handleKeydown\"\n    @mousedown=\"onMousedown\"\n  >\n    <slot></slot>\n  </ul>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, inject, unref } from 'vue'\nimport { composeRefs, composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport {\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n  ROVING_FOCUS_GROUP_INJECTION_KEY,\n  focusFirst,\n} from '@element-plus/components/roving-focus-group'\nimport { useNamespace } from '@element-plus/hooks'\nimport { DROPDOWN_INJECTION_KEY } from './tokens'\nimport {\n  DROPDOWN_COLLECTION_INJECTION_KEY,\n  dropdownMenuProps,\n  FIRST_LAST_KEYS,\n  LAST_KEYS,\n} from './dropdown'\nimport { useDropdown } from './useDropdown'\n\nexport default defineComponent({\n  name: 'ElDropdownMenu',\n  props: dropdownMenuProps,\n  setup(props) {\n    const ns = useNamespace('dropdown')\n    const { _elDropdownSize } = useDropdown()\n    const size = _elDropdownSize.value\n\n    const { focusTrapRef, onKeydown } = inject(\n      FOCUS_TRAP_INJECTION_KEY,\n      undefined\n    )!\n\n    const { contentRef } = inject(DROPDOWN_INJECTION_KEY, undefined)!\n\n    const { collectionRef: dropdownCollectionRef, getItems } = inject(\n      DROPDOWN_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const {\n      rovingFocusGroupRef,\n      rovingFocusGroupRootStyle,\n      tabIndex,\n      onBlur,\n      onFocus,\n      onMousedown,\n    } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, undefined)!\n\n    const { collectionRef: rovingFocusGroupCollectionRef } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const dropdownKls = computed(() => {\n      return [ns.b('menu'), ns.bm('menu', size?.value)]\n    })\n\n    const dropdownListWrapperRef = composeRefs(\n      contentRef,\n      dropdownCollectionRef,\n      focusTrapRef,\n      rovingFocusGroupRef,\n      rovingFocusGroupCollectionRef\n    )\n\n    const composedKeydown = composeEventHandlers(\n      (e: KeyboardEvent) => {\n        props.onKeydown?.(e)\n      },\n      (e) => {\n        const { currentTarget, code, target } = e\n        const isKeydownContained = (currentTarget as Node).contains(\n          target as Node\n        )\n\n        if (isKeydownContained) {\n          // TODO: implement typeahead search\n        }\n\n        if (EVENT_CODE.tab === code) {\n          e.stopImmediatePropagation()\n        }\n\n        e.preventDefault()\n\n        if (target !== unref(contentRef)) return\n        if (!FIRST_LAST_KEYS.includes(code)) return\n        const items = getItems<{ disabled: boolean }>().filter(\n          (item) => !item.disabled\n        )\n        const targets = items.map((item) => item.ref!)\n        if (LAST_KEYS.includes(code)) {\n          targets.reverse()\n        }\n        focusFirst(targets)\n      }\n    )\n\n    const handleKeydown = (e: KeyboardEvent) => {\n      composedKeydown(e)\n      onKeydown(e)\n    }\n\n    return {\n      size,\n      rovingFocusGroupRootStyle,\n      tabIndex,\n      dropdownKls,\n      dropdownListWrapperRef,\n      handleKeydown,\n      onBlur,\n      onFocus,\n      onMousedown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}