{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createVNode, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport ElCascaderNode from './node2.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { generateId } from '../../../utils/rand.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance();\n    const ns = useNamespace(\"cascader-menu\");\n    const {\n      t\n    } = useLocale();\n    const id = generateId();\n    let activeNode = null;\n    let hoverTimer = null;\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    const hoverZone = ref(null);\n    const isEmpty = computed(() => !props.nodes.length);\n    const isLoading = computed(() => !panel.initialLoaded);\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`);\n\n    const handleExpand = e => {\n      activeNode = e.target;\n    };\n\n    const handleMouseMove = e => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        const el = instance.vnode.el;\n        const {\n          left\n        } = el.getBoundingClientRect();\n        const {\n          offsetWidth,\n          offsetHeight\n        } = el;\n        const startX = e.clientX - left;\n        const top = activeNode.offsetTop;\n        const bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `;\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_cascader_node = resolveComponent(\"el-cascader-node\");\n\n  const _component_loading = resolveComponent(\"loading\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  return openBlock(), createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    class: normalizeClass(_ctx.ns.b()),\n    \"wrap-class\": _ctx.ns.e(\"wrap\"),\n    \"view-class\": [_ctx.ns.e(\"list\"), _ctx.ns.is(\"empty\", _ctx.isEmpty)],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    default: withCtx(() => {\n      var _a;\n\n      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.nodes, node => {\n        return openBlock(), createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [createVNode(_component_el_icon, {\n        size: \"14\",\n        class: normalizeClass(_ctx.ns.is(\"loading\"))\n      }, {\n        default: withCtx(() => [createVNode(_component_loading)]),\n        _: 1\n      }, 8, [\"class\"]), createTextVNode(\" \" + toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)], 2)) : _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, toDisplayString(_ctx.t(\"el.cascader.noData\")), 3)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (openBlock(), createElementBlock(\"svg\", {\n        key: 2,\n        ref: \"hoverZone\",\n        class: normalizeClass(_ctx.ns.e(\"hover-zone\"))\n      }, null, 2)) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"wrap-class\", \"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\n\nvar ElCascaderMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElCascaderMenu as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","Loading","ElIcon","ElScrollbar","ElCascaderNode","props","nodes","type","required","index","setup","instance","ns","useNamespace","t","useLocale","id","activeNode","hoverTimer","panel","inject","hoverZone","ref","isEmpty","length","isLoading","menuId","e","contains","target","clearHoverTimer","vnode","el","left","offsetWidth","offsetHeight","clientX","top","value","innerHTML","startX","bottom","window","clearHoverZone","config","hoverThreshold","clearTimeout","handleExpand","handleMouseMove","_createBlock","key","tag","role","class","_normalizeClass","_ctx","b","is","onMousemove","onMouseleave","_openBlock","_createElementBlock","node","_createVNode","size","default","_","_createTextVNode","_toDisplayString"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    :class=\"ns.b()\"\n    :wrap-class=\"ns.e('wrap')\"\n    :view-class=\"[ns.e('list'), ns.is('empty', isEmpty)]\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" :class=\"ns.e('empty-text')\">\n      <el-icon size=\"14\" :class=\"ns.is('loading')\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" :class=\"ns.e('empty-text')\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      :class=\"ns.e('hover-zone')\"\n    ></svg>\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { generateId } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const ns = useNamespace('cascader-menu')\n\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<number> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const isLoading = computed(() => !panel.initialLoaded)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}