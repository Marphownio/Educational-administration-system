{"ast":null,"code":"import baseSortedIndexBy from './_baseSortedIndexBy.js';\nimport identity from './identity.js';\nimport isSymbol from './isSymbol.js';\n/** Used as references for the maximum length and index of an array. */\n\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n/**\r\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\r\n * performs a binary search of `array` to determine the index at which `value`\r\n * should be inserted into `array` in order to maintain its sort order.\r\n *\r\n * @private\r\n * @param {Array} array The sorted array to inspect.\r\n * @param {*} value The value to evaluate.\r\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\r\n * @returns {number} Returns the index at which `value` should be inserted\r\n *  into `array`.\r\n */\n\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array == null ? low : array.length;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = low + high >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n\n    return high;\n  }\n\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nexport default baseSortedIndex;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/_baseSortedIndex.js"],"names":["baseSortedIndexBy","identity","isSymbol","MAX_ARRAY_LENGTH","HALF_MAX_ARRAY_LENGTH","baseSortedIndex","array","value","retHighest","low","high","length","mid","computed"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,yBAA9B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;AACA,IAAIC,gBAAgB,GAAG,UAAvB;AAAA,IACIC,qBAAqB,GAAGD,gBAAgB,KAAK,CADjD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,eAAT,CAAyBC,KAAzB,EAAgCC,KAAhC,EAAuCC,UAAvC,EAAmD;AACjD,MAAIC,GAAG,GAAG,CAAV;AAAA,MACIC,IAAI,GAAGJ,KAAK,IAAI,IAAT,GAAgBG,GAAhB,GAAsBH,KAAK,CAACK,MADvC;;AAGA,MAAI,OAAOJ,KAAP,IAAgB,QAAhB,IAA4BA,KAAK,KAAKA,KAAtC,IAA+CG,IAAI,IAAIN,qBAA3D,EAAkF;AAChF,WAAOK,GAAG,GAAGC,IAAb,EAAmB;AACjB,UAAIE,GAAG,GAAIH,GAAG,GAAGC,IAAP,KAAiB,CAA3B;AAAA,UACIG,QAAQ,GAAGP,KAAK,CAACM,GAAD,CADpB;;AAGA,UAAIC,QAAQ,KAAK,IAAb,IAAqB,CAACX,QAAQ,CAACW,QAAD,CAA9B,KACCL,UAAU,GAAIK,QAAQ,IAAIN,KAAhB,GAA0BM,QAAQ,GAAGN,KADhD,CAAJ,EAC6D;AAC3DE,QAAAA,GAAG,GAAGG,GAAG,GAAG,CAAZ;AACD,OAHD,MAGO;AACLF,QAAAA,IAAI,GAAGE,GAAP;AACD;AACF;;AACD,WAAOF,IAAP;AACD;;AACD,SAAOV,iBAAiB,CAACM,KAAD,EAAQC,KAAR,EAAeN,QAAf,EAAyBO,UAAzB,CAAxB;AACD;;AAED,eAAeH,eAAf","sourcesContent":["import baseSortedIndexBy from './_baseSortedIndexBy.js';\r\nimport identity from './identity.js';\r\nimport isSymbol from './isSymbol.js';\r\n\r\n/** Used as references for the maximum length and index of an array. */\r\nvar MAX_ARRAY_LENGTH = 4294967295,\r\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\r\n\r\n/**\r\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\r\n * performs a binary search of `array` to determine the index at which `value`\r\n * should be inserted into `array` in order to maintain its sort order.\r\n *\r\n * @private\r\n * @param {Array} array The sorted array to inspect.\r\n * @param {*} value The value to evaluate.\r\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\r\n * @returns {number} Returns the index at which `value` should be inserted\r\n *  into `array`.\r\n */\r\nfunction baseSortedIndex(array, value, retHighest) {\r\n  var low = 0,\r\n      high = array == null ? low : array.length;\r\n\r\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\r\n    while (low < high) {\r\n      var mid = (low + high) >>> 1,\r\n          computed = array[mid];\r\n\r\n      if (computed !== null && !isSymbol(computed) &&\r\n          (retHighest ? (computed <= value) : (computed < value))) {\r\n        low = mid + 1;\r\n      } else {\r\n        high = mid;\r\n      }\r\n    }\r\n    return high;\r\n  }\r\n  return baseSortedIndexBy(array, value, identity, retHighest);\r\n}\r\n\r\nexport default baseSortedIndex;\r\n"]},"metadata":{},"sourceType":"module"}