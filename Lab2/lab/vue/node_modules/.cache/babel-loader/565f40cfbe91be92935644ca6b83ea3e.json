{"ast":null,"code":"import { defineComponent, inject, ref, computed, h, withCtx, renderSlot, withKeys, withModifiers } from 'vue';\nimport { get } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport '../../../hooks/index.mjs';\nimport GroupItem from './group-item.mjs';\nimport OptionItem from './option-item.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { isObject } from '@vue/shared';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport DynamicSizeList from '../../virtual-list/src/components/dynamic-size-list.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSelectDropdown\",\n  props: {\n    data: Array,\n    hoveringIndex: Number,\n    width: Number\n  },\n\n  setup(props) {\n    const select = inject(selectV2InjectionKey);\n    const ns = useNamespace(\"select\");\n    const cachedHeights = ref([]);\n    const listRef = ref(null);\n    const isSized = computed(() => isUndefined(select.props.estimatedOptionHeight));\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: idx => cachedHeights.value[idx]\n      };\n    });\n\n    const contains = (arr = [], target) => {\n      const {\n        props: {\n          valueKey\n        }\n      } = select;\n\n      if (!isObject(target)) {\n        return arr.includes(target);\n      }\n\n      return arr && arr.some(item => {\n        return get(item, valueKey) === get(target, valueKey);\n      });\n    };\n\n    const isEqual = (selected, target) => {\n      if (!isObject(target)) {\n        return selected === target;\n      } else {\n        const {\n          valueKey\n        } = select.props;\n        return get(selected, valueKey) === get(target, valueKey);\n      }\n    };\n\n    const isItemSelected = (modelValue, target) => {\n      if (select.props.multiple) {\n        return contains(modelValue, target.value);\n      }\n\n      return isEqual(modelValue, target.value);\n    };\n\n    const isItemDisabled = (modelValue, selected) => {\n      const {\n        disabled,\n        multiple,\n        multipleLimit\n      } = select.props;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n\n    const isItemHovering = target => props.hoveringIndex === target;\n\n    const scrollToItem = index => {\n      const list = listRef.value;\n\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n\n    const resetScrollTop = () => {\n      const list = listRef.value;\n\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n\n    return {\n      ns,\n      select,\n      listProps,\n      listRef,\n      isSized,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop\n    };\n  },\n\n  render(_ctx, _cache) {\n    var _a;\n\n    const {\n      $slots,\n      data,\n      listProps,\n      select,\n      isSized,\n      width,\n      ns,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected\n    } = _ctx;\n    const Comp = isSized ? FixedSizeList : DynamicSizeList;\n    const {\n      props: selectProps,\n      onSelect,\n      onHover,\n      onKeyboardNavigate,\n      onKeyboardSelect\n    } = select;\n    const {\n      height,\n      modelValue,\n      multiple\n    } = selectProps;\n\n    if (data.length === 0) {\n      return h(\"div\", {\n        class: ns.b(\"dropdown\"),\n        style: {\n          width: `${width}px`\n        }\n      }, (_a = $slots.empty) == null ? void 0 : _a.call($slots));\n    }\n\n    const ListItem = withCtx(scoped => {\n      const {\n        index,\n        data: data2\n      } = scoped;\n      const item = data2[index];\n\n      if (data2[index].type === \"Group\") {\n        return h(GroupItem, {\n          item,\n          style: scoped.style,\n          height: isSized ? listProps.itemSize : listProps.estimatedSize\n        });\n      }\n\n      const selected = isItemSelected(modelValue, item);\n      const itemDisabled = isItemDisabled(modelValue, selected);\n      return h(OptionItem, { ...scoped,\n        selected,\n        disabled: item.disabled || itemDisabled,\n        created: !!item.created,\n        hovering: isItemHovering(index),\n        item,\n        onSelect,\n        onHover\n      }, {\n        default: withCtx(props => {\n          return renderSlot($slots, \"default\", props, () => [h(\"span\", item.label)]);\n        })\n      });\n    });\n    const List = h(Comp, {\n      ref: \"listRef\",\n      className: ns.be(\"dropdown\", \"list\"),\n      data,\n      height,\n      width,\n      total: data.length,\n      scrollbarAlwaysOn: selectProps.scrollbarAlwaysOn,\n      onKeydown: [_cache[1] || (_cache[1] = withKeys(withModifiers(() => onKeyboardNavigate(\"forward\"), [\"stop\", \"prevent\"]), [\"down\"])), _cache[2] || (_cache[2] = withKeys(withModifiers(() => onKeyboardNavigate(\"backward\"), [\"stop\", \"prevent\"]), [\"up\"])), _cache[3] || (_cache[3] = withKeys(withModifiers(onKeyboardSelect, [\"stop\", \"prevent\"]), [\"enter\"])), _cache[4] || (_cache[4] = withKeys(withModifiers(() => select.expanded = false, [\"stop\", \"prevent\"]), [\"esc\"])), _cache[5] || (_cache[5] = withKeys(() => select.expanded = false, [\"tab\"]))],\n      ...listProps\n    }, {\n      default: ListItem\n    });\n    return h(\"div\", {\n      class: [ns.b(\"dropdown\"), ns.is(\"multiple\", multiple)]\n    }, [List]);\n  }\n\n});\n\nexport { _sfc_main as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","data","hoveringIndex","width","setup","select","inject","ns","useNamespace","cachedHeights","ref","listRef","isSized","isUndefined","estimatedOptionHeight","computed","value","itemSize","itemHeight","estimatedSize","idx","contains","arr","target","valueKey","isObject","includes","some","item","get","selected","modelValue","multiple","disabled","multipleLimit","length","isItemHovering","index","list","scrollToItem","resetScrollTop","listProps","isItemDisabled","isItemSelected","render","_ctx","_cache","$slots","onSelect","onHover","onKeyboardNavigate","onKeyboardSelect","height","selectProps","class","style","withCtx","scoped","data2","type","itemDisabled","created","hovering","default","List","className","total","scrollbarAlwaysOn","onKeydown","withKeys","withModifiers"],"sources":["../../../../../../packages/components/select-v2/src/select-dropdown.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  inject,\n  ref,\n  renderSlot,\n  h,\n  withCtx,\n  withKeys,\n  withModifiers,\n} from 'vue'\nimport { get } from 'lodash-unified'\nimport { isUndefined, isObject } from '@element-plus/utils'\nimport {\n  FixedSizeList,\n  DynamicSizeList,\n} from '@element-plus/components/virtual-list'\nimport { useNamespace } from '@element-plus/hooks'\nimport GroupItem from './group-item.vue'\nimport OptionItem from './option-item.vue'\n\nimport { selectV2InjectionKey } from './token'\n\nimport type { ItemProps } from '@element-plus/components/virtual-list'\nimport type { OptionItemProps, Option } from './select.types'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  props: {\n    data: Array,\n    hoveringIndex: Number,\n    width: Number,\n  },\n  setup(props) {\n    const select = inject(selectV2InjectionKey) as any\n    const ns = useNamespace('select')\n    const cachedHeights = ref<Array<number>>([])\n\n    const listRef = ref(null)\n\n    const isSized = computed(() =>\n      isUndefined(select.props.estimatedOptionHeight)\n    )\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight,\n        }\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: (idx: number) => cachedHeights.value[idx],\n      }\n    })\n\n    const contains = (arr: Array<any> = [], target: any) => {\n      const {\n        props: { valueKey },\n      } = select\n\n      if (!isObject(target)) {\n        return arr.includes(target)\n      }\n\n      return (\n        arr &&\n        arr.some((item) => {\n          return get(item, valueKey) === get(target, valueKey)\n        })\n      )\n    }\n    const isEqual = (selected: unknown, target: unknown) => {\n      if (!isObject(target)) {\n        return selected === target\n      } else {\n        const { valueKey } = select.props\n        return get(selected, valueKey) === get(target, valueKey)\n      }\n    }\n\n    const isItemSelected = (modelValue: any[] | any, target: Option) => {\n      if (select.props.multiple) {\n        return contains(modelValue, target.value)\n      }\n      return isEqual(modelValue, target.value)\n    }\n\n    const isItemDisabled = (modelValue: any[] | any, selected: boolean) => {\n      const { disabled, multiple, multipleLimit } = select.props\n      return (\n        disabled ||\n        (!selected &&\n          (multiple\n            ? multipleLimit > 0 && modelValue.length >= multipleLimit\n            : false))\n      )\n    }\n\n    const isItemHovering = (target: number) => props.hoveringIndex === target\n\n    const scrollToItem = (index: number) => {\n      const list = listRef.value as any\n      if (list) {\n        list.scrollToItem(index)\n      }\n    }\n\n    const resetScrollTop = () => {\n      const list = listRef.value as any\n      if (list) {\n        list.resetScrollTop()\n      }\n    }\n\n    // computed\n    return {\n      ns,\n      select,\n      listProps,\n      listRef,\n      isSized,\n\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n\n      scrollToItem,\n      resetScrollTop,\n    }\n  },\n\n  render(_ctx, _cache) {\n    const {\n      $slots,\n\n      data,\n      listProps,\n      select,\n      isSized,\n      width,\n      ns,\n      // methods\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n    } = _ctx\n\n    const Comp = isSized ? FixedSizeList : DynamicSizeList\n\n    const {\n      props: selectProps,\n      onSelect,\n      onHover,\n      onKeyboardNavigate,\n      onKeyboardSelect,\n    } = select\n    const { height, modelValue, multiple } = selectProps\n\n    if (data.length === 0) {\n      return h(\n        'div',\n        {\n          class: ns.b('dropdown'),\n          style: {\n            width: `${width}px`,\n          },\n        },\n        $slots.empty?.()\n      )\n    }\n\n    const ListItem = withCtx((scoped: ItemProps<any>) => {\n      const { index, data } = scoped\n      const item = data[index]\n      // render group item which is not selectable.\n      if (data[index].type === 'Group') {\n        return h(GroupItem, {\n          item,\n          style: scoped.style,\n          height: isSized ? listProps.itemSize : listProps.estimatedSize,\n        })\n      }\n\n      const selected = isItemSelected(modelValue, item)\n      const itemDisabled = isItemDisabled(modelValue, selected)\n      // render option item which is selectable\n      return h(\n        OptionItem,\n        {\n          ...scoped,\n          selected,\n          disabled: item.disabled || itemDisabled,\n          created: !!item.created,\n          hovering: isItemHovering(index),\n          item,\n          onSelect,\n          onHover,\n        },\n        {\n          default: withCtx((props: OptionItemProps) => {\n            return renderSlot($slots, 'default', props, () => [\n              h('span', item.label),\n            ])\n          }),\n        }\n      )\n    })\n\n    const List = h(\n      Comp,\n      {\n        ref: 'listRef', // forwarded ref so that select can access the list directly\n        className: ns.be('dropdown', 'list'),\n        data,\n        height,\n        width,\n        total: data.length,\n        scrollbarAlwaysOn: selectProps.scrollbarAlwaysOn,\n        onKeydown: [\n          _cache[1] ||\n            (_cache[1] = withKeys(\n              withModifiers(\n                () => onKeyboardNavigate('forward'),\n                ['stop', 'prevent']\n              ),\n              ['down']\n            )),\n          _cache[2] ||\n            (_cache[2] = withKeys(\n              withModifiers(\n                () => onKeyboardNavigate('backward'),\n                ['stop', 'prevent']\n              ),\n              ['up']\n            )),\n          _cache[3] ||\n            (_cache[3] = withKeys(\n              withModifiers(onKeyboardSelect, ['stop', 'prevent']),\n              ['enter']\n            )),\n\n          _cache[4] ||\n            (_cache[4] = withKeys(\n              withModifiers(\n                () => (select.expanded = false),\n                ['stop', 'prevent']\n              ),\n              ['esc']\n            )),\n          _cache[5] ||\n            (_cache[5] = withKeys(() => (select.expanded = false), ['tab'])),\n          // _cache[6] || (_cache[6] = () => {\n          //   console.log(11)\n          // }),\n        ],\n        ...listProps,\n      },\n      {\n        default: ListItem,\n      }\n    )\n    return h(\n      'div',\n      {\n        class: [ns.b('dropdown'), ns.is('multiple', multiple)],\n      },\n      [List]\n    )\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}