{"ast":null,"code":"import baseRest from './_baseRest.js';\nimport unzipWith from './unzipWith.js';\n/**\r\n * This method is like `_.zip` except that it accepts `iteratee` to specify\r\n * how grouped values should be combined. The iteratee is invoked with the\r\n * elements of each group: (...group).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.8.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to process.\r\n * @param {Function} [iteratee=_.identity] The function to combine\r\n *  grouped values.\r\n * @returns {Array} Returns the new array of grouped elements.\r\n * @example\r\n *\r\n * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\r\n *   return a + b + c;\r\n * });\r\n * // => [111, 222]\r\n */\n\nvar zipWith = baseRest(function (arrays) {\n  var length = arrays.length,\n      iteratee = length > 1 ? arrays[length - 1] : undefined;\n  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n  return unzipWith(arrays, iteratee);\n});\nexport default zipWith;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/zipWith.js"],"names":["baseRest","unzipWith","zipWith","arrays","length","iteratee","undefined","pop"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAGF,QAAQ,CAAC,UAASG,MAAT,EAAiB;AACtC,MAAIC,MAAM,GAAGD,MAAM,CAACC,MAApB;AAAA,MACIC,QAAQ,GAAGD,MAAM,GAAG,CAAT,GAAaD,MAAM,CAACC,MAAM,GAAG,CAAV,CAAnB,GAAkCE,SADjD;AAGAD,EAAAA,QAAQ,GAAG,OAAOA,QAAP,IAAmB,UAAnB,IAAiCF,MAAM,CAACI,GAAP,IAAcF,QAA/C,IAA2DC,SAAtE;AACA,SAAOL,SAAS,CAACE,MAAD,EAASE,QAAT,CAAhB;AACD,CANqB,CAAtB;AAQA,eAAeH,OAAf","sourcesContent":["import baseRest from './_baseRest.js';\r\nimport unzipWith from './unzipWith.js';\r\n\r\n/**\r\n * This method is like `_.zip` except that it accepts `iteratee` to specify\r\n * how grouped values should be combined. The iteratee is invoked with the\r\n * elements of each group: (...group).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.8.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to process.\r\n * @param {Function} [iteratee=_.identity] The function to combine\r\n *  grouped values.\r\n * @returns {Array} Returns the new array of grouped elements.\r\n * @example\r\n *\r\n * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\r\n *   return a + b + c;\r\n * });\r\n * // => [111, 222]\r\n */\r\nvar zipWith = baseRest(function(arrays) {\r\n  var length = arrays.length,\r\n      iteratee = length > 1 ? arrays[length - 1] : undefined;\r\n\r\n  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\r\n  return unzipWith(arrays, iteratee);\r\n});\r\n\r\nexport default zipWith;\r\n"]},"metadata":{},"sourceType":"module"}