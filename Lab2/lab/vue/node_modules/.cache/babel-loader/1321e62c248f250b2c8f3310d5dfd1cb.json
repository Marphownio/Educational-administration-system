{"ast":null,"code":"import { defineComponent, inject, computed, createElementVNode, resolveComponent, openBlock, createElementBlock, normalizeClass, createCommentVNode, createBlock, withModifiers, withCtx, createVNode, Fragment } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElRadio } from '../../radio/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { Check, Loading, ArrowRight } from '@element-plus/icons-vue';\nimport NodeContent from './node-content.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElCascaderNode\",\n  components: {\n    ElCheckbox,\n    ElRadio,\n    NodeContent,\n    ElIcon,\n    Check,\n    Loading,\n    ArrowRight\n  },\n  props: {\n    node: {\n      type: Object,\n      required: true\n    },\n    menuId: String\n  },\n  emits: [\"expand\"],\n\n  setup(props, {\n    emit\n  }) {\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    const ns = useNamespace(\"cascader-node\");\n    const isHoverMenu = computed(() => panel.isHoverMenu);\n    const multiple = computed(() => panel.config.multiple);\n    const checkStrictly = computed(() => panel.config.checkStrictly);\n    const checkedNodeId = computed(() => {\n      var _a;\n\n      return (_a = panel.checkedNodes[0]) == null ? void 0 : _a.uid;\n    });\n    const isDisabled = computed(() => props.node.isDisabled);\n    const isLeaf = computed(() => props.node.isLeaf);\n    const expandable = computed(() => checkStrictly.value && !isLeaf.value || !isDisabled.value);\n    const inExpandingPath = computed(() => isInPath(panel.expandingNode));\n    const inCheckedPath = computed(() => checkStrictly.value && panel.checkedNodes.some(isInPath));\n\n    const isInPath = node => {\n      var _a;\n\n      const {\n        level,\n        uid\n      } = props.node;\n      return ((_a = node == null ? void 0 : node.pathNodes[level - 1]) == null ? void 0 : _a.uid) === uid;\n    };\n\n    const doExpand = () => {\n      if (inExpandingPath.value) return;\n      panel.expandNode(props.node);\n    };\n\n    const doCheck = checked => {\n      const {\n        node\n      } = props;\n      if (checked === node.checked) return;\n      panel.handleCheckChange(node, checked);\n    };\n\n    const doLoad = () => {\n      panel.lazyLoad(props.node, () => {\n        if (!isLeaf.value) doExpand();\n      });\n    };\n\n    const handleHoverExpand = e => {\n      if (!isHoverMenu.value) return;\n      handleExpand();\n      !isLeaf.value && emit(\"expand\", e);\n    };\n\n    const handleExpand = () => {\n      const {\n        node\n      } = props;\n      if (!expandable.value || node.loading) return;\n      node.loaded ? doExpand() : doLoad();\n    };\n\n    const handleClick = () => {\n      if (isHoverMenu.value && !isLeaf.value) return;\n\n      if (isLeaf.value && !isDisabled.value && !checkStrictly.value && !multiple.value) {\n        handleCheck(true);\n      } else {\n        handleExpand();\n      }\n    };\n\n    const handleSelectCheck = checked => {\n      if (checkStrictly.value) {\n        doCheck(checked);\n\n        if (props.node.loaded) {\n          doExpand();\n        }\n      } else {\n        handleCheck(checked);\n      }\n    };\n\n    const handleCheck = checked => {\n      if (!props.node.loaded) {\n        doLoad();\n      } else {\n        doCheck(checked);\n        !checkStrictly.value && doExpand();\n      }\n    };\n\n    return {\n      panel,\n      isHoverMenu,\n      multiple,\n      checkStrictly,\n      checkedNodeId,\n      isDisabled,\n      isLeaf,\n      expandable,\n      inExpandingPath,\n      inCheckedPath,\n      ns,\n      handleHoverExpand,\n      handleExpand,\n      handleClick,\n      handleCheck,\n      handleSelectCheck\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"id\", \"aria-haspopup\", \"aria-owns\", \"aria-expanded\", \"tabindex\"];\n\nconst _hoisted_2 = /* @__PURE__ */createElementVNode(\"span\", null, null, -1);\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  const _component_el_radio = resolveComponent(\"el-radio\");\n\n  const _component_check = resolveComponent(\"check\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_node_content = resolveComponent(\"node-content\");\n\n  const _component_loading = resolveComponent(\"loading\");\n\n  const _component_arrow_right = resolveComponent(\"arrow-right\");\n\n  return openBlock(), createElementBlock(\"li\", {\n    id: `${_ctx.menuId}-${_ctx.node.uid}`,\n    role: \"menuitem\",\n    \"aria-haspopup\": !_ctx.isLeaf,\n    \"aria-owns\": _ctx.isLeaf ? null : _ctx.menuId,\n    \"aria-expanded\": _ctx.inExpandingPath,\n    tabindex: _ctx.expandable ? -1 : void 0,\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"selectable\", _ctx.checkStrictly), _ctx.ns.is(\"active\", _ctx.node.checked), _ctx.ns.is(\"disabled\", !_ctx.expandable), _ctx.inExpandingPath && \"in-active-path\", _ctx.inCheckedPath && \"in-checked-path\"]),\n    onMouseenter: _cache[2] || (_cache[2] = (...args) => _ctx.handleHoverExpand && _ctx.handleHoverExpand(...args)),\n    onFocus: _cache[3] || (_cache[3] = (...args) => _ctx.handleHoverExpand && _ctx.handleHoverExpand(...args)),\n    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, [createCommentVNode(\" prefix \"), _ctx.multiple ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 0,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: _ctx.isDisabled,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"])),\n    \"onUpdate:modelValue\": _ctx.handleSelectCheck\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onUpdate:modelValue\"])) : _ctx.checkStrictly ? (openBlock(), createBlock(_component_el_radio, {\n    key: 1,\n    \"model-value\": _ctx.checkedNodeId,\n    label: _ctx.node.uid,\n    disabled: _ctx.isDisabled,\n    \"onUpdate:modelValue\": _ctx.handleSelectCheck,\n    onClick: _cache[1] || (_cache[1] = withModifiers(() => {}, [\"stop\"]))\n  }, {\n    default: withCtx(() => [createCommentVNode(\"\\n        Add an empty element to avoid render label,\\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\\n      \"), _hoisted_2]),\n    _: 1\n  }, 8, [\"model-value\", \"label\", \"disabled\", \"onUpdate:modelValue\"])) : _ctx.isLeaf && _ctx.node.checked ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass(_ctx.ns.e(\"prefix\"))\n  }, {\n    default: withCtx(() => [createVNode(_component_check)]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createCommentVNode(\" content \"), createVNode(_component_node_content), createCommentVNode(\" postfix \"), !_ctx.isLeaf ? (openBlock(), createElementBlock(Fragment, {\n    key: 3\n  }, [_ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.is(\"loading\"), _ctx.ns.e(\"postfix\")])\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  }, 8, [\"class\"])) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: normalizeClass([\"arrow-right\", _ctx.ns.e(\"postfix\")])\n  }, {\n    default: withCtx(() => [createVNode(_component_arrow_right)]),\n    _: 1\n  }, 8, [\"class\"]))], 2112)) : createCommentVNode(\"v-if\", true)], 42, _hoisted_1);\n}\n\nvar ElCascaderNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElCascaderNode as default };","map":{"version":3,"mappings":";;;;;;;;;;;AA2EA,MAAKA,YAAaC,eAAa;AAC7BC,MAAM,kBADuB;AAG7BC,YAAY;AACVC,cADU;AAEVC,WAFU;AAGVC,eAHU;AAIVC,UAJU;AAKVC,SALU;AAMVC,WANU;AAOVC;AAPU,GAHiB;AAa7BC,OAAO;AACLC,QAAM;AACJC,UAAM,QADF;AAEJC,cAAU;AAFN,KADD;AAKLC,UAAQ;AALH,GAbsB;AAqB7BC,SAAO,CAAC,QAAD,CArBsB;;AAuB7BC,QAAMN,KAAN,EAAa;AAAEO;AAAF,GAAb,EAAuB;AACrB,UAAMC,QAAQC,MAAO,8BAArB;AAEA,UAAMC,KAAKC,YAAa,iBAAxB;AACM,wBAAcC,QAAS,OAAMJ,KAAM,YAAZ,CAAvB;AACN,UAAMK,QAAW,YAAS,MAAML,MAAMM,MAAN,CAAaD,QAA5B,CAAjB;AACA,UAAME,aAAgB,YAAS,MAAMP,MAAMM,MAAN,CAAaC,aAA5B,CAAtB;AACA,UAAMC,aAAgB,YAAS,MAAM;AACrC,UAAMC,EAAN;;AACA,aAAe,yBAAe,CAAf,MAA0B,IAA1B,GAA0B,MAA1B,GAA0BA,MAAzC;AACM,KAHgB,CAAtB;AAMA,UAAMC,UAAkB,kBAAelB,qBAAf,CAAxB;AAEA,UAAMmB,iBACJ,yBADF;AAIM,uBAAmCP,yEAAnC;AACE,yBAAS,WAAc,qCAAvB;AACN,uBAAa,WAAkB,OAAIG,aAAQ,MAAR,IAAQP,iCAAZ,CAA/B;;AAA2C;AAG7C,UAAMS,EAAN;;AACE,YAAoB;AAAAG;AAAAC;AAAA,oBAApB;AAA2B;AAC3B,KAL2C;;AAKpB;AAGnB,yBAAgC,MAAhC,EACJ;AACAb,uBAAqBR,UAArB;AAA8B,KALP;;AAMvB,+BAA8B;AAAA;AAAAC;AAAA;AAGhC,UAAMqB,YAAerB,YAArB,EACQ;AACJO,YAAIe,iBAAJ,CAAYtB,IAAZ,EAAYqB,OAAZ;AAAmB,KALrB;;AAKqB;AAAAd;AAIjB,2BACAgB,QAAa;AAAO,OALH;AAMrB,KANqB;;AAOpB,2BAAgB,GAAeC;AAAA,8BAGlC;AACEC,kBAAiB;AAEb,aAAY,MAAZ,IAAYnB,eAAckB,CAAd,CAAZ;AAAmC,KANtC;;AAOD,sBAA2B;AAAA;AAAAxB;AAAA;AAG7B,UAAM,qBAAoBA,YAA1B,EACM;AAAoCA;AAGtC,KAPF;;AAYc;AACP,8CACL;;AAAA;AAAA0B;AAIE,OAJF,MAIE;AACJD;AACU;AACJ,KATQ;;AAUV;AAAA;AAEGE;;AACO;AAAAJ;AAAA;AAIV,OAPA,MAOA;AACAG,mBAAO,SAAP;AACF;AACK,KAVH;;AAWM;AACR,8BAAwB;AAAAE;AAAA,OAAxB,MAAwB;AAIrBD;AACL;AACA;AACA,KARU;;AASV;AACApB,WADA;AAEAsB,iBAFA;AAGAjB,cAHA;AAIAE,mBAJA;AAKAC,mBALA;AAMAE,gBANA;AAOAC,YAPA;AAQAY,gBARA;AASAC,qBATA;AAUAC,mBAVA;AAWAvB,QAXA;AAYAwB,uBAZA;AAYAR,kBAZA;AAYAS,iBAZA;AAYAR,iBAZA;;AAAA;;;AApHyB,EAA/B;;;;;;;;;;;;;0BAhBO;;AAzDF,QAAES,uBAAoB,mCAAtB;;AAAsB,QAClBC,gDADkB;;AAClB,8BACY,kCADZ;;AAEJ,wCAA2B;AAC3BC,MAAe,mCADY;AAE3BC,oBAF2B;AAG3B,qBAAK,YAHsB;AAGtB,iBAAaC,gCAHS;AAGE,qBAAoBA,oBAHtB;AAG4CC,cAAGD,IAAE,WAAF,GAAkB,EAAlB,GAAkB,MAHjE;AAGiFE,yBAAmB,EAAmBF,IAAe,GAAf,CAAeG,CAAf,EAAnB,EAA8DH,IAAa,GAAb,CAAaI,EAAb,CAAa,YAAb,EAAaJ,kBAAb,CAA9D,EAA2EA,uCAA3E,EAA2EA,uBAQ9L,gBAR8L,CAA3E,EAQnHA,wBACL,gBATwH,EASxHA,sBACA,iBAVwH,EAHpG;AAe5BK,mHAf4B;AAiBpBC,uCAMN,sEANM,CAjBoB;AAuB1BC;AAvB0B,KAkBzB,CAAkBC,kBACE,YADpB,EACoBR,IACV,SADU,IACVS;AACVC,UADU;AACA,oCADA;AAEVC,iBAAoB,yBAFV;AAEUC,6BAFV;AAiBFL,4DAXK,CAWL,EAXK,QAWL,EAjBE;AAOV,2BAAYP;AAPF,KAQA,IARA,EAQA,CARA,EAQA,mEARA,CADU,IASVA;AACVU,OAAoB,GADV;AAEV,mBAADV,kBAFW;AAEAa,wBAFA;AAEAD,6BAFA;2BAORZ,sBAPQ;AAIXO,4DAIA,CAJA,EAIA,QAJA;AAJW,KAQX;AAAAO,yMAIQC,UAJR;AAEsDC;AAFtD,GARW,qBAWF,2CAXE,KAWFhB;AAAAU;AAAAR;AAAA;4BAGXe,+BAHW;AAMXD;AANW,KAOM,CAPN,EAOM,SAPN,KAOME,kBAON,cAnCR,EA6BcV,+BA7Bd,EA+BSS,oCA/BT,EA6B6BT,kBAAQ,aA7BrC,EA6B2D;AAAAE;AAAA,2BAC/CD;AAAAC;AAAAR;AAAA;4BAIHe,iCAJG;AAE+BD;AAF/B,uBAGIP;AAAAC;AAAAR;AAAA;iEAAA;;AAAA,mBAJ2C,4CA7B3D,CAlByB,iBAA3B","names":["_sfc_main","defineComponent","name","components","ElCheckbox","ElRadio","NodeContent","ElIcon","Check","Loading","ArrowRight","props","node","type","required","menuId","emits","setup","emit","panel","inject","ns","useNamespace","computed","multiple","config","checkStrictly","checkedNodeId","_a","isDisabled","isLeaf","level","uid","checked","handleCheckChange","doExpand","e","handleExpand","handleCheck","doCheck","doLoad","isHoverMenu","expandable","inExpandingPath","inCheckedPath","handleHoverExpand","handleClick","_component_node_content","_component_loading","id","role","_ctx","tabindex","class","b","is","onMouseenter","onFocus","onClick","_createCommentVNode","_openBlock","key","indeterminate","disabled","label","default","_hoisted_2","_","_createVNode","createCommentVNode"],"sources":["../../../../../../packages/components/cascader-panel/src/node.vue"],"sourcesContent":["<template>\n  <li\n    :id=\"`${menuId}-${node.uid}`\"\n    role=\"menuitem\"\n    :aria-haspopup=\"!isLeaf\"\n    :aria-owns=\"isLeaf ? null : menuId\"\n    :aria-expanded=\"inExpandingPath\"\n    :tabindex=\"expandable ? -1 : undefined\"\n    :class=\"[\n      ns.b(),\n      ns.is('selectable', checkStrictly),\n      ns.is('active', node.checked),\n      ns.is('disabled', !expandable),\n      inExpandingPath && 'in-active-path',\n      inCheckedPath && 'in-checked-path',\n    ]\"\n    @mouseenter=\"handleHoverExpand\"\n    @focus=\"handleHoverExpand\"\n    @click=\"handleClick\"\n  >\n    <!-- prefix -->\n    <el-checkbox\n      v-if=\"multiple\"\n      :model-value=\"node.checked\"\n      :indeterminate=\"node.indeterminate\"\n      :disabled=\"isDisabled\"\n      @click.stop\n      @update:model-value=\"handleSelectCheck\"\n    />\n    <el-radio\n      v-else-if=\"checkStrictly\"\n      :model-value=\"checkedNodeId\"\n      :label=\"node.uid\"\n      :disabled=\"isDisabled\"\n      @update:model-value=\"handleSelectCheck\"\n      @click.stop\n    >\n      <!--\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      -->\n      <span></span>\n    </el-radio>\n    <el-icon v-else-if=\"isLeaf && node.checked\" :class=\"ns.e('prefix')\">\n      <check />\n    </el-icon>\n\n    <!-- content -->\n    <node-content />\n\n    <!-- postfix -->\n    <template v-if=\"!isLeaf\">\n      <el-icon v-if=\"node.loading\" :class=\"[ns.is('loading'), ns.e('postfix')]\">\n        <loading />\n      </el-icon>\n      <el-icon v-else :class=\"['arrow-right', ns.e('postfix')]\">\n        <arrow-right />\n      </el-icon>\n    </template>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport ElRadio from '@element-plus/components/radio'\nimport ElIcon from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { Check, Loading, ArrowRight } from '@element-plus/icons-vue'\nimport NodeContent from './node-content'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\nimport type { default as CascaderNode } from './node'\n\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  name: 'ElCascaderNode',\n\n  components: {\n    ElCheckbox,\n    ElRadio,\n    NodeContent,\n    ElIcon,\n    Check,\n    Loading,\n    ArrowRight,\n  },\n\n  props: {\n    node: {\n      type: Object as PropType<CascaderNode>,\n      required: true,\n    },\n    menuId: String,\n  },\n\n  emits: ['expand'],\n\n  setup(props, { emit }) {\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const ns = useNamespace('cascader-node')\n    const isHoverMenu = computed(() => panel.isHoverMenu)\n    const multiple = computed(() => panel.config.multiple)\n    const checkStrictly = computed(() => panel.config.checkStrictly)\n    const checkedNodeId = computed(() => panel.checkedNodes[0]?.uid)\n    const isDisabled = computed(() => props.node.isDisabled)\n    const isLeaf = computed(() => props.node.isLeaf)\n    const expandable = computed(\n      () => (checkStrictly.value && !isLeaf.value) || !isDisabled.value\n    )\n    const inExpandingPath = computed(() => isInPath(panel.expandingNode!))\n    // only useful in check-strictly mode\n    const inCheckedPath = computed(\n      () => checkStrictly.value && panel.checkedNodes.some(isInPath)\n    )\n\n    const isInPath = (node: CascaderNode) => {\n      const { level, uid } = props.node\n      return node?.pathNodes[level - 1]?.uid === uid\n    }\n\n    const doExpand = () => {\n      if (inExpandingPath.value) return\n      panel.expandNode(props.node)\n    }\n\n    const doCheck = (checked: boolean) => {\n      const { node } = props\n      if (checked === node.checked) return\n      panel.handleCheckChange(node, checked)\n    }\n\n    const doLoad = () => {\n      panel.lazyLoad(props.node, () => {\n        if (!isLeaf.value) doExpand()\n      })\n    }\n\n    const handleHoverExpand = (e: Event) => {\n      if (!isHoverMenu.value) return\n      handleExpand()\n      !isLeaf.value && emit('expand', e)\n    }\n\n    const handleExpand = () => {\n      const { node } = props\n      // do not exclude leaf node because the menus expanded might have to reset\n      if (!expandable.value || node.loading) return\n      node.loaded ? doExpand() : doLoad()\n    }\n\n    const handleClick = () => {\n      if (isHoverMenu.value && !isLeaf.value) return\n\n      if (\n        isLeaf.value &&\n        !isDisabled.value &&\n        !checkStrictly.value &&\n        !multiple.value\n      ) {\n        handleCheck(true)\n      } else {\n        handleExpand()\n      }\n    }\n\n    const handleSelectCheck = (checked: boolean) => {\n      if (checkStrictly.value) {\n        doCheck(checked)\n        if (props.node.loaded) {\n          doExpand()\n        }\n      } else {\n        handleCheck(checked)\n      }\n    }\n\n    const handleCheck = (checked: boolean) => {\n      if (!props.node.loaded) {\n        doLoad()\n      } else {\n        doCheck(checked)\n        !checkStrictly.value && doExpand()\n      }\n    }\n\n    return {\n      panel,\n      isHoverMenu,\n      multiple,\n      checkStrictly,\n      checkedNodeId,\n      isDisabled,\n      isLeaf,\n      expandable,\n      inExpandingPath,\n      inCheckedPath,\n      ns,\n      handleHoverExpand,\n      handleExpand,\n      handleClick,\n      handleCheck,\n      handleSelectCheck,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}