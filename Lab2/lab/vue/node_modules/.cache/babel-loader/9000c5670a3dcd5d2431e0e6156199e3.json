{"ast":null,"code":"import { defineComponent, computed, watch, provide, reactive, toRefs, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { formProps, formEmits } from './form.mjs';\nimport { filterFields, useFormLabelWidth } from './utils.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { formContextKey } from '../../../tokens/form.mjs';\nconst __default__ = {\n  name: \"ElForm\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: formProps,\n  emits: formEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const COMPONENT_NAME = \"ElForm\";\n    const fields = [];\n    const formSize = useSize();\n    const ns = useNamespace(\"form\");\n    const formClasses = computed(() => {\n      const {\n        labelPosition,\n        inline\n      } = props;\n      return [ns.b(), ns.m(formSize.value), {\n        [ns.m(`label-${labelPosition}`)]: labelPosition,\n        [ns.m(\"inline\")]: inline\n      }];\n    });\n\n    const addField = field => {\n      fields.push(field);\n    };\n\n    const removeField = field => {\n      if (!field.prop) {\n        fields.splice(fields.indexOf(field), 1);\n      }\n    };\n\n    const resetFields = (properties = []) => {\n      if (!props.model) {\n        debugWarn(COMPONENT_NAME, \"model is required for resetFields to work.\");\n        return;\n      }\n\n      filterFields(fields, properties).forEach(field => field.resetField());\n    };\n\n    const clearValidate = (props2 = []) => {\n      filterFields(fields, props2).forEach(field => field.clearValidate());\n    };\n\n    const validate = async callback => validateField(void 0, callback);\n\n    const validateField = async (properties = [], callback) => {\n      if (callback) {\n        validate().then(() => callback(true)).catch(fields2 => callback(false, fields2));\n        return;\n      }\n\n      const {\n        model,\n        scrollToError\n      } = props;\n\n      if (!model) {\n        debugWarn(COMPONENT_NAME, \"model is required for form validation!\");\n        return;\n      }\n\n      if (fields.length === 0) {\n        return;\n      }\n\n      const filteredFields = filterFields(fields, properties);\n\n      if (!filteredFields.length) {\n        debugWarn(COMPONENT_NAME, \"please pass correct props!\");\n        return;\n      }\n\n      let valid = true;\n      let invalidFields = {};\n      let firstInvalidFields;\n\n      for (const field of filteredFields) {\n        const fieldsError = await field.validate(\"\").catch(fields2 => fields2);\n\n        if (fieldsError) {\n          valid = false;\n          if (!firstInvalidFields) firstInvalidFields = fieldsError;\n        }\n\n        invalidFields = { ...invalidFields,\n          ...fieldsError\n        };\n      }\n\n      if (!valid) {\n        if (scrollToError) scrollToField(Object.keys(firstInvalidFields)[0]);\n        return Promise.reject(invalidFields);\n      }\n    };\n\n    const scrollToField = prop => {\n      var _a;\n\n      const field = filterFields(fields, prop)[0];\n\n      if (field) {\n        (_a = field.$el) == null ? void 0 : _a.scrollIntoView();\n      }\n    };\n\n    watch(() => props.rules, () => {\n      if (props.validateOnRuleChange) validate();\n    }, {\n      deep: true\n    });\n    provide(formContextKey, reactive({ ...toRefs(props),\n      emit,\n      resetFields,\n      clearValidate,\n      validateField,\n      addField,\n      removeField,\n      ...useFormLabelWidth()\n    }));\n    expose({\n      validate,\n      validateField,\n      resetFields,\n      clearValidate,\n      scrollToField\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"form\", {\n        class: normalizeClass(unref(formClasses))\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n\n});\n\nexport { _sfc_main as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAkBA;AAOA;AAEA;AACA;AACA;AACA;AAAAA;AAAAC;AAAA;AACA,cACAC,MADA,EAEAA,oBAFA,EAGA;AACA,uDADA;AAEA;AAFA,OAHA;AAKA,KAPA;;AAYA;AACAC;AAAA,KADA;;AAIA;AACA;AACAA;AAAA;AAAA,KAFA;;AAMA;AACA;AACAC;AACA;AAAA;;AAEAC;AAAA,KALA;;AAQA;AACAA;AAAA,KADA;;AAIA,uCACAC,+BADA;;AAGA,iCACAC,eADA,EAEAC,QAFA,KAGA;AACA;AAEAC,8CACAC,KADA,CACAC,mCADA;AAEA;AAAA;;AAGA;AAAAC;AAAAC;AAAA;;AAEA;AACAT;AACA;AAAA;;AAEA;AACA;AAAA;;AAGA;;AACA;AACAA;AACA;AAAA;;AAGA;AACA;AACA;;AAEA;AACA,wCACAK,QADA,CACA,EADA,EAEAC,KAFA,CAEAC,kBAFA;;AAIA;AACAG;AACA;AAAA;;AAGAC;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AAAA;AAAA,KA9CA;;AAkDA;AACA;;AACA;;AACA;AAAA;AAAA;AAKA,KARA;;AAUAC;AAAA,8CAEA;AAGA,KALA,EAKA;AAAAC;AAAA,KALA;AAOAC,WACA,4BACA,gBADA;AAGAC,UAHA;AAIAC,iBAJA;AAKAC,mBALA;AAMAf,mBANA;AAOAgB,cAPA;AASAC,iBATA;AASA;AATA,OADA;AAgBAC;AAEAf,cAFA;AAIAH,mBAJA;AAMAc,iBANA;AAQAC,mBARA;AAQAI;AARA","names":["labelPosition","inline","ns","fields","debugWarn","filterFields","validateField","properties","callback","validate","catch","fields2","model","scrollToError","valid","invalidFields","watch","deep","provide","emit","resetFields","clearValidate","addField","removeField","expose","scrollToField"],"sources":["../../../../../../packages/components/form/src/form.vue"],"sourcesContent":["<template>\n  <form :class=\"formClasses\">\n    <slot />\n  </form>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, reactive, toRefs, watch } from 'vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { formContextKey } from '@element-plus/tokens'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport { formProps, formEmits } from './form'\nimport { useFormLabelWidth, filterFields } from './utils'\nimport type { ValidateFieldsError } from 'async-validator'\nimport type { FormItemContext, FormContext } from '@element-plus/tokens'\nimport type { FormValidateCallback } from './types'\nimport type { FormItemProp } from './form-item'\n\nconst COMPONENT_NAME = 'ElForm'\ndefineOptions({\n  name: 'ElForm',\n})\nconst props = defineProps(formProps)\nconst emit = defineEmits(formEmits)\n\nconst fields: FormItemContext[] = []\n\nconst formSize = useSize()\nconst ns = useNamespace('form')\nconst formClasses = computed(() => {\n  const { labelPosition, inline } = props\n  return [\n    ns.b(),\n    ns.m(formSize.value),\n    {\n      [ns.m(`label-${labelPosition}`)]: labelPosition,\n      [ns.m('inline')]: inline,\n    },\n  ]\n})\n\nconst addField: FormContext['addField'] = (field) => {\n  fields.push(field)\n}\n\nconst removeField: FormContext['removeField'] = (field) => {\n  if (!field.prop) {\n    fields.splice(fields.indexOf(field), 1)\n  }\n}\n\nconst resetFields: FormContext['resetFields'] = (properties = []) => {\n  if (!props.model) {\n    debugWarn(COMPONENT_NAME, 'model is required for resetFields to work.')\n    return\n  }\n  filterFields(fields, properties).forEach((field) => field.resetField())\n}\n\nconst clearValidate: FormContext['clearValidate'] = (props = []) => {\n  filterFields(fields, props).forEach((field) => field.clearValidate())\n}\n\nconst validate = async (callback?: FormValidateCallback): Promise<void> =>\n  validateField(undefined, callback)\n\nconst validateField: FormContext['validateField'] = async (\n  properties = [],\n  callback\n) => {\n  if (callback) {\n    validate()\n      .then(() => callback(true))\n      .catch((fields: ValidateFieldsError) => callback(false, fields))\n    return\n  }\n\n  const { model, scrollToError } = props\n\n  if (!model) {\n    debugWarn(COMPONENT_NAME, 'model is required for form validation!')\n    return\n  }\n  if (fields.length === 0) {\n    return\n  }\n\n  const filteredFields = filterFields(fields, properties)\n  if (!filteredFields.length) {\n    debugWarn(COMPONENT_NAME, 'please pass correct props!')\n    return\n  }\n\n  let valid = true\n  let invalidFields: ValidateFieldsError = {}\n  let firstInvalidFields: ValidateFieldsError | undefined\n\n  for (const field of filteredFields) {\n    const fieldsError = await field\n      .validate('')\n      .catch((fields: ValidateFieldsError) => fields)\n\n    if (fieldsError) {\n      valid = false\n      if (!firstInvalidFields) firstInvalidFields = fieldsError\n    }\n\n    invalidFields = { ...invalidFields, ...fieldsError }\n  }\n\n  if (!valid) {\n    if (scrollToError) scrollToField(Object.keys(firstInvalidFields!)[0])\n    return Promise.reject(invalidFields)\n  }\n}\n\nconst scrollToField = (prop: FormItemProp) => {\n  const field = filterFields(fields, prop)[0]\n  if (field) {\n    field.$el?.scrollIntoView()\n  }\n}\n\nwatch(\n  () => props.rules,\n  () => {\n    if (props.validateOnRuleChange) validate()\n  },\n  { deep: true }\n)\n\nprovide(\n  formContextKey,\n  reactive({\n    ...toRefs(props),\n    emit,\n\n    resetFields,\n    clearValidate,\n    validateField,\n    addField,\n    removeField,\n\n    ...useFormLabelWidth(),\n  })\n)\n\ndefineExpose({\n  /** @description validate form */\n  validate,\n  /** @description validate form field */\n  validateField,\n  /** @description reset fields */\n  resetFields,\n  /** @description clear validation status */\n  clearValidate,\n  /** @description scroll to field */\n  scrollToField,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}