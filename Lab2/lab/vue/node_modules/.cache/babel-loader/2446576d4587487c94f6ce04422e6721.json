{"ast":null,"code":"import arrayFilter from './_arrayFilter.js';\nimport baseRest from './_baseRest.js';\nimport baseXor from './_baseXor.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n/**\r\n * This method is like `_.xor` except that it accepts `comparator` which is\r\n * invoked to compare elements of `arrays`. The order of result values is\r\n * determined by the order they occur in the arrays. The comparator is invoked\r\n * with two arguments: (arrVal, othVal).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to inspect.\r\n * @param {Function} [comparator] The comparator invoked per element.\r\n * @returns {Array} Returns the new array of filtered values.\r\n * @example\r\n *\r\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\r\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\r\n *\r\n * _.xorWith(objects, others, _.isEqual);\r\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\r\n */\n\nvar xorWith = baseRest(function (arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n});\nexport default xorWith;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/xorWith.js"],"names":["arrayFilter","baseRest","baseXor","isArrayLikeObject","last","xorWith","arrays","comparator","undefined"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAGJ,QAAQ,CAAC,UAASK,MAAT,EAAiB;AACtC,MAAIC,UAAU,GAAGH,IAAI,CAACE,MAAD,CAArB;AACAC,EAAAA,UAAU,GAAG,OAAOA,UAAP,IAAqB,UAArB,GAAkCA,UAAlC,GAA+CC,SAA5D;AACA,SAAON,OAAO,CAACF,WAAW,CAACM,MAAD,EAASH,iBAAT,CAAZ,EAAyCK,SAAzC,EAAoDD,UAApD,CAAd;AACD,CAJqB,CAAtB;AAMA,eAAeF,OAAf","sourcesContent":["import arrayFilter from './_arrayFilter.js';\r\nimport baseRest from './_baseRest.js';\r\nimport baseXor from './_baseXor.js';\r\nimport isArrayLikeObject from './isArrayLikeObject.js';\r\nimport last from './last.js';\r\n\r\n/**\r\n * This method is like `_.xor` except that it accepts `comparator` which is\r\n * invoked to compare elements of `arrays`. The order of result values is\r\n * determined by the order they occur in the arrays. The comparator is invoked\r\n * with two arguments: (arrVal, othVal).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to inspect.\r\n * @param {Function} [comparator] The comparator invoked per element.\r\n * @returns {Array} Returns the new array of filtered values.\r\n * @example\r\n *\r\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\r\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\r\n *\r\n * _.xorWith(objects, others, _.isEqual);\r\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\r\n */\r\nvar xorWith = baseRest(function(arrays) {\r\n  var comparator = last(arrays);\r\n  comparator = typeof comparator == 'function' ? comparator : undefined;\r\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\r\n});\r\n\r\nexport default xorWith;\r\n"]},"metadata":{},"sourceType":"module"}