{"ast":null,"code":"import arrayMap from './_arrayMap.js';\nimport baseIntersection from './_baseIntersection.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseRest from './_baseRest.js';\nimport castArrayLikeObject from './_castArrayLikeObject.js';\nimport last from './last.js';\n/**\r\n * This method is like `_.intersection` except that it accepts `iteratee`\r\n * which is invoked for each element of each `arrays` to generate the criterion\r\n * by which they're compared. The order and references of result values are\r\n * determined by the first array. The iteratee is invoked with one argument:\r\n * (value).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to inspect.\r\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n * @returns {Array} Returns the new array of intersecting values.\r\n * @example\r\n *\r\n * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n * // => [2.1]\r\n *\r\n * // The `_.property` iteratee shorthand.\r\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\r\n * // => [{ 'x': 1 }]\r\n */\n\nvar intersectionBy = baseRest(function (arrays) {\n  var iteratee = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  if (iteratee === last(mapped)) {\n    iteratee = undefined;\n  } else {\n    mapped.pop();\n  }\n\n  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, baseIteratee(iteratee, 2)) : [];\n});\nexport default intersectionBy;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/intersectionBy.js"],"names":["arrayMap","baseIntersection","baseIteratee","baseRest","castArrayLikeObject","last","intersectionBy","arrays","iteratee","mapped","undefined","pop","length"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc,GAAGH,QAAQ,CAAC,UAASI,MAAT,EAAiB;AAC7C,MAAIC,QAAQ,GAAGH,IAAI,CAACE,MAAD,CAAnB;AAAA,MACIE,MAAM,GAAGT,QAAQ,CAACO,MAAD,EAASH,mBAAT,CADrB;;AAGA,MAAII,QAAQ,KAAKH,IAAI,CAACI,MAAD,CAArB,EAA+B;AAC7BD,IAAAA,QAAQ,GAAGE,SAAX;AACD,GAFD,MAEO;AACLD,IAAAA,MAAM,CAACE,GAAP;AACD;;AACD,SAAQF,MAAM,CAACG,MAAP,IAAiBH,MAAM,CAAC,CAAD,CAAN,KAAcF,MAAM,CAAC,CAAD,CAAtC,GACHN,gBAAgB,CAACQ,MAAD,EAASP,YAAY,CAACM,QAAD,EAAW,CAAX,CAArB,CADb,GAEH,EAFJ;AAGD,CAZ4B,CAA7B;AAcA,eAAeF,cAAf","sourcesContent":["import arrayMap from './_arrayMap.js';\r\nimport baseIntersection from './_baseIntersection.js';\r\nimport baseIteratee from './_baseIteratee.js';\r\nimport baseRest from './_baseRest.js';\r\nimport castArrayLikeObject from './_castArrayLikeObject.js';\r\nimport last from './last.js';\r\n\r\n/**\r\n * This method is like `_.intersection` except that it accepts `iteratee`\r\n * which is invoked for each element of each `arrays` to generate the criterion\r\n * by which they're compared. The order and references of result values are\r\n * determined by the first array. The iteratee is invoked with one argument:\r\n * (value).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {...Array} [arrays] The arrays to inspect.\r\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n * @returns {Array} Returns the new array of intersecting values.\r\n * @example\r\n *\r\n * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n * // => [2.1]\r\n *\r\n * // The `_.property` iteratee shorthand.\r\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\r\n * // => [{ 'x': 1 }]\r\n */\r\nvar intersectionBy = baseRest(function(arrays) {\r\n  var iteratee = last(arrays),\r\n      mapped = arrayMap(arrays, castArrayLikeObject);\r\n\r\n  if (iteratee === last(mapped)) {\r\n    iteratee = undefined;\r\n  } else {\r\n    mapped.pop();\r\n  }\r\n  return (mapped.length && mapped[0] === arrays[0])\r\n    ? baseIntersection(mapped, baseIteratee(iteratee, 2))\r\n    : [];\r\n});\r\n\r\nexport default intersectionBy;\r\n"]},"metadata":{},"sourceType":"module"}