{"ast":null,"code":"import baseRepeat from './_baseRepeat.js';\nimport baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport stringSize from './_stringSize.js';\nimport stringToArray from './_stringToArray.js';\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeCeil = Math.ceil;\n/**\r\n * Creates the padding for `string` based on `length`. The `chars` string\r\n * is truncated if the number of characters exceeds `length`.\r\n *\r\n * @private\r\n * @param {number} length The padding length.\r\n * @param {string} [chars=' '] The string used as padding.\r\n * @returns {string} Returns the padding for `string`.\r\n */\n\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n  var charsLength = chars.length;\n\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);\n}\n\nexport default createPadding;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/_createPadding.js"],"names":["baseRepeat","baseToString","castSlice","hasUnicode","stringSize","stringToArray","nativeCeil","Math","ceil","createPadding","length","chars","undefined","charsLength","result","join","slice"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA;;AACA,IAAIC,UAAU,GAAGC,IAAI,CAACC,IAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,KAA/B,EAAsC;AACpCA,EAAAA,KAAK,GAAGA,KAAK,KAAKC,SAAV,GAAsB,GAAtB,GAA4BX,YAAY,CAACU,KAAD,CAAhD;AAEA,MAAIE,WAAW,GAAGF,KAAK,CAACD,MAAxB;;AACA,MAAIG,WAAW,GAAG,CAAlB,EAAqB;AACnB,WAAOA,WAAW,GAAGb,UAAU,CAACW,KAAD,EAAQD,MAAR,CAAb,GAA+BC,KAAjD;AACD;;AACD,MAAIG,MAAM,GAAGd,UAAU,CAACW,KAAD,EAAQL,UAAU,CAACI,MAAM,GAAGN,UAAU,CAACO,KAAD,CAApB,CAAlB,CAAvB;AACA,SAAOR,UAAU,CAACQ,KAAD,CAAV,GACHT,SAAS,CAACG,aAAa,CAACS,MAAD,CAAd,EAAwB,CAAxB,EAA2BJ,MAA3B,CAAT,CAA4CK,IAA5C,CAAiD,EAAjD,CADG,GAEHD,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgBN,MAAhB,CAFJ;AAGD;;AAED,eAAeD,aAAf","sourcesContent":["import baseRepeat from './_baseRepeat.js';\r\nimport baseToString from './_baseToString.js';\r\nimport castSlice from './_castSlice.js';\r\nimport hasUnicode from './_hasUnicode.js';\r\nimport stringSize from './_stringSize.js';\r\nimport stringToArray from './_stringToArray.js';\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeCeil = Math.ceil;\r\n\r\n/**\r\n * Creates the padding for `string` based on `length`. The `chars` string\r\n * is truncated if the number of characters exceeds `length`.\r\n *\r\n * @private\r\n * @param {number} length The padding length.\r\n * @param {string} [chars=' '] The string used as padding.\r\n * @returns {string} Returns the padding for `string`.\r\n */\r\nfunction createPadding(length, chars) {\r\n  chars = chars === undefined ? ' ' : baseToString(chars);\r\n\r\n  var charsLength = chars.length;\r\n  if (charsLength < 2) {\r\n    return charsLength ? baseRepeat(chars, length) : chars;\r\n  }\r\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\r\n  return hasUnicode(chars)\r\n    ? castSlice(stringToArray(result), 0, length).join('')\r\n    : result.slice(0, length);\r\n}\r\n\r\nexport default createPadding;\r\n"]},"metadata":{},"sourceType":"module"}