{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { defineComponent, ref, computed, watch, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, createElementVNode, toDisplayString, createCommentVNode, withDirectives, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport TreeStore from './model/tree-store.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { useDragNodeHandler } from './model/useDragNode.mjs';\nimport { useKeydown } from './model/useKeydown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        disabled: \"disabled\"\n      })\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    icon: [String, Object]\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n\n  setup(props, ctx) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"tree\");\n    const store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    const root = ref(store.value.root);\n    const currentNode = ref(null);\n    const el$ = ref(null);\n    const dropIndicator$ = ref(null);\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const {\n      dragState\n    } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store\n    });\n    useKeydown({\n      el$\n    }, store);\n    const isEmpty = computed(() => {\n      const {\n        childNodes\n      } = root.value;\n      return !childNodes || childNodes.length === 0 || childNodes.every(({\n        visible\n      }) => !visible);\n    });\n    watch(() => props.defaultCheckedKeys, newVal => {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(() => props.defaultExpandedKeys, newVal => {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(() => props.data, newVal => {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(() => props.checkStrictly, newVal => {\n      store.value.checkStrictly = newVal;\n    });\n\n    const filter = value => {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n\n    const getNodeKey$1 = node => {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n\n    const getNodePath = data => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      const node = store.value.getNode(data);\n      if (!node) return [];\n      const path = [node.data];\n      let parent = node.parent;\n\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n\n      return path.reverse();\n    };\n\n    const getCheckedNodes = (leafOnly, includeHalfChecked) => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n\n    const getCheckedKeys = leafOnly => {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n\n    const getCurrentNode = () => {\n      const currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n\n    const getCurrentKey = () => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      const currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n\n    const setCheckedNodes = (nodes, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n\n    const setCheckedKeys = (keys, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n\n    const setChecked = (data, checked, deep) => {\n      store.value.setChecked(data, checked, deep);\n    };\n\n    const getHalfCheckedNodes = () => {\n      return store.value.getHalfCheckedNodes();\n    };\n\n    const getHalfCheckedKeys = () => {\n      return store.value.getHalfCheckedKeys();\n    };\n\n    const setCurrentNode = (node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n    };\n\n    const setCurrentKey = (key, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n    };\n\n    const getNode = data => {\n      return store.value.getNode(data);\n    };\n\n    const remove = data => {\n      store.value.remove(data);\n    };\n\n    const append = (data, parentNode) => {\n      store.value.append(data, parentNode);\n    };\n\n    const insertBefore = (data, refNode) => {\n      store.value.insertBefore(data, refNode);\n    };\n\n    const insertAfter = (data, refNode) => {\n      store.value.insertAfter(data, refNode);\n    };\n\n    const handleNodeExpand = (nodeData, node, instance) => {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n\n    const updateKeyChildren = (key, data) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n\n    provide(\"RootTree\", {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance()\n    });\n    return {\n      ns,\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n      isEmpty,\n      filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"el$\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, child => {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    class: normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\n\nvar Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Tree as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElTreeNode","props","data","type","default","emptyText","renderAfterExpand","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","currentNodeKey","String","Number","renderContent","showCheckbox","draggable","allowDrag","allowDrop","children","label","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","icon","Object","emits","setup","ctx","t","useLocale","ns","useNamespace","ref","TreeStore","key","store","value","initialize","root","currentNode","el$","dropIndicator$","broadcastExpanded","useNodeExpandEventBroadcast","dragState","useDragNodeHandler","useKeydown","computed","childNodes","length","every","visible","watch","newVal","setDefaultCheckedKey","setDefaultExpandedKeys","setData","deep","Error","filter","node","getNode","parent","path","push","leafOnly","includeHalfChecked","getCheckedNodes","getCheckedKeys","getCurrentNode","currentNode2","getCurrentKey","nodes","setCheckedNodes","keys","setCheckedKeys","setChecked","checked","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","shouldAutoExpandParent","setUserCurrentNode","setCurrentKey","setCurrentNodeKey","remove","parentNode","append","refNode","insertBefore","insertAfter","handleNodeExpand","nodeData","instance","updateChildren","provide","isEmpty","getNodeKey","getNodePath","updateKeyChildren","_openBlock","class","_ctx","b","is","draggingNode","role","onNodeExpand","_createElementVNode","_toDisplayString","_withDirectives"],"sources":["../../../../../../packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    ></div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  provide,\n  computed,\n  watch,\n  getCurrentInstance,\n} from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType, Component } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeNodeData,\n  TreeKey,\n  TreeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: [String, Object] as PropType<string | Component>,\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys, leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n    }\n\n    const setCurrentKey = (key: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}