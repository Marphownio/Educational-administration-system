{"ast":null,"code":"import { defineComponent, inject, watch, resolveComponent, openBlock, createBlock, mergeProps, withCtx, renderSlot, createCommentVNode } from 'vue';\nimport '../../slot/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { usePopperTriggerProps } from './popper.mjs';\nimport { POPPER_INJECTION_KEY } from './tokens.mjs';\nimport { unwrapMeasurableEl } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { OnlyChild } from '../../slot/src/only-child.mjs';\nimport { useForwardRef } from '../../../hooks/use-forward-ref/index.mjs';\nimport { isElement } from '../../../utils/types.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElPopperTrigger\",\n  components: {\n    ElOnlyChild: OnlyChild\n  },\n  inheritAttrs: false,\n  props: { ...usePopperTriggerProps,\n    onMouseenter: Function,\n    onMouseleave: Function,\n    onClick: Function,\n    onKeydown: Function,\n    onFocus: Function,\n    onBlur: Function,\n    onContextmenu: Function,\n    id: String,\n    open: Boolean\n  },\n\n  setup(props) {\n    const {\n      triggerRef\n    } = inject(POPPER_INJECTION_KEY, void 0);\n    useForwardRef(triggerRef);\n    watch(() => props.virtualRef, val => {\n      if (val) {\n        triggerRef.value = unwrapMeasurableEl(val);\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => triggerRef.value, (el, prevEl) => {\n      if (isElement(el)) {\n        ;\n        [\"onMouseenter\", \"onMouseleave\", \"onClick\", \"onKeydown\", \"onFocus\", \"onBlur\", \"onContextmenu\"].forEach(eventName => {\n          const handler = props[eventName];\n\n          if (handler) {\n            ;\n            el.addEventListener(eventName.slice(2).toLowerCase(), handler);\n            prevEl == null ? void 0 : prevEl.removeEventListener(eventName.slice(2).toLowerCase(), handler);\n          }\n        });\n      }\n    }, {\n      immediate: true\n    });\n    return {\n      triggerRef\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_only_child = resolveComponent(\"el-only-child\");\n\n  return !_ctx.virtualTriggering ? (openBlock(), createBlock(_component_el_only_child, mergeProps({\n    key: 0\n  }, _ctx.$attrs, {\n    \"aria-describedby\": _ctx.open ? _ctx.id : void 0\n  }), {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 16, [\"aria-describedby\"])) : createCommentVNode(\"v-if\", true);\n}\n\nvar ElPopperTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElPopperTrigger as default };","map":{"version":3,"mappings":";;;;;;;;;;;;AAmBA,MAAKA,YAAaC,eAAa;AAC7BC,MAAM,mBADuB;AAE7BC,cAAY;AAAAC,iBAAEA;AAAF,GAFiB;AAG7BC,cAAc,OAHe;AAI7BC,OAAO,IACF,wBADE;AAELC,gBAAc,UAFT;AAGLC,gBAAc,UAHT;AAILC,WAAS,UAJJ;AAKLC,aAAW,UALN;AAMLC,WAAS,UANJ;AAOLC,UAAQ,UAPH;AAQLC,iBAAe,UARV;AASLC,MAAI,QATC;AAULC,QAAM;AAVD,GAJsB;;AAgB7BC,QAAMV,KAAN,EAAa;AACL;AAAEW;AAAF,QAAiBC,OAAOC,oBAAP,EAA6B,MAA7B,CAAjB;AACQC;AAEdC,UACE,MAAMf,MAAMgB,UADd,EAEGC,GAAD,IAAS;AACP,UAAIA,GAAJ,EAAS;AACPN,mBAAWO,KAAX,GAAmBC,kBAAmB,KAAtC;AAAsC;AAG1C,KAPF,EAOE;AACEC,eAAW;AADb,KAPF;AAYAL,UACE,MAAMJ,WAAWO,KADnB,EAEE,CAACG,EAAD,EAAKC,MAAL,KAAgB;AACd,UAAIC,UAAUF,EAAV,CAAJ,EAAmB;AACjB;AAAC,SACC,cADD,EAEC,cAFD,EAGC,SAHD,EAIC,WAJD,EAKC,SALD,EAMC,QAND,EAOC,eAPD,EAQCG,OARD,CAQUC,SAAD,IAAe;AACvB,gBAAMC,UAAU1B,KAAM,WAAtB;;AACA,cAAI0B,OAAJ,EAAa;AACX;AAAEL,cAAmB,iBAAnB,CACAI,SAAU,MAAV,CAAgB,CAAhB,EAAmBE,WAAnB,EADA,EAEAD,OAFA;AAIAJ,kBAAwB,QAAxB,GAAwB,MAAxB,GAAwBA,MACd,oBADc,CAExBG,gCAFwB,EAExBC,OAFwB,CAAxB;AAEA;AAAA,SAjBL;AAiBK;AAMV,KA3BF,EA2BE;AACEN,eAAW;AADb,KA3BF;AAgCO;AACLT;AADK;AACL;;AAjEyB,EAA/B;;;;;AAjBW,iDADTiB,WAMgB,2BANhBC,UAMgB;AAAAC;AAAA,KAJNC,IAAM,OAIA,EAJA;AACb,wBAAkBA,YAAOA,IAAK,GAAZ,GAAY;AADjB,GAIA,GAHiB;qBAE/B,MAAQ,CAARC,UAAQ,0BAFuB;AAEvBC;AAFuB,GAGjB,2BALP","names":["_sfc_main","defineComponent","name","components","ElOnlyChild","inheritAttrs","props","onMouseenter","onMouseleave","onClick","onKeydown","onFocus","onBlur","onContextmenu","id","open","setup","triggerRef","inject","POPPER_INJECTION_KEY","useForwardRef","watch","virtualRef","val","value","unwrapMeasurableEl","immediate","el","prevEl","isElement","forEach","eventName","handler","toLowerCase","_createBlock","_mergeProps","key","_ctx","_renderSlot","_"],"sources":["../../../../../../packages/components/popper/src/trigger.vue"],"sourcesContent":["<template>\n  <el-only-child\n    v-if=\"!virtualTriggering\"\n    v-bind=\"$attrs\"\n    :aria-describedby=\"open ? id : undefined\"\n  >\n    <slot />\n  </el-only-child>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, watch } from 'vue'\nimport { ElOnlyChild } from '@element-plus/components/slot'\nimport { useForwardRef } from '@element-plus/hooks'\nimport { isElement } from '@element-plus/utils'\nimport { usePopperTriggerProps } from './popper'\nimport { POPPER_INJECTION_KEY } from './tokens'\nimport { unwrapMeasurableEl } from './utils'\n\nexport default defineComponent({\n  name: 'ElPopperTrigger',\n  components: { ElOnlyChild },\n  inheritAttrs: false,\n  props: {\n    ...usePopperTriggerProps,\n    onMouseenter: Function,\n    onMouseleave: Function,\n    onClick: Function,\n    onKeydown: Function,\n    onFocus: Function,\n    onBlur: Function,\n    onContextmenu: Function,\n    id: String,\n    open: Boolean,\n  },\n  setup(props) {\n    const { triggerRef } = inject(POPPER_INJECTION_KEY, undefined)!\n    useForwardRef(triggerRef)\n\n    watch(\n      () => props.virtualRef,\n      (val) => {\n        if (val) {\n          triggerRef.value = unwrapMeasurableEl(val)\n        }\n      },\n      {\n        immediate: true,\n      }\n    )\n\n    watch(\n      () => triggerRef.value,\n      (el, prevEl) => {\n        if (isElement(el)) {\n          ;[\n            'onMouseenter',\n            'onMouseleave',\n            'onClick',\n            'onKeydown',\n            'onFocus',\n            'onBlur',\n            'onContextmenu',\n          ].forEach((eventName) => {\n            const handler = props[eventName]\n            if (handler) {\n              ;(el as HTMLElement).addEventListener(\n                eventName.slice(2).toLowerCase(),\n                handler\n              )\n              ;(prevEl as HTMLElement)?.removeEventListener(\n                eventName.slice(2).toLowerCase(),\n                handler\n              )\n            }\n          })\n        }\n      },\n      {\n        immediate: true,\n      }\n    )\n\n    return {\n      triggerRef,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}