{"ast":null,"code":"import toString from './toString.js';\nimport unescapeHtmlChar from './_unescapeHtmlChar.js';\n/** Used to match HTML entities and HTML characters. */\n\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n    reHasEscapedHtml = RegExp(reEscapedHtml.source);\n/**\r\n * The inverse of `_.escape`; this method converts the HTML entities\r\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\r\n * their corresponding characters.\r\n *\r\n * **Note:** No other HTML entities are unescaped. To unescape additional\r\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.6.0\r\n * @category String\r\n * @param {string} [string=''] The string to unescape.\r\n * @returns {string} Returns the unescaped string.\r\n * @example\r\n *\r\n * _.unescape('fred, barney, &amp; pebbles');\r\n * // => 'fred, barney, & pebbles'\r\n */\n\nfunction unescape(string) {\n  string = toString(string);\n  return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;\n}\n\nexport default unescape;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/unescape.js"],"names":["toString","unescapeHtmlChar","reEscapedHtml","reHasEscapedHtml","RegExp","source","unescape","string","test","replace"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AAEA;;AACA,IAAIC,aAAa,GAAG,2BAApB;AAAA,IACIC,gBAAgB,GAAGC,MAAM,CAACF,aAAa,CAACG,MAAf,CAD7B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACxBA,EAAAA,MAAM,GAAGP,QAAQ,CAACO,MAAD,CAAjB;AACA,SAAQA,MAAM,IAAIJ,gBAAgB,CAACK,IAAjB,CAAsBD,MAAtB,CAAX,GACHA,MAAM,CAACE,OAAP,CAAeP,aAAf,EAA8BD,gBAA9B,CADG,GAEHM,MAFJ;AAGD;;AAED,eAAeD,QAAf","sourcesContent":["import toString from './toString.js';\r\nimport unescapeHtmlChar from './_unescapeHtmlChar.js';\r\n\r\n/** Used to match HTML entities and HTML characters. */\r\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\r\n    reHasEscapedHtml = RegExp(reEscapedHtml.source);\r\n\r\n/**\r\n * The inverse of `_.escape`; this method converts the HTML entities\r\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\r\n * their corresponding characters.\r\n *\r\n * **Note:** No other HTML entities are unescaped. To unescape additional\r\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.6.0\r\n * @category String\r\n * @param {string} [string=''] The string to unescape.\r\n * @returns {string} Returns the unescaped string.\r\n * @example\r\n *\r\n * _.unescape('fred, barney, &amp; pebbles');\r\n * // => 'fred, barney, & pebbles'\r\n */\r\nfunction unescape(string) {\r\n  string = toString(string);\r\n  return (string && reHasEscapedHtml.test(string))\r\n    ? string.replace(reEscapedHtml, unescapeHtmlChar)\r\n    : string;\r\n}\r\n\r\nexport default unescape;\r\n"]},"metadata":{},"sourceType":"module"}