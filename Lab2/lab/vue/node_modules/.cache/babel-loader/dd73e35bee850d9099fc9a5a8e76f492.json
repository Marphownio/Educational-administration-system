{"ast":null,"code":"import { defineComponent, shallowRef, ref, computed, onMounted, openBlock, createBlock, Transition, unref, withCtx, createElementBlock, normalizeStyle, normalizeClass, withModifiers, renderSlot, createVNode, createCommentVNode } from 'vue';\nimport { useThrottleFn, useEventListener } from '@vueuse/core';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../utils/index.mjs';\nimport { CaretTop } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport { backtopProps, backtopEmits } from './backtop.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { easeInOutCubic } from '../../../utils/animation.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst _hoisted_1 = [\"onClick\"];\nconst __default__ = {\n  name: \"ElBacktop\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: backtopProps,\n  emits: backtopEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const COMPONENT_NAME = \"ElBacktop\";\n    const ns = useNamespace(\"backtop\");\n    const el = shallowRef(document.documentElement);\n    const container = shallowRef(document);\n    const visible = ref(false);\n    const styleBottom = computed(() => `${props.bottom}px`);\n    const styleRight = computed(() => `${props.right}px`);\n\n    const scrollToTop = () => {\n      if (!el.value) return;\n      const beginTime = Date.now();\n      const beginValue = el.value.scrollTop;\n\n      const frameFunc = () => {\n        if (!el.value) return;\n        const progress = (Date.now() - beginTime) / 500;\n\n        if (progress < 1) {\n          el.value.scrollTop = beginValue * (1 - easeInOutCubic(progress));\n          requestAnimationFrame(frameFunc);\n        } else {\n          el.value.scrollTop = 0;\n        }\n      };\n\n      requestAnimationFrame(frameFunc);\n    };\n\n    const handleScroll = () => {\n      if (el.value) visible.value = el.value.scrollTop >= props.visibilityHeight;\n    };\n\n    const handleClick = event => {\n      scrollToTop();\n      emit(\"click\", event);\n    };\n\n    const handleScrollThrottled = useThrottleFn(handleScroll, 300);\n    onMounted(() => {\n      var _a;\n\n      if (props.target) {\n        el.value = (_a = document.querySelector(props.target)) != null ? _a : void 0;\n\n        if (!el.value) {\n          throwError(COMPONENT_NAME, `target is not existed: ${props.target}`);\n        }\n\n        container.value = el.value;\n      }\n\n      useEventListener(container, \"scroll\", handleScrollThrottled);\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Transition, {\n        name: `${unref(ns).namespace.value}-fade-in`\n      }, {\n        default: withCtx(() => [visible.value ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          style: normalizeStyle({\n            right: unref(styleRight),\n            bottom: unref(styleBottom)\n          }),\n          class: normalizeClass(unref(ns).b()),\n          onClick: withModifiers(handleClick, [\"stop\"])\n        }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createVNode(unref(ElIcon), {\n          class: normalizeClass(unref(ns).e(\"icon\"))\n        }, {\n          default: withCtx(() => [createVNode(unref(CaretTop))]),\n          _: 1\n        }, 8, [\"class\"])])], 14, _hoisted_1)) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"name\"]);\n    };\n  }\n\n});\n\nexport { _sfc_main as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AA4BA;AASA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACAA;AACAC;AACA,SAHA,MAGA;AACAD;AAAA;AAAA,OAPA;;AAUAC;AAAA,KAdA;;AAgBA;AACA;AAAA,KADA;;AAGA;AACAC;AACAC;AAAA,KAFA;;AAKA;AAEAC;AACA;;AACA;AACAJ;;AACA;AAAAK;AAEA;;AAAAC;AAGA;;AAAAC;KATA","names":["el","requestAnimationFrame","scrollToTop","emit","onMounted","throwError","container","useEventListener"],"sources":["../../../../../../packages/components/backtop/src/backtop.vue"],"sourcesContent":["<template>\n  <transition :name=\"`${ns.namespace.value}-fade-in`\">\n    <div\n      v-if=\"visible\"\n      :style=\"{\n        right: styleRight,\n        bottom: styleBottom,\n      }\"\n      :class=\"ns.b()\"\n      @click.stop=\"handleClick\"\n    >\n      <slot>\n        <el-icon :class=\"ns.e('icon')\"><caret-top /></el-icon>\n      </slot>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref, computed, onMounted, shallowRef } from 'vue'\nimport { useEventListener, useThrottleFn } from '@vueuse/core'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { easeInOutCubic, throwError } from '@element-plus/utils'\nimport { CaretTop } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport { backtopEmits, backtopProps } from './backtop'\n\nconst COMPONENT_NAME = 'ElBacktop'\n\ndefineOptions({\n  name: 'ElBacktop',\n})\n\nconst props = defineProps(backtopProps)\nconst emit = defineEmits(backtopEmits)\n\nconst ns = useNamespace('backtop')\nconst el = shallowRef<HTMLElement | undefined>(document.documentElement)\nconst container = shallowRef<Document | HTMLElement>(document)\nconst visible = ref(false)\nconst styleBottom = computed(() => `${props.bottom}px`)\nconst styleRight = computed(() => `${props.right}px`)\n\nconst scrollToTop = () => {\n  if (!el.value) return\n  const beginTime = Date.now()\n  const beginValue = el.value.scrollTop\n  const frameFunc = () => {\n    if (!el.value) return\n    const progress = (Date.now() - beginTime) / 500\n    if (progress < 1) {\n      el.value.scrollTop = beginValue * (1 - easeInOutCubic(progress))\n      requestAnimationFrame(frameFunc)\n    } else {\n      el.value.scrollTop = 0\n    }\n  }\n  requestAnimationFrame(frameFunc)\n}\nconst handleScroll = () => {\n  if (el.value) visible.value = el.value.scrollTop >= props.visibilityHeight\n}\nconst handleClick = (event: MouseEvent) => {\n  scrollToTop()\n  emit('click', event)\n}\n\nconst handleScrollThrottled = useThrottleFn(handleScroll, 300)\n\nonMounted(() => {\n  if (props.target) {\n    el.value = document.querySelector<HTMLElement>(props.target) ?? undefined\n    if (!el.value) {\n      throwError(COMPONENT_NAME, `target is not existed: ${props.target}`)\n    }\n    container.value = el.value\n  }\n\n  useEventListener(container, 'scroll', handleScrollThrottled)\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}