{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, unref, provide, toRef, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createSlots, withCtx, renderSlot, createElementVNode, createBlock, createCommentVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../roving-focus-group/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport { ElCollection, dropdownProps } from './dropdown.mjs';\nimport { DROPDOWN_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nimport ElRovingFocusGroup from '../../roving-focus-group/src/roving-focus-group2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../utils/vue/style.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nconst {\n  ButtonGroup: ElButtonGroup\n} = ElButton;\n\nconst _sfc_main = defineComponent({\n  name: \"ElDropdown\",\n  components: {\n    ElButton,\n    ElFocusTrap,\n    ElButtonGroup,\n    ElScrollbar,\n    ElDropdownCollection: ElCollection,\n    ElTooltip,\n    ElRovingFocusGroup,\n    ElIcon,\n    ArrowDown\n  },\n  props: dropdownProps,\n  emits: [\"visible-change\", \"click\", \"command\"],\n\n  setup(props, {\n    emit\n  }) {\n    const _instance = getCurrentInstance();\n\n    const ns = useNamespace(\"dropdown\");\n    const triggeringElementRef = ref();\n    const referenceElementRef = ref();\n    const popperRef = ref(null);\n    const contentRef = ref(null);\n    const scrollbar = ref(null);\n    const currentTabId = ref(null);\n    const isUsingKeyboard = ref(false);\n    const wrapStyle = computed(() => ({\n      maxHeight: addUnit(props.maxHeight)\n    }));\n    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)]);\n\n    function handleClick() {\n      handleClose();\n    }\n\n    function handleClose() {\n      var _a;\n\n      (_a = popperRef.value) == null ? void 0 : _a.onClose();\n    }\n\n    function handleOpen() {\n      var _a;\n\n      (_a = popperRef.value) == null ? void 0 : _a.onOpen();\n    }\n\n    const dropdownSize = useSize();\n\n    function commandHandler(...args) {\n      emit(\"command\", ...args);\n    }\n\n    function onItemEnter() {}\n\n    function onItemLeave() {\n      const contentEl = unref(contentRef);\n      contentEl == null ? void 0 : contentEl.focus();\n      currentTabId.value = null;\n    }\n\n    function handleCurrentTabIdChange(id) {\n      currentTabId.value = id;\n    }\n\n    function handleEntryFocus(e) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave\n    });\n    provide(\"elDropdown\", {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: toRef(props, \"trigger\"),\n      hideOnClick: toRef(props, \"hideOnClick\")\n    });\n\n    const onMountOnFocus = e => {\n      var _a, _b;\n\n      e.preventDefault();\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a, {\n        preventScroll: true\n      });\n    };\n\n    const handlerMainButtonClick = event => {\n      emit(\"click\", event);\n    };\n\n    return {\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      onMountOnFocus,\n      popperRef,\n      triggeringElementRef,\n      referenceElementRef\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  const _component_el_dropdown_collection = resolveComponent(\"el-dropdown-collection\");\n\n  const _component_el_roving_focus_group = resolveComponent(\"el-roving-focus-group\");\n\n  const _component_el_focus_trap = resolveComponent(\"el-focus-trap\");\n\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_button_group = resolveComponent(\"el-button-group\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"disabled\", _ctx.disabled)])\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"popperRef\",\n    effect: _ctx.effect,\n    \"fallback-placements\": [\"bottom\", \"top\"],\n    \"popper-options\": _ctx.popperOptions,\n    \"gpu-acceleration\": false,\n    \"hide-after\": _ctx.hideTimeout,\n    \"manual-mode\": true,\n    placement: _ctx.placement,\n    \"popper-class\": [_ctx.ns.e(\"popper\"), _ctx.popperClass],\n    \"reference-element\": (_a = _ctx.referenceElementRef) == null ? void 0 : _a.$el,\n    trigger: _ctx.trigger,\n    \"show-after\": _ctx.showTimeout,\n    \"stop-popper-mouse-event\": false,\n    \"virtual-ref\": _ctx.triggeringElementRef,\n    \"virtual-triggering\": _ctx.splitButton,\n    disabled: _ctx.disabled,\n    \"append-to-body\": \"\",\n    pure: \"\",\n    transition: `${_ctx.ns.namespace.value}-zoom-in-top`,\n    persistent: \"\",\n    onShow: _cache[0] || (_cache[0] = $event => _ctx.$emit(\"visible-change\", true)),\n    onHide: _cache[1] || (_cache[1] = $event => _ctx.$emit(\"visible-change\", false))\n  }, createSlots({\n    content: withCtx(() => [createVNode(_component_el_scrollbar, {\n      ref: \"scrollbar\",\n      \"wrap-style\": _ctx.wrapStyle,\n      tag: \"div\",\n      \"view-class\": _ctx.ns.e(\"list\")\n    }, {\n      default: withCtx(() => [createVNode(_component_el_focus_trap, {\n        trapped: \"\",\n        onMountOnFocus: _ctx.onMountOnFocus\n      }, {\n        default: withCtx(() => [createVNode(_component_el_roving_focus_group, {\n          loop: _ctx.loop,\n          \"current-tab-id\": _ctx.currentTabId,\n          orientation: \"horizontal\",\n          onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,\n          onEntryFocus: _ctx.handleEntryFocus\n        }, {\n          default: withCtx(() => [createVNode(_component_el_dropdown_collection, null, {\n            default: withCtx(() => [renderSlot(_ctx.$slots, \"dropdown\")]),\n            _: 3\n          })]),\n          _: 3\n        }, 8, [\"loop\", \"current-tab-id\", \"onCurrentTabIdChange\", \"onEntryFocus\"])]),\n        _: 3\n      }, 8, [\"onMountOnFocus\"])]),\n      _: 3\n    }, 8, [\"wrap-style\", \"view-class\"])]),\n    _: 2\n  }, [!_ctx.splitButton ? {\n    name: \"default\",\n    fn: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.dropdownTriggerKls)\n    }, [renderSlot(_ctx.$slots, \"default\")], 2)])\n  } : void 0]), 1032, [\"effect\", \"popper-options\", \"hide-after\", \"placement\", \"popper-class\", \"reference-element\", \"trigger\", \"show-after\", \"virtual-ref\", \"virtual-triggering\", \"disabled\", \"transition\"]), _ctx.splitButton ? (openBlock(), createBlock(_component_el_button_group, {\n    key: 0\n  }, {\n    default: withCtx(() => [createVNode(_component_el_button, {\n      ref: \"referenceElementRef\",\n      size: _ctx.dropdownSize,\n      type: _ctx.type,\n      disabled: _ctx.disabled,\n      onClick: _ctx.handlerMainButtonClick\n    }, {\n      default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n      _: 3\n    }, 8, [\"size\", \"type\", \"disabled\", \"onClick\"]), createVNode(_component_el_button, {\n      ref: \"triggeringElementRef\",\n      size: _ctx.dropdownSize,\n      type: _ctx.type,\n      class: normalizeClass(_ctx.ns.e(\"caret-button\")),\n      disabled: _ctx.disabled\n    }, {\n      default: withCtx(() => [createVNode(_component_el_icon, {\n        class: normalizeClass(_ctx.ns.e(\"icon\"))\n      }, {\n        default: withCtx(() => [createVNode(_component_arrow_down)]),\n        _: 1\n      }, 8, [\"class\"])]),\n      _: 1\n    }, 8, [\"size\", \"type\", \"class\", \"disabled\"])]),\n    _: 3\n  })) : createCommentVNode(\"v-if\", true)], 2);\n}\n\nvar Dropdown = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Dropdown as default };","map":{"version":3,"mappings":"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","names":["ButtonGroup","ElButtonGroup","ElButton","_sfc_main","defineComponent","name","components","ElFocusTrap","ElScrollbar","ElDropdownCollection","ElTooltip","ElRovingFocusGroup","ElIcon","ArrowDown","props","emits","setup","emit","_instance","ns","useNamespace","triggeringElementRef","referenceElementRef","popperRef","ref","contentRef","scrollbar","currentTabId","isUsingKeyboard","computed","maxHeight","addUnit","dropdownTriggerKls","m","dropdownSize","handleClose","_a","useSize","contentEl","e","provide","onItemEnter","onItemLeave","instance","handleClick","commandHandler","trigger","hideOnClick","_b","preventScroll","wrapStyle","handleCurrentTabIdChange","handlerMainButtonClick","handleEntryFocus","handleOpen","onMountOnFocus","_component_el_button_group","_openBlock","class","_createVNode","effect","_ctx","placement","disabled","pure","transition","persistent","onShow","onHide","_createSlots","content","tag","default","trapped","loop","onCurrentTabIdChange","onEntryFocus","_","splitButton","_withCtx","key","size","onClick","_renderSlot"],"sources":["../../../../../../packages/components/dropdown/src/dropdown.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.is('disabled', disabled)]\">\n    <el-tooltip\n      ref=\"popperRef\"\n      :effect=\"effect\"\n      :fallback-placements=\"['bottom', 'top']\"\n      :popper-options=\"popperOptions\"\n      :gpu-acceleration=\"false\"\n      :hide-after=\"hideTimeout\"\n      :manual-mode=\"true\"\n      :placement=\"placement\"\n      :popper-class=\"[ns.e('popper'), popperClass]\"\n      :reference-element=\"referenceElementRef?.$el\"\n      :trigger=\"trigger\"\n      :show-after=\"showTimeout\"\n      :stop-popper-mouse-event=\"false\"\n      :virtual-ref=\"triggeringElementRef\"\n      :virtual-triggering=\"splitButton\"\n      :disabled=\"disabled\"\n      append-to-body\n      pure\n      :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n      persistent\n      @show=\"$emit('visible-change', true)\"\n      @hide=\"$emit('visible-change', false)\"\n    >\n      <template #content>\n        <el-scrollbar\n          ref=\"scrollbar\"\n          :wrap-style=\"wrapStyle\"\n          tag=\"div\"\n          :view-class=\"ns.e('list')\"\n        >\n          <el-focus-trap trapped @mount-on-focus=\"onMountOnFocus\">\n            <el-roving-focus-group\n              :loop=\"loop\"\n              :current-tab-id=\"currentTabId\"\n              orientation=\"horizontal\"\n              @current-tab-id-change=\"handleCurrentTabIdChange\"\n              @entry-focus=\"handleEntryFocus\"\n            >\n              <el-dropdown-collection>\n                <slot name=\"dropdown\"></slot>\n              </el-dropdown-collection>\n            </el-roving-focus-group>\n          </el-focus-trap>\n        </el-scrollbar>\n      </template>\n      <template v-if=\"!splitButton\" #default>\n        <div :class=\"dropdownTriggerKls\">\n          <slot name=\"default\" />\n        </div>\n      </template>\n    </el-tooltip>\n    <template v-if=\"splitButton\">\n      <el-button-group>\n        <el-button\n          ref=\"referenceElementRef\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :disabled=\"disabled\"\n          @click=\"handlerMainButtonClick\"\n        >\n          <slot name=\"default\" />\n        </el-button>\n        <el-button\n          ref=\"triggeringElementRef\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :class=\"ns.e('caret-button')\"\n          :disabled=\"disabled\"\n        >\n          <el-icon :class=\"ns.e('icon')\"><arrow-down /></el-icon>\n        </el-button>\n      </el-button-group>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  toRef,\n  unref,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElRovingFocusGroup from '@element-plus/components/roving-focus-group'\nimport { addUnit } from '@element-plus/utils'\nimport { ArrowDown } from '@element-plus/icons-vue'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport { ElCollection as ElDropdownCollection, dropdownProps } from './dropdown'\nimport { DROPDOWN_INJECTION_KEY } from './tokens'\n\nimport type { CSSProperties } from 'vue'\n\nconst { ButtonGroup: ElButtonGroup } = ElButton\n\nexport default defineComponent({\n  name: 'ElDropdown',\n  components: {\n    ElButton,\n    ElFocusTrap,\n    ElButtonGroup,\n    ElScrollbar,\n    ElDropdownCollection,\n    ElTooltip,\n    ElRovingFocusGroup,\n    ElIcon,\n    ArrowDown,\n  },\n  props: dropdownProps,\n  emits: ['visible-change', 'click', 'command'],\n  setup(props, { emit }) {\n    const _instance = getCurrentInstance()\n    const ns = useNamespace('dropdown')\n\n    const triggeringElementRef = ref()\n    const referenceElementRef = ref()\n    const popperRef = ref<InstanceType<typeof ElTooltip> | null>(null)\n    const contentRef = ref<HTMLElement | null>(null)\n    const scrollbar = ref(null)\n    const currentTabId = ref<string | null>(null)\n    const isUsingKeyboard = ref(false)\n\n    const wrapStyle = computed<CSSProperties>(() => ({\n      maxHeight: addUnit(props.maxHeight),\n    }))\n    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)])\n\n    function handleClick() {\n      handleClose()\n    }\n\n    function handleClose() {\n      popperRef.value?.onClose()\n    }\n\n    function handleOpen() {\n      popperRef.value?.onOpen()\n    }\n\n    const dropdownSize = useSize()\n\n    function commandHandler(...args: any[]) {\n      emit('command', ...args)\n    }\n\n    function onItemEnter() {\n      // NOOP for now\n    }\n\n    function onItemLeave() {\n      const contentEl = unref(contentRef)\n\n      contentEl?.focus()\n      currentTabId.value = null\n    }\n\n    function handleCurrentTabIdChange(id: string) {\n      currentTabId.value = id\n    }\n\n    function handleEntryFocus(e: Event) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault()\n        e.stopImmediatePropagation()\n      }\n    }\n\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave,\n    })\n\n    provide('elDropdown', {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: toRef(props, 'trigger'),\n      hideOnClick: toRef(props, 'hideOnClick'),\n    })\n\n    const onMountOnFocus = (e: Event) => {\n      e.preventDefault()\n      contentRef.value?.focus?.({\n        preventScroll: true,\n      })\n    }\n\n    const handlerMainButtonClick = (event: MouseEvent) => {\n      emit('click', event)\n    }\n\n    return {\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      onMountOnFocus,\n      popperRef,\n      triggeringElementRef,\n      referenceElementRef,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}