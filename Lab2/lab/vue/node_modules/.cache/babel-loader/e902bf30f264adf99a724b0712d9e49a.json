{"ast":null,"code":"import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\nimport isPlainObject from './isPlainObject.js';\n/** `Object#toString` result references. */\n\nvar domExcTag = '[object DOMException]',\n    errorTag = '[object Error]';\n/**\r\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\r\n * `SyntaxError`, `TypeError`, or `URIError` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\r\n * @example\r\n *\r\n * _.isError(new Error);\r\n * // => true\r\n *\r\n * _.isError(Error);\r\n * // => false\r\n */\n\nfunction isError(value) {\n  if (!isObjectLike(value)) {\n    return false;\n  }\n\n  var tag = baseGetTag(value);\n  return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);\n}\n\nexport default isError;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/isError.js"],"names":["baseGetTag","isObjectLike","isPlainObject","domExcTag","errorTag","isError","value","tag","message","name"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA;;AACA,IAAIC,SAAS,GAAG,uBAAhB;AAAA,IACIC,QAAQ,GAAG,gBADf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAI,CAACL,YAAY,CAACK,KAAD,CAAjB,EAA0B;AACxB,WAAO,KAAP;AACD;;AACD,MAAIC,GAAG,GAAGP,UAAU,CAACM,KAAD,CAApB;AACA,SAAOC,GAAG,IAAIH,QAAP,IAAmBG,GAAG,IAAIJ,SAA1B,IACJ,OAAOG,KAAK,CAACE,OAAb,IAAwB,QAAxB,IAAoC,OAAOF,KAAK,CAACG,IAAb,IAAqB,QAAzD,IAAqE,CAACP,aAAa,CAACI,KAAD,CADtF;AAED;;AAED,eAAeD,OAAf","sourcesContent":["import baseGetTag from './_baseGetTag.js';\r\nimport isObjectLike from './isObjectLike.js';\r\nimport isPlainObject from './isPlainObject.js';\r\n\r\n/** `Object#toString` result references. */\r\nvar domExcTag = '[object DOMException]',\r\n    errorTag = '[object Error]';\r\n\r\n/**\r\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\r\n * `SyntaxError`, `TypeError`, or `URIError` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\r\n * @example\r\n *\r\n * _.isError(new Error);\r\n * // => true\r\n *\r\n * _.isError(Error);\r\n * // => false\r\n */\r\nfunction isError(value) {\r\n  if (!isObjectLike(value)) {\r\n    return false;\r\n  }\r\n  var tag = baseGetTag(value);\r\n  return tag == errorTag || tag == domExcTag ||\r\n    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\r\n}\r\n\r\nexport default isError;\r\n"]},"metadata":{},"sourceType":"module"}