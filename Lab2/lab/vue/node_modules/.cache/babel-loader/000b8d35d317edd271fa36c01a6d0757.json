{"ast":null,"code":"import toInteger from './toInteger.js';\nimport toLength from './toLength.js';\n/**\r\n * The base implementation of `_.fill` without an iteratee call guard.\r\n *\r\n * @private\r\n * @param {Array} array The array to fill.\r\n * @param {*} value The value to fill `array` with.\r\n * @param {number} [start=0] The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns `array`.\r\n */\n\nfunction baseFill(array, value, start, end) {\n  var length = array.length;\n  start = toInteger(start);\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end === undefined || end > length ? length : toInteger(end);\n\n  if (end < 0) {\n    end += length;\n  }\n\n  end = start > end ? 0 : toLength(end);\n\n  while (start < end) {\n    array[start++] = value;\n  }\n\n  return array;\n}\n\nexport default baseFill;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/_baseFill.js"],"names":["toInteger","toLength","baseFill","array","value","start","end","length","undefined"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuCC,GAAvC,EAA4C;AAC1C,MAAIC,MAAM,GAAGJ,KAAK,CAACI,MAAnB;AAEAF,EAAAA,KAAK,GAAGL,SAAS,CAACK,KAAD,CAAjB;;AACA,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACbA,IAAAA,KAAK,GAAG,CAACA,KAAD,GAASE,MAAT,GAAkB,CAAlB,GAAuBA,MAAM,GAAGF,KAAxC;AACD;;AACDC,EAAAA,GAAG,GAAIA,GAAG,KAAKE,SAAR,IAAqBF,GAAG,GAAGC,MAA5B,GAAsCA,MAAtC,GAA+CP,SAAS,CAACM,GAAD,CAA9D;;AACA,MAAIA,GAAG,GAAG,CAAV,EAAa;AACXA,IAAAA,GAAG,IAAIC,MAAP;AACD;;AACDD,EAAAA,GAAG,GAAGD,KAAK,GAAGC,GAAR,GAAc,CAAd,GAAkBL,QAAQ,CAACK,GAAD,CAAhC;;AACA,SAAOD,KAAK,GAAGC,GAAf,EAAoB;AAClBH,IAAAA,KAAK,CAACE,KAAK,EAAN,CAAL,GAAiBD,KAAjB;AACD;;AACD,SAAOD,KAAP;AACD;;AAED,eAAeD,QAAf","sourcesContent":["import toInteger from './toInteger.js';\r\nimport toLength from './toLength.js';\r\n\r\n/**\r\n * The base implementation of `_.fill` without an iteratee call guard.\r\n *\r\n * @private\r\n * @param {Array} array The array to fill.\r\n * @param {*} value The value to fill `array` with.\r\n * @param {number} [start=0] The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction baseFill(array, value, start, end) {\r\n  var length = array.length;\r\n\r\n  start = toInteger(start);\r\n  if (start < 0) {\r\n    start = -start > length ? 0 : (length + start);\r\n  }\r\n  end = (end === undefined || end > length) ? length : toInteger(end);\r\n  if (end < 0) {\r\n    end += length;\r\n  }\r\n  end = start > end ? 0 : toLength(end);\r\n  while (start < end) {\r\n    array[start++] = value;\r\n  }\r\n  return array;\r\n}\r\n\r\nexport default baseFill;\r\n"]},"metadata":{},"sourceType":"module"}