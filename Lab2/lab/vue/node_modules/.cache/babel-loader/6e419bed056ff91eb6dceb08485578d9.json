{"ast":null,"code":"import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\nimport trimmedEndIndex from './_trimmedEndIndex.js';\n/**\r\n * Removes trailing whitespace or specified characters from `string`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to trim.\r\n * @param {string} [chars=whitespace] The characters to trim.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {string} Returns the trimmed string.\r\n * @example\r\n *\r\n * _.trimEnd('  abc  ');\r\n * // => '  abc'\r\n *\r\n * _.trimEnd('-_-abc-_-', '_-');\r\n * // => '-_-abc'\r\n */\n\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n\n  if (string && (guard || chars === undefined)) {\n    return string.slice(0, trimmedEndIndex(string) + 1);\n  }\n\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nexport default trimEnd;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/trimEnd.js"],"names":["baseToString","castSlice","charsEndIndex","stringToArray","toString","trimmedEndIndex","trimEnd","string","chars","guard","undefined","slice","strSymbols","end","join"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AACrCF,EAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAD,CAAjB;;AACA,MAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKE,SAAxB,CAAV,EAA8C;AAC5C,WAAOH,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBN,eAAe,CAACE,MAAD,CAAf,GAA0B,CAA1C,CAAP;AACD;;AACD,MAAI,CAACA,MAAD,IAAW,EAAEC,KAAK,GAAGR,YAAY,CAACQ,KAAD,CAAtB,CAAf,EAA+C;AAC7C,WAAOD,MAAP;AACD;;AACD,MAAIK,UAAU,GAAGT,aAAa,CAACI,MAAD,CAA9B;AAAA,MACIM,GAAG,GAAGX,aAAa,CAACU,UAAD,EAAaT,aAAa,CAACK,KAAD,CAA1B,CAAb,GAAkD,CAD5D;AAGA,SAAOP,SAAS,CAACW,UAAD,EAAa,CAAb,EAAgBC,GAAhB,CAAT,CAA8BC,IAA9B,CAAmC,EAAnC,CAAP;AACD;;AAED,eAAeR,OAAf","sourcesContent":["import baseToString from './_baseToString.js';\r\nimport castSlice from './_castSlice.js';\r\nimport charsEndIndex from './_charsEndIndex.js';\r\nimport stringToArray from './_stringToArray.js';\r\nimport toString from './toString.js';\r\nimport trimmedEndIndex from './_trimmedEndIndex.js';\r\n\r\n/**\r\n * Removes trailing whitespace or specified characters from `string`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to trim.\r\n * @param {string} [chars=whitespace] The characters to trim.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {string} Returns the trimmed string.\r\n * @example\r\n *\r\n * _.trimEnd('  abc  ');\r\n * // => '  abc'\r\n *\r\n * _.trimEnd('-_-abc-_-', '_-');\r\n * // => '-_-abc'\r\n */\r\nfunction trimEnd(string, chars, guard) {\r\n  string = toString(string);\r\n  if (string && (guard || chars === undefined)) {\r\n    return string.slice(0, trimmedEndIndex(string) + 1);\r\n  }\r\n  if (!string || !(chars = baseToString(chars))) {\r\n    return string;\r\n  }\r\n  var strSymbols = stringToArray(string),\r\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\r\n\r\n  return castSlice(strSymbols, 0, end).join('');\r\n}\r\n\r\nexport default trimEnd;\r\n"]},"metadata":{},"sourceType":"module"}