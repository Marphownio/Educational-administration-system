{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElColorHueSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: Boolean\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance();\n    const thumb = ref(null);\n    const bar = ref(null);\n    const thumbLeft = ref(0);\n    const thumbTop = ref(0);\n    const hueValue = computed(() => {\n      return props.color.get(\"hue\");\n    });\n    watch(() => hueValue.value, () => {\n      update();\n    });\n\n    function handleClick(event) {\n      const target = event.target;\n\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      let hue;\n\n      if (!props.vertical) {\n        let left = clientX - rect.left;\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        hue = Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 360);\n      } else {\n        let top = clientY - rect.top;\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        hue = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);\n      }\n\n      props.color.set(\"hue\", hue);\n    }\n\n    function getThumbLeft() {\n      const el = instance.vnode.el;\n      if (props.vertical) return 0;\n      const hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      const hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n    }\n\n    onMounted(() => {\n      const dragConfig = {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-color-hue-slider\", {\n      \"is-vertical\": _ctx.vertical\n    }])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    class: \"el-color-hue-slider__bar\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, null, 512), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    class: \"el-color-hue-slider__thumb\",\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 4)], 2);\n}\n\nvar HueSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { HueSlider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","vertical","setup","instance","thumb","ref","bar","thumbLeft","thumbTop","computed","get","watch","hueValue","update","event","target","value","handleDrag","vnode","el","rect","clientX","clientY","getClientXY","left","Math","min","width","offsetWidth","hue","round","top","height","offsetHeight","set","getThumbLeft","getThumbTop","onMounted","dragConfig","drag","end","draggable","handleClick","_createElementBlock","class","_normalizeClass","_createElementVNode","onClick","_cache","style","_ctx"],"sources":["../../../../../../../packages/components/color-picker/src/components/hue-slider.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-hue-slider\" :class=\"{ 'is-vertical': vertical }\">\n    <div ref=\"bar\" class=\"el-color-hue-slider__bar\" @click=\"handleClick\"></div>\n    <div\n      ref=\"thumb\"\n      class=\"el-color-hue-slider__thumb\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    ></div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  ref,\n  computed,\n  watch,\n  onMounted,\n  getCurrentInstance,\n  defineComponent,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElColorHueSlider',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n\n    vertical: Boolean,\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = ref<HTMLElement | null>(null)\n    const bar = ref<HTMLElement | null>(null)\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    // computed\n    const hueValue = computed(() => {\n      return props.color.get('hue')\n    })\n    // watch\n    watch(\n      () => hueValue.value,\n      () => {\n        update()\n      }\n    )\n\n    // methods\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n      let hue\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n\n        hue = Math.round(\n          ((left - thumb.value.offsetWidth / 2) /\n            (rect.width - thumb.value.offsetWidth)) *\n            360\n        )\n      } else {\n        let top = clientY - rect.top\n\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        hue = Math.round(\n          ((top - thumb.value.offsetHeight / 2) /\n            (rect.height - thumb.value.offsetHeight)) *\n            360\n        )\n      }\n      props.color.set('hue', hue)\n    }\n\n    function getThumbLeft() {\n      const el = instance.vnode.el\n\n      if (props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 360\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el as HTMLElement\n      if (!props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 360\n      )\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}