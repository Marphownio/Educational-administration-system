{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, Fragment, renderList, toDisplayString, createCommentVNode, createElementVNode, renderSlot } from 'vue';\nimport dayjs from 'dayjs';\nimport localeData from 'dayjs/plugin/localeData';\nimport '../../../hooks/index.mjs';\nimport '../../time-picker/index.mjs';\nimport { dateTableProps, dateTableEmits } from './date-table.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rangeArr } from '../../time-picker/src/common/date-utils.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\ndayjs.extend(localeData);\nconst WEEK_DAYS = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\n\nconst getPrevMonthLastDays = (date, count) => {\n  const lastDay = date.subtract(1, \"month\").endOf(\"month\").date();\n  return rangeArr(count).map((_, index) => lastDay - (count - index - 1));\n};\n\nconst getMonthDays = date => {\n  const days = date.daysInMonth();\n  return rangeArr(days).map((_, index) => index + 1);\n};\n\nconst toNestedArr = days => rangeArr(days.length / 7).map(index => {\n  const start = index * 7;\n  return days.slice(start, start + 7);\n});\n\nconst _sfc_main = defineComponent({\n  props: dateTableProps,\n  emits: dateTableEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const nsTable = useNamespace(\"calendar-table\");\n    const nsDay = useNamespace(\"calendar-day\");\n    const now = dayjs().locale(lang.value);\n    const firstDayOfWeek = now.$locale().weekStart || 0;\n    const isInRange = computed(() => !!props.range && !!props.range.length);\n    const rows = computed(() => {\n      let days = [];\n\n      if (isInRange.value) {\n        const [start, end] = props.range;\n        const currentMonthRange = rangeArr(end.date() - start.date() + 1).map(index => ({\n          text: start.date() + index,\n          type: \"current\"\n        }));\n        let remaining = currentMonthRange.length % 7;\n        remaining = remaining === 0 ? 0 : 7 - remaining;\n        const nextMonthRange = rangeArr(remaining).map((_, index) => ({\n          text: index + 1,\n          type: \"next\"\n        }));\n        days = currentMonthRange.concat(nextMonthRange);\n      } else {\n        const firstDay = props.date.startOf(\"month\").day() || 7;\n        const prevMonthDays = getPrevMonthLastDays(props.date, firstDay - firstDayOfWeek).map(day => ({\n          text: day,\n          type: \"prev\"\n        }));\n        const currentMonthDays = getMonthDays(props.date).map(day => ({\n          text: day,\n          type: \"current\"\n        }));\n        days = [...prevMonthDays, ...currentMonthDays];\n        const nextMonthDays = rangeArr(42 - days.length).map((_, index) => ({\n          text: index + 1,\n          type: \"next\"\n        }));\n        days = days.concat(nextMonthDays);\n      }\n\n      return toNestedArr(days);\n    });\n    const weekDays = computed(() => {\n      const start = firstDayOfWeek;\n\n      if (start === 0) {\n        return WEEK_DAYS.map(_ => t(`el.datepicker.weeks.${_}`));\n      } else {\n        return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start)).map(_ => t(`el.datepicker.weeks.${_}`));\n      }\n    });\n\n    const getFormattedDate = (day, type) => {\n      switch (type) {\n        case \"prev\":\n          return props.date.startOf(\"month\").subtract(1, \"month\").date(day);\n\n        case \"next\":\n          return props.date.startOf(\"month\").add(1, \"month\").date(day);\n\n        case \"current\":\n          return props.date.date(day);\n      }\n    };\n\n    const getCellClass = ({\n      text,\n      type\n    }) => {\n      const classes = [type];\n\n      if (type === \"current\") {\n        const date = getFormattedDate(text, type);\n\n        if (date.isSame(props.selectedDay, \"day\")) {\n          classes.push(nsDay.is(\"selected\"));\n        }\n\n        if (date.isSame(now, \"day\")) {\n          classes.push(nsDay.is(\"today\"));\n        }\n      }\n\n      return classes;\n    };\n\n    const handlePickDay = ({\n      text,\n      type\n    }) => {\n      const date = getFormattedDate(text, type);\n      emit(\"pick\", date);\n    };\n\n    const getSlotData = ({\n      text,\n      type\n    }) => {\n      const day = getFormattedDate(text, type);\n      return {\n        isSelected: day.isSame(props.selectedDay),\n        type: `${type}-month`,\n        day: day.format(\"YYYY-MM-DD\"),\n        date: day.toDate()\n      };\n    };\n\n    return {\n      isInRange,\n      weekDays,\n      rows,\n      getCellClass,\n      handlePickDay,\n      getSlotData,\n      nsTable,\n      nsDay\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"table\", {\n    class: normalizeClass([_ctx.nsTable.b(), _ctx.nsTable.is(\"range\", _ctx.isInRange)]),\n    cellspacing: \"0\",\n    cellpadding: \"0\"\n  }, [!_ctx.hideHeader ? (openBlock(), createElementBlock(\"thead\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.weekDays, day => {\n    return openBlock(), createElementBlock(\"th\", {\n      key: day\n    }, toDisplayString(day), 1);\n  }), 128))])) : createCommentVNode(\"v-if\", true), createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, index) => {\n    return openBlock(), createElementBlock(\"tr\", {\n      key: index,\n      class: normalizeClass({\n        [_ctx.nsTable.e(\"row\")]: true,\n        [_ctx.nsTable.em(\"row\", \"hide-border\")]: index === 0 && _ctx.hideHeader\n      })\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key) => {\n      return openBlock(), createElementBlock(\"td\", {\n        key,\n        class: normalizeClass(_ctx.getCellClass(cell)),\n        onClick: $event => _ctx.handlePickDay(cell)\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.nsDay.b())\n      }, [renderSlot(_ctx.$slots, \"dateCell\", {\n        data: _ctx.getSlotData(cell)\n      }, () => [createElementVNode(\"span\", null, toDisplayString(cell.text), 1)])], 2)], 10, _hoisted_2);\n    }), 128))], 2);\n  }), 128))])], 2);\n}\n\nvar DateTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { DateTable as default, getMonthDays, getPrevMonthLastDays };","map":{"version":3,"mappings":"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","names":["dayjs","extend","localeData","WEEK_DAYS","date","count","lastDay","endOf","map","_","index","days","rangeArr","toNestedArr","length","start","slice","_sfc_main","defineComponent","props","emits","setup","emit","t","lang","useLocale","nsTable","useNamespace","nsDay","now","weekStart","computed","range","isInRange","value","end","text","type","currentMonthRange","remaining","nextMonthRange","concat","firstDay","startOf","day","getPrevMonthLastDays","firstDayOfWeek","currentMonthDays","getMonthDays","prevMonthDays","nextMonthDays","subtract","add","getCellClass","classes","getFormattedDate","is","isSame","handlePickDay","getSlotData","isSelected","format","weekDays","rows","_createElementBlock","class","_normalizeClass","b","_ctx","cellspacing","cellpadding","key","_toDisplayString","_createElementVNode","row","e","em","_openBlock","_Fragment","_renderList","cell","onClick","$event","_renderSlot","data"],"sources":["../../../../../../packages/components/calendar/src/date-table.vue"],"sourcesContent":["<template>\n  <table\n    :class=\"[nsTable.b(), nsTable.is('range', isInRange)]\"\n    cellspacing=\"0\"\n    cellpadding=\"0\"\n  >\n    <thead v-if=\"!hideHeader\">\n      <th v-for=\"day in weekDays\" :key=\"day\">{{ day }}</th>\n    </thead>\n\n    <tbody>\n      <tr\n        v-for=\"(row, index) in rows\"\n        :key=\"index\"\n        :class=\"{\n          [nsTable.e('row')]: true,\n          [nsTable.em('row', 'hide-border')]: index === 0 && hideHeader,\n        }\"\n      >\n        <td\n          v-for=\"(cell, key) in row\"\n          :key=\"key\"\n          :class=\"getCellClass(cell)\"\n          @click=\"handlePickDay(cell)\"\n        >\n          <div :class=\"nsDay.b()\">\n            <slot name=\"dateCell\" :data=\"getSlotData(cell)\">\n              <span>{{ cell.text }}</span>\n            </slot>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport dayjs from 'dayjs'\nimport localeData from 'dayjs/plugin/localeData'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { dateTableProps, dateTableEmits } from './date-table'\nimport type { Dayjs } from 'dayjs'\ndayjs.extend(localeData)\n\ntype CellType = 'next' | 'prev' | 'current'\ninterface Cell {\n  text: number\n  type: CellType\n}\n\nconst WEEK_DAYS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'] as const\n\nexport const getPrevMonthLastDays = (date: Dayjs, count: number) => {\n  const lastDay = date.subtract(1, 'month').endOf('month').date()\n  return rangeArr(count).map((_, index) => lastDay - (count - index - 1))\n}\n\nexport const getMonthDays = (date: Dayjs) => {\n  const days = date.daysInMonth()\n  return rangeArr(days).map((_, index) => index + 1)\n}\n\nconst toNestedArr = (days: Cell[]) =>\n  rangeArr(days.length / 7).map((index) => {\n    const start = index * 7\n    return days.slice(start, start + 7)\n  })\n\nexport default defineComponent({\n  props: dateTableProps,\n  emits: dateTableEmits,\n\n  setup(props, { emit }) {\n    const { t, lang } = useLocale()\n    const nsTable = useNamespace('calendar-table')\n    const nsDay = useNamespace('calendar-day')\n\n    const now = dayjs().locale(lang.value)\n    // todo better way to get Day.js locale object\n    const firstDayOfWeek: number = (now as any).$locale().weekStart || 0\n\n    const isInRange = computed(() => !!props.range && !!props.range.length)\n\n    const rows = computed(() => {\n      let days: Cell[] = []\n      if (isInRange.value) {\n        const [start, end] = props.range!\n        const currentMonthRange: Cell[] = rangeArr(\n          end.date() - start.date() + 1\n        ).map((index) => ({\n          text: start.date() + index,\n          type: 'current',\n        }))\n\n        let remaining = currentMonthRange.length % 7\n        remaining = remaining === 0 ? 0 : 7 - remaining\n        const nextMonthRange: Cell[] = rangeArr(remaining).map((_, index) => ({\n          text: index + 1,\n          type: 'next',\n        }))\n        days = currentMonthRange.concat(nextMonthRange)\n      } else {\n        const firstDay = props.date.startOf('month').day() || 7\n        const prevMonthDays: Cell[] = getPrevMonthLastDays(\n          props.date,\n          firstDay - firstDayOfWeek\n        ).map((day) => ({\n          text: day,\n          type: 'prev',\n        }))\n        const currentMonthDays: Cell[] = getMonthDays(props.date).map(\n          (day) => ({\n            text: day,\n            type: 'current',\n          })\n        )\n        days = [...prevMonthDays, ...currentMonthDays]\n        const nextMonthDays: Cell[] = rangeArr(42 - days.length).map(\n          (_, index) => ({\n            text: index + 1,\n            type: 'next',\n          })\n        )\n        days = days.concat(nextMonthDays)\n      }\n      return toNestedArr(days)\n    })\n\n    const weekDays = computed(() => {\n      const start = firstDayOfWeek\n      if (start === 0) {\n        return WEEK_DAYS.map((_) => t(`el.datepicker.weeks.${_}`))\n      } else {\n        return WEEK_DAYS.slice(start)\n          .concat(WEEK_DAYS.slice(0, start))\n          .map((_) => t(`el.datepicker.weeks.${_}`))\n      }\n    })\n\n    const getFormattedDate = (day: number, type: CellType): Dayjs => {\n      switch (type) {\n        case 'prev':\n          return props.date.startOf('month').subtract(1, 'month').date(day)\n        case 'next':\n          return props.date.startOf('month').add(1, 'month').date(day)\n        case 'current':\n          return props.date.date(day)\n      }\n    }\n\n    const getCellClass = ({ text, type }: Cell) => {\n      const classes: string[] = [type]\n      if (type === 'current') {\n        const date = getFormattedDate(text, type)\n        if (date.isSame(props.selectedDay, 'day')) {\n          classes.push(nsDay.is('selected'))\n        }\n        if (date.isSame(now, 'day')) {\n          classes.push(nsDay.is('today'))\n        }\n      }\n      return classes\n    }\n\n    const handlePickDay = ({ text, type }: Cell) => {\n      const date = getFormattedDate(text, type)\n      emit('pick', date)\n    }\n\n    const getSlotData = ({ text, type }: Cell) => {\n      const day = getFormattedDate(text, type)\n      return {\n        isSelected: day.isSame(props.selectedDay),\n        type: `${type}-month`,\n        day: day.format('YYYY-MM-DD'),\n        date: day.toDate(),\n      }\n    }\n\n    return {\n      isInRange,\n      weekDays,\n      rows,\n      getCellClass,\n      handlePickDay,\n      getSlotData,\n\n      nsTable,\n      nsDay,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}