{"ast":null,"code":"import baseIteratee from './_baseIteratee.js';\nimport basePullAll from './_basePullAll.js';\n/**\r\n * This method is like `_.pullAll` except that it accepts `iteratee` which is\r\n * invoked for each element of `array` and `values` to generate the criterion\r\n * by which they're compared. The iteratee is invoked with one argument: (value).\r\n *\r\n * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {Array} array The array to modify.\r\n * @param {Array} values The values to remove.\r\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n * @returns {Array} Returns `array`.\r\n * @example\r\n *\r\n * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\r\n *\r\n * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\r\n * console.log(array);\r\n * // => [{ 'x': 2 }]\r\n */\n\nfunction pullAllBy(array, values, iteratee) {\n  return array && array.length && values && values.length ? basePullAll(array, values, baseIteratee(iteratee, 2)) : array;\n}\n\nexport default pullAllBy;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/pullAllBy.js"],"names":["baseIteratee","basePullAll","pullAllBy","array","values","iteratee","length"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,oBAAzB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,QAAlC,EAA4C;AAC1C,SAAQF,KAAK,IAAIA,KAAK,CAACG,MAAf,IAAyBF,MAAzB,IAAmCA,MAAM,CAACE,MAA3C,GACHL,WAAW,CAACE,KAAD,EAAQC,MAAR,EAAgBJ,YAAY,CAACK,QAAD,EAAW,CAAX,CAA5B,CADR,GAEHF,KAFJ;AAGD;;AAED,eAAeD,SAAf","sourcesContent":["import baseIteratee from './_baseIteratee.js';\r\nimport basePullAll from './_basePullAll.js';\r\n\r\n/**\r\n * This method is like `_.pullAll` except that it accepts `iteratee` which is\r\n * invoked for each element of `array` and `values` to generate the criterion\r\n * by which they're compared. The iteratee is invoked with one argument: (value).\r\n *\r\n * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Array\r\n * @param {Array} array The array to modify.\r\n * @param {Array} values The values to remove.\r\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n * @returns {Array} Returns `array`.\r\n * @example\r\n *\r\n * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\r\n *\r\n * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\r\n * console.log(array);\r\n * // => [{ 'x': 2 }]\r\n */\r\nfunction pullAllBy(array, values, iteratee) {\r\n  return (array && array.length && values && values.length)\r\n    ? basePullAll(array, values, baseIteratee(iteratee, 2))\r\n    : array;\r\n}\r\n\r\nexport default pullAllBy;\r\n"]},"metadata":{},"sourceType":"module"}