{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated, resolveComponent, resolveDirective, openBlock, createElementBlock, normalizeClass, withModifiers, withDirectives, withKeys, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons-vue';\nimport { inputNumberProps, inputNumberEmits } from './input-number.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport RepeatClick from '../../../directives/repeat-click/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { isNumber } from '@vueuse/core';\n\nconst _sfc_main = defineComponent({\n  name: \"ElInputNumber\",\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus\n  },\n  directives: {\n    RepeatClick\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const input = ref();\n    const data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n    const {\n      formItem\n    } = useFormItem();\n    const ns = useNamespace(\"input-number\");\n    const minDisabled = computed(() => _decrease(props.modelValue) < props.min);\n    const maxDisabled = computed(() => _increase(props.modelValue) > props.max);\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step);\n\n      if (props.precision !== void 0) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\"InputNumber\", \"precision should not be less than the decimal places of step\");\n        }\n\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n    const inputNumberSize = useSize();\n    const inputNumberDisabled = useDisabled();\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n\n      let currentValue = data.currentValue;\n\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n\n        if (props.precision !== void 0) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n\n      return currentValue;\n    });\n\n    const toPrecision = (num, pre) => {\n      if (pre === void 0) pre = numPrecision.value;\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`);\n    };\n\n    const getPrecision = value => {\n      if (value === void 0) return 0;\n      const valueString = value.toString();\n      const dotPosition = valueString.indexOf(\".\");\n      let precision = 0;\n\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n\n      return precision;\n    };\n\n    const _increase = val => {\n      if (!isNumber(val)) return data.currentValue;\n      const precisionFactor = 10 ** numPrecision.value;\n      val = isNumber(val) ? val : Number.NaN;\n      return toPrecision((precisionFactor * val + precisionFactor * props.step) / precisionFactor);\n    };\n\n    const _decrease = val => {\n      if (!isNumber(val)) return data.currentValue;\n      const precisionFactor = 10 ** numPrecision.value;\n      val = isNumber(val) ? val : Number.NaN;\n      return toPrecision((precisionFactor * val - precisionFactor * props.step) / precisionFactor);\n    };\n\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return;\n      const value = props.modelValue || 0;\n\n      const newVal = _increase(value);\n\n      setCurrentValue(newVal);\n    };\n\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return;\n      const value = props.modelValue || 0;\n\n      const newVal = _decrease(value);\n\n      setCurrentValue(newVal);\n    };\n\n    const setCurrentValue = newVal => {\n      var _a;\n\n      const oldVal = data.currentValue;\n\n      if (typeof newVal === \"number\" && props.precision !== void 0) {\n        newVal = toPrecision(newVal, props.precision);\n      }\n\n      if (newVal !== void 0 && newVal >= props.max) newVal = props.max;\n      if (newVal !== void 0 && newVal <= props.min) newVal = props.min;\n      if (oldVal === newVal) return;\n\n      if (!isNumber(newVal)) {\n        newVal = void 0;\n      }\n\n      data.userInput = null;\n      emit(\"update:modelValue\", newVal);\n      emit(\"input\", newVal);\n      emit(\"change\", newVal, oldVal);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      data.currentValue = newVal;\n    };\n\n    const handleInput = value => {\n      return data.userInput = value;\n    };\n\n    const handleInputChange = value => {\n      const newVal = value !== \"\" ? Number(value) : \"\";\n\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n\n      data.userInput = null;\n    };\n\n    const focus = () => {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    const blur = () => {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    const handleFocus = event => {\n      emit(\"focus\", event);\n    };\n\n    const handleBlur = event => {\n      var _a;\n\n      emit(\"blur\", event);\n      (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n    };\n\n    watch(() => props.modelValue, value => {\n      let newVal = Number(value);\n\n      if (value === null) {\n        newVal = Number.NaN;\n      }\n\n      if (!Number.isNaN(newVal)) {\n        if (props.stepStrictly) {\n          const stepPrecision = getPrecision(props.step);\n          const precisionFactor = 10 ** stepPrecision;\n          newVal = Math.round(newVal / props.step) * precisionFactor * props.step / precisionFactor;\n        }\n\n        if (props.precision !== void 0) {\n          newVal = toPrecision(newVal, props.precision);\n        }\n\n        if (newVal > props.max) {\n          newVal = props.max;\n          emit(\"update:modelValue\", newVal);\n        }\n\n        if (newVal < props.min) {\n          newVal = props.min;\n          emit(\"update:modelValue\", newVal);\n        }\n      }\n\n      data.currentValue = newVal;\n      data.userInput = null;\n    }, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n      innerInput.setAttribute(\"aria-valuemax\", String(props.max));\n      innerInput.setAttribute(\"aria-valuemin\", String(props.min));\n      innerInput.setAttribute(\"aria-valuenow\", String(data.currentValue));\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n\n      if (!isNumber(props.modelValue)) {\n        let val = Number(props.modelValue);\n\n        if (Number.isNaN(val)) {\n          val = void 0;\n        }\n\n        emit(\"update:modelValue\", val);\n      }\n    });\n    onUpdated(() => {\n      var _a;\n\n      const innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput == null ? void 0 : innerInput.setAttribute(\"aria-valuenow\", data.currentValue);\n    });\n    return {\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n      ns\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_minus = resolveComponent(\"minus\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_up = resolveComponent(\"arrow-up\");\n\n  const _component_plus = resolveComponent(\"plus\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _directive_repeat_click = resolveDirective(\"repeat-click\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.inputNumberSize), _ctx.ns.is(\"disabled\", _ctx.inputNumberDisabled), _ctx.ns.is(\"without-controls\", !_ctx.controls), _ctx.ns.is(\"controls-right\", _ctx.controlsAtRight)]),\n    onDragstart: _cache[2] || (_cache[2] = withModifiers(() => {}, [\"prevent\"]))\n  }, [_ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    role: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"decrease\"), _ctx.ns.is(\"disabled\", _ctx.minDisabled)]),\n    onKeydown: _cache[0] || (_cache[0] = withKeys((...args) => _ctx.decrease && _ctx.decrease(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_down, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_minus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 34)), [[_directive_repeat_click, _ctx.decrease]]) : createCommentVNode(\"v-if\", true), _ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    role: \"button\",\n    class: normalizeClass([_ctx.ns.e(\"increase\"), _ctx.ns.is(\"disabled\", _ctx.maxDisabled)]),\n    onKeydown: _cache[1] || (_cache[1] = withKeys((...args) => _ctx.increase && _ctx.increase(...args), [\"enter\"]))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [_ctx.controlsAtRight ? (openBlock(), createBlock(_component_arrow_up, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_plus, {\n      key: 1\n    }))]),\n    _: 1\n  })], 34)), [[_directive_repeat_click, _ctx.increase]]) : createCommentVNode(\"v-if\", true), createVNode(_component_el_input, {\n    ref: \"input\",\n    type: \"number\",\n    step: _ctx.step,\n    \"model-value\": _ctx.displayValue,\n    placeholder: _ctx.placeholder,\n    disabled: _ctx.inputNumberDisabled,\n    size: _ctx.inputNumberSize,\n    max: _ctx.max,\n    min: _ctx.min,\n    name: _ctx.name,\n    label: _ctx.label,\n    \"validate-event\": false,\n    onKeydown: [withKeys(withModifiers(_ctx.increase, [\"prevent\"]), [\"up\"]), withKeys(withModifiers(_ctx.decrease, [\"prevent\"]), [\"down\"])],\n    onBlur: _ctx.handleBlur,\n    onFocus: _ctx.handleFocus,\n    onInput: _ctx.handleInput,\n    onChange: _ctx.handleInputChange\n  }, null, 8, [\"step\", \"model-value\", \"placeholder\", \"disabled\", \"size\", \"max\", \"min\", \"name\", \"label\", \"onKeydown\", \"onBlur\", \"onFocus\", \"onInput\", \"onChange\"])], 34);\n}\n\nvar InputNumber = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { InputNumber as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElInput","ElIcon","ArrowUp","ArrowDown","Plus","Minus","directives","RepeatClick","props","emits","setup","emit","input","data","reactive","currentValue","userInput","formItem","useFormItem","ns","useNamespace","minDisabled","computed","_decrease","modelValue","maxDisabled","_increase","getPrecision","precision","debugWarn","Math","stepPrecision","controls","controlsPosition","inputNumberSize","inputNumberDisabled","isNumber","Number","isNaN","toFixed","num","pre","numPrecision","parseFloat","round","value","valueString","indexOf","dotPosition","length","val","toPrecision","precisionFactor","step","increase","newVal","setCurrentValue","decrease","oldVal","_a","_b","event","watch","max","immediate","onMounted","innerInput","String","onUpdated","displayValue","handleInput","handleInputChange","controlsAtRight","focus","blur","_component_el_icon","_component_arrow_up","class","_ctx","onDragstart","_withModifiers","key","role","onKeydown","default","_","_createCommentVNode","_directive_repeat_click","_createVNode","ref","type","placeholder","disabled","size","min","label","_withKeys"],"sources":["../../../../../../packages/components/input-number/src/input-number.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(inputNumberSize),\n      ns.is('disabled', inputNumberDisabled),\n      ns.is('without-controls', !controls),\n      ns.is('controls-right', controlsAtRight),\n    ]\"\n    @dragstart.prevent\n  >\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      role=\"button\"\n      :class=\"[ns.e('decrease'), ns.is('disabled', minDisabled)]\"\n      @keydown.enter=\"decrease\"\n    >\n      <el-icon>\n        <arrow-down v-if=\"controlsAtRight\" />\n        <minus v-else />\n      </el-icon>\n    </span>\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      role=\"button\"\n      :class=\"[ns.e('increase'), ns.is('disabled', maxDisabled)]\"\n      @keydown.enter=\"increase\"\n    >\n      <el-icon>\n        <arrow-up v-if=\"controlsAtRight\" />\n        <plus v-else />\n      </el-icon>\n    </span>\n    <el-input\n      ref=\"input\"\n      type=\"number\"\n      :step=\"step\"\n      :model-value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      :validate-event=\"false\"\n      @keydown.up.prevent=\"increase\"\n      @keydown.down.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  reactive,\n  ref,\n  watch,\n  onMounted,\n  onUpdated,\n} from 'vue'\n\nimport { ElIcon } from '@element-plus/components/icon'\nimport { RepeatClick } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useSize,\n  useNamespace,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { isNumber, debugWarn } from '@element-plus/utils'\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons-vue'\nimport { inputNumberProps, inputNumberEmits } from './input-number'\n\nimport type { ComponentPublicInstance } from 'vue'\n\ninterface IData {\n  currentValue: number | undefined\n  userInput: null | number | string\n}\n\nexport default defineComponent({\n  name: 'ElInputNumber',\n  components: {\n    ElInput,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n    Plus,\n    Minus,\n  },\n  directives: {\n    RepeatClick,\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup(props, { emit }) {\n    const input = ref<ComponentPublicInstance<typeof ElInput>>()\n    const data = reactive<IData>({\n      currentValue: props.modelValue,\n      userInput: null,\n    })\n    const { formItem } = useFormItem()\n    const ns = useNamespace('input-number')\n\n    const minDisabled = computed(() => _decrease(props.modelValue) < props.min)\n    const maxDisabled = computed(() => _increase(props.modelValue) > props.max)\n\n    const numPrecision = computed(() => {\n      const stepPrecision = getPrecision(props.step)\n      if (props.precision !== undefined) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\n            'InputNumber',\n            'precision should not be less than the decimal places of step'\n          )\n        }\n        return props.precision\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision)\n      }\n    })\n    const controlsAtRight = computed(() => {\n      return props.controls && props.controlsPosition === 'right'\n    })\n\n    const inputNumberSize = useSize()\n    const inputNumberDisabled = useDisabled()\n\n    const displayValue = computed(() => {\n      if (data.userInput !== null) {\n        return data.userInput\n      }\n      let currentValue: number | string | undefined = data.currentValue\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return ''\n        if (props.precision !== undefined) {\n          currentValue = currentValue.toFixed(props.precision)\n        }\n      }\n      return currentValue\n    })\n    const toPrecision = (num: number, pre?: number) => {\n      if (pre === undefined) pre = numPrecision.value\n      return Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`)\n    }\n    const getPrecision = (value: number | undefined) => {\n      if (value === undefined) return 0\n      const valueString = value.toString()\n      const dotPosition = valueString.indexOf('.')\n      let precision = 0\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1\n      }\n      return precision\n    }\n    const _increase = (val: number) => {\n      if (!isNumber(val)) return data.currentValue\n      const precisionFactor = 10 ** numPrecision.value\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      val = isNumber(val) ? val : Number.NaN\n      return toPrecision(\n        (precisionFactor * val + precisionFactor * props.step) / precisionFactor\n      )\n    }\n    const _decrease = (val: number) => {\n      if (!isNumber(val)) return data.currentValue\n      const precisionFactor = 10 ** numPrecision.value\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      val = isNumber(val) ? val : Number.NaN\n      return toPrecision(\n        (precisionFactor * val - precisionFactor * props.step) / precisionFactor\n      )\n    }\n    const increase = () => {\n      if (inputNumberDisabled.value || maxDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = _increase(value)\n      setCurrentValue(newVal)\n    }\n    const decrease = () => {\n      if (inputNumberDisabled.value || minDisabled.value) return\n      const value = props.modelValue || 0\n      const newVal = _decrease(value)\n      setCurrentValue(newVal)\n    }\n    const setCurrentValue = (newVal: number | string) => {\n      const oldVal = data.currentValue\n      if (typeof newVal === 'number' && props.precision !== undefined) {\n        newVal = toPrecision(newVal, props.precision)\n      }\n      if (newVal !== undefined && newVal >= props.max) newVal = props.max\n      if (newVal !== undefined && newVal <= props.min) newVal = props.min\n      if (oldVal === newVal) return\n      if (!isNumber(newVal)) {\n        newVal = undefined\n      }\n      data.userInput = null\n      emit('update:modelValue', newVal)\n      emit('input', newVal)\n      emit('change', newVal, oldVal)\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n      data.currentValue = newVal\n    }\n    const handleInput = (value: string) => {\n      return (data.userInput = value)\n    }\n    const handleInputChange = (value: string) => {\n      const newVal = value !== '' ? Number(value) : ''\n      if ((isNumber(newVal) && !Number.isNaN(newVal)) || value === '') {\n        setCurrentValue(newVal)\n      }\n      data.userInput = null\n    }\n\n    const focus = () => {\n      input.value?.focus?.()\n    }\n\n    const blur = () => {\n      input.value?.blur?.()\n    }\n\n    const handleFocus = (event: MouseEvent) => {\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: MouseEvent) => {\n      emit('blur', event)\n      formItem?.validate?.('blur').catch((err) => debugWarn(err))\n    }\n\n    watch(\n      () => props.modelValue,\n      (value) => {\n        let newVal = Number(value)\n        if (value === null) {\n          newVal = Number.NaN\n        }\n        if (!Number.isNaN(newVal)) {\n          if (props.stepStrictly) {\n            const stepPrecision = getPrecision(props.step)\n            const precisionFactor = 10 ** stepPrecision\n            newVal =\n              (Math.round(newVal / props.step) * precisionFactor * props.step) /\n              precisionFactor\n          }\n          if (props.precision !== undefined) {\n            newVal = toPrecision(newVal, props.precision)\n          }\n\n          if (newVal > props.max) {\n            newVal = props.max\n            emit('update:modelValue', newVal)\n          }\n          if (newVal < props.min) {\n            newVal = props.min\n            emit('update:modelValue', newVal)\n          }\n        }\n        data.currentValue = newVal\n        data.userInput = null\n      },\n      { immediate: true }\n    )\n    onMounted(() => {\n      const innerInput = input.value?.input as HTMLInputElement\n      innerInput.setAttribute('role', 'spinbutton')\n      innerInput.setAttribute('aria-valuemax', String(props.max))\n      innerInput.setAttribute('aria-valuemin', String(props.min))\n      innerInput.setAttribute('aria-valuenow', String(data.currentValue))\n      innerInput.setAttribute(\n        'aria-disabled',\n        String(inputNumberDisabled.value)\n      )\n      if (!isNumber(props.modelValue)) {\n        let val: number | undefined = Number(props.modelValue)\n        if (Number.isNaN(val)) {\n          val = undefined\n        }\n        emit('update:modelValue', val)\n      }\n    })\n    onUpdated(() => {\n      const innerInput = input.value?.input\n      innerInput?.setAttribute('aria-valuenow', data.currentValue)\n    })\n    return {\n      input,\n      displayValue,\n      handleInput,\n      handleInputChange,\n      controlsAtRight,\n      decrease,\n      increase,\n      inputNumberSize,\n      inputNumberDisabled,\n      maxDisabled,\n      minDisabled,\n      focus,\n      blur,\n      handleFocus,\n      handleBlur,\n\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}