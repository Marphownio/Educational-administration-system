{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, onMounted, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, toDisplayString } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { breadcrumbItemProps } from './breadcrumb-item.mjs';\nimport { breadcrumbKey } from '../../../tokens/breadcrumb.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst __default__ = {\n  name: \"ElBreadcrumbItem\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: breadcrumbItemProps,\n\n  setup(__props) {\n    const props = __props;\n    const instance = getCurrentInstance();\n    const router = instance.appContext.config.globalProperties.$router;\n    const parent = inject(breadcrumbKey, void 0);\n    const ns = useNamespace(\"breadcrumb\");\n    const {\n      separator,\n      separatorIcon\n    } = parent != null ? parent : {};\n    const link = ref();\n    onMounted(() => {\n      link.value.setAttribute(\"role\", \"link\");\n      link.value.addEventListener(\"click\", () => {\n        if (!props.to || !router) return;\n        props.replace ? router.replace(props.to) : router.push(props.to);\n      });\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"span\", {\n        class: normalizeClass(unref(ns).e(\"item\"))\n      }, [createElementVNode(\"span\", {\n        ref_key: \"link\",\n        ref: link,\n        class: normalizeClass([unref(ns).e(\"inner\"), unref(ns).is(\"link\", !!_ctx.to)]),\n        role: \"link\"\n      }, [renderSlot(_ctx.$slots, \"default\")], 2), unref(separatorIcon) ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"separator\"))\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(separatorIcon))))]),\n        _: 1\n      }, 8, [\"class\"])) : (openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        class: normalizeClass(unref(ns).e(\"separator\")),\n        role: \"presentation\"\n      }, toDisplayString(unref(separator)), 3))], 2);\n    };\n  }\n\n});\n\nexport { _sfc_main as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AAEA;AAAAA;AAAAC;AAAA;AAEA;AAEAC;AACAC;AACAA;AACA;AACAC;AAAA,OAFA;AAEA,KAJA","names":["separator","separatorIcon","onMounted","link","props"],"sources":["../../../../../../packages/components/breadcrumb/src/breadcrumb-item.vue"],"sourcesContent":["<template>\n  <span :class=\"ns.e('item')\">\n    <span ref=\"link\" :class=\"[ns.e('inner'), ns.is('link', !!to)]\" role=\"link\">\n      <slot></slot>\n    </span>\n    <el-icon v-if=\"separatorIcon\" :class=\"ns.e('separator')\">\n      <component :is=\"separatorIcon\" />\n    </el-icon>\n    <span v-else :class=\"ns.e('separator')\" role=\"presentation\">\n      {{ separator }}\n    </span>\n  </span>\n</template>\n\n<script lang=\"ts\" setup>\nimport { inject, ref, onMounted, getCurrentInstance } from 'vue'\nimport ElIcon from '@element-plus/components/icon'\nimport { breadcrumbKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport { breadcrumbItemProps } from './breadcrumb-item'\n\nimport type { Router } from 'vue-router'\n\ndefineOptions({\n  name: 'ElBreadcrumbItem',\n})\n\nconst props = defineProps(breadcrumbItemProps)\n\nconst instance = getCurrentInstance()!\nconst router = instance.appContext.config.globalProperties.$router as Router\nconst parent = inject(breadcrumbKey, undefined)\nconst ns = useNamespace('breadcrumb')\n\nconst { separator, separatorIcon } = parent ?? {}\n\nconst link = ref<HTMLSpanElement>()\n\nonMounted(() => {\n  link.value!.setAttribute('role', 'link')\n  link.value!.addEventListener('click', () => {\n    if (!props.to || !router) return\n    props.replace ? router.replace(props.to) : router.push(props.to)\n  })\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}