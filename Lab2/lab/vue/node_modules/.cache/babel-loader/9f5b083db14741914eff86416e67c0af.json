{"ast":null,"code":"import root from './_root.js';\nimport toString from './toString.js';\n/** Used to match leading whitespace. */\n\nvar reTrimStart = /^\\s+/;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeParseInt = root.parseInt;\n/**\r\n * Converts `string` to an integer of the specified radix. If `radix` is\r\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\r\n * hexadecimal, in which case a `radix` of `16` is used.\r\n *\r\n * **Note:** This method aligns with the\r\n * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 1.1.0\r\n * @category String\r\n * @param {string} string The string to convert.\r\n * @param {number} [radix=10] The radix to interpret `value` by.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {number} Returns the converted integer.\r\n * @example\r\n *\r\n * _.parseInt('08');\r\n * // => 8\r\n *\r\n * _.map(['6', '08', '10'], _.parseInt);\r\n * // => [6, 8, 10]\r\n */\n\nfunction parseInt(string, radix, guard) {\n  if (guard || radix == null) {\n    radix = 0;\n  } else if (radix) {\n    radix = +radix;\n  }\n\n  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n}\n\nexport default parseInt;","map":{"version":3,"sources":["E:/Git/Git/ss2022_group16/Lab2/lab/vue/node_modules/lodash-es/parseInt.js"],"names":["root","toString","reTrimStart","nativeParseInt","parseInt","string","radix","guard","replace"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;AACA,IAAIC,WAAW,GAAG,MAAlB;AAEA;;AACA,IAAIC,cAAc,GAAGH,IAAI,CAACI,QAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,QAAT,CAAkBC,MAAlB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwC;AACtC,MAAIA,KAAK,IAAID,KAAK,IAAI,IAAtB,EAA4B;AAC1BA,IAAAA,KAAK,GAAG,CAAR;AACD,GAFD,MAEO,IAAIA,KAAJ,EAAW;AAChBA,IAAAA,KAAK,GAAG,CAACA,KAAT;AACD;;AACD,SAAOH,cAAc,CAACF,QAAQ,CAACI,MAAD,CAAR,CAAiBG,OAAjB,CAAyBN,WAAzB,EAAsC,EAAtC,CAAD,EAA4CI,KAAK,IAAI,CAArD,CAArB;AACD;;AAED,eAAeF,QAAf","sourcesContent":["import root from './_root.js';\r\nimport toString from './toString.js';\r\n\r\n/** Used to match leading whitespace. */\r\nvar reTrimStart = /^\\s+/;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeParseInt = root.parseInt;\r\n\r\n/**\r\n * Converts `string` to an integer of the specified radix. If `radix` is\r\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\r\n * hexadecimal, in which case a `radix` of `16` is used.\r\n *\r\n * **Note:** This method aligns with the\r\n * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 1.1.0\r\n * @category String\r\n * @param {string} string The string to convert.\r\n * @param {number} [radix=10] The radix to interpret `value` by.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {number} Returns the converted integer.\r\n * @example\r\n *\r\n * _.parseInt('08');\r\n * // => 8\r\n *\r\n * _.map(['6', '08', '10'], _.parseInt);\r\n * // => [6, 8, 10]\r\n */\r\nfunction parseInt(string, radix, guard) {\r\n  if (guard || radix == null) {\r\n    radix = 0;\r\n  } else if (radix) {\r\n    radix = +radix;\r\n  }\r\n  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\r\n}\r\n\r\nexport default parseInt;\r\n"]},"metadata":{},"sourceType":"module"}