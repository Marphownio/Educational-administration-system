{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, watch, nextTick, openBlock, createElementBlock, normalizeClass, normalizeStyle } from 'vue';\nimport { capitalize } from '@vue/shared';\nimport { useResizeObserver } from '@vueuse/core';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport { tabBar } from './tab-bar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst COMPONENT_NAME = \"ElTabBar\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabBar,\n\n  setup(props) {\n    const instance = getCurrentInstance();\n    const rootTabs = inject(tabsRootContextKey);\n    if (!rootTabs) throwError(COMPONENT_NAME, \"must use with ElTabs\");\n    const bar$ = ref();\n    const barStyle = ref();\n\n    const getBarStyle = () => {\n      let offset = 0;\n      let tabSize = 0;\n      const sizeName = [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition) ? \"width\" : \"height\";\n      const sizeDir = sizeName === \"width\" ? \"x\" : \"y\";\n      props.tabs.every(tab => {\n        var _a, _b, _c, _d;\n\n        const $el = (_b = (_a = instance.parent) == null ? void 0 : _a.refs) == null ? void 0 : _b[`tab-${tab.paneName}`];\n        if (!$el) return false;\n\n        if (!tab.active) {\n          return true;\n        }\n\n        tabSize = $el[`client${capitalize(sizeName)}`];\n        const position = sizeDir === \"x\" ? \"left\" : \"top\";\n        offset = $el.getBoundingClientRect()[position] - ((_d = (_c = $el.parentElement) == null ? void 0 : _c.getBoundingClientRect()[position]) != null ? _d : 0);\n        const tabStyles = window.getComputedStyle($el);\n\n        if (sizeName === \"width\") {\n          if (props.tabs.length > 1) {\n            tabSize -= Number.parseFloat(tabStyles.paddingLeft) + Number.parseFloat(tabStyles.paddingRight);\n          }\n\n          offset += Number.parseFloat(tabStyles.paddingLeft);\n        }\n\n        return false;\n      });\n      return {\n        [sizeName]: `${tabSize}px`,\n        transform: `translate${capitalize(sizeDir)}(${offset}px)`\n      };\n    };\n\n    const update = () => barStyle.value = getBarStyle();\n\n    watch(() => props.tabs, async () => {\n      await nextTick();\n      update();\n    }, {\n      immediate: true\n    });\n    useResizeObserver(bar$, () => update());\n    return {\n      bar$,\n      rootTabs,\n      barStyle,\n      update\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"bar$\",\n    class: normalizeClass([\"el-tabs__active-bar\", `is-${_ctx.rootTabs.props.tabPosition}`]),\n    style: normalizeStyle(_ctx.barStyle)\n  }, null, 6);\n}\n\nvar TabBar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { TabBar as default };","map":{"version":3,"mappings":";;;;;;;;;AAwBA,MAAMA,cAAiB,aAAvB;;AACA,MAAKC,YAAaC,eAAa;AAC7BC,MAAM,gBADuB;AAE7BC,OAAO,QAFsB;;AAI7BC,QAAMD,KAAN,EAAa;AACX,UAAME,QAAW,uBAAjB;AACA,UAAMC,WAAWC,MAAO,oBAAxB;AACA,QAAI,CAACD,QAAL,EAAeE,WAAWT,cAAX,EAA2B,sBAA3B;AAEf,UAAMU,IAAO,QAAb;AACA,UAAMC,QAAW,QAAjB;;AAEA,UAAMC,cAAc,MAAqB;AACvC,UAAIC,MAAS,IAAb;AACA,UAAIC,OAAU,IAAd;AAEM,uBAAW,CAAC,KAAD,EAAQ,QAAR,EAAkBC,QAAlB,CAA2BR,QAAS,MAAT,CAAeS,WAA1C,IACb,OADa,GAEb,QAFE;AAGA,sBAAUC,QAAa,YAAb,GAAuB,GAAvB,GAA6B,GAAvC;AAEAb,iBAAKc,KAAL,CAAYC,GAAD,IAAS;AACxB,gBAAYC,EAAZ,EAAYC,EAAZ,EAAYC,EAAZ;;AAGA,cAAKC,2GAAL;AAAiB,kBAEb,OAAK,KAAL;;AACK;AAAA;AAGC;;AACJT,+BAAuBU,oBAAe,EAAtC;AACN,sBAC8B,mCAD9B;AAGMX,6CAAoCY,QAApC,KAAoC,wGAApC;AAEN,0BAA0BC,4BAA1B;;AACM,oBAAM,KAAK,OAAX,EAAoB;AACtB,kCACoB,CADpB,EACoB;AACUZ;AAEtB;;AAA4BD;AAEjC;;AAAA;AAGF,OA5BD;AA4BC;AAEL,oBAAuB,cAFlB;AAEyCc;AAFzC;AAMH,KA3CN;;AA8CE,gBAAM,GAAM,cACA,MADA,GACAf,aADZ;;AAEQgB;AACN;AAAAC,YAEW;AAEf,KALU,EAKV;AAAAC;AAAA,KALU;AAOHC;AACL;AACArB,UADA;AAEAH,cAFA;AAGAI,cAHA;AAGAkB;AAHA;AAGA;;AAvEyB,EAA/B;;2BApBSG;AAAA,SAHDC;AACHC,eADG;AAEHC,WAAKC,cAAE,kEAFJ;AAEIC;AAFJ,aAGC","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","props","setup","instance","rootTabs","inject","throwError","bar$","barStyle","getBarStyle","offset","tabSize","includes","tabPosition","sizeName","every","tab","_b","_c","_d","$el","capitalize","position","window","transform","watch","update","immediate","useResizeObserver","_cache","_openBlock","ref","class","_normalizeClass","style"],"sources":["../../../../../../packages/components/tabs/src/tab-bar.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"bar$\"\n    :class=\"['el-tabs__active-bar', `is-${rootTabs.props.tabPosition}`]\"\n    :style=\"barStyle\"\n  ></div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  inject,\n  getCurrentInstance,\n  watch,\n  nextTick,\n  ref,\n} from 'vue'\nimport { capitalize } from '@vue/shared'\nimport { useResizeObserver } from '@vueuse/core'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils'\nimport { tabBar } from './tab-bar'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElTabBar'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: tabBar,\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const rootTabs = inject(tabsRootContextKey)\n    if (!rootTabs) throwError(COMPONENT_NAME, 'must use with ElTabs')\n\n    const bar$ = ref<HTMLDivElement>()\n    const barStyle = ref()\n\n    const getBarStyle = (): CSSProperties => {\n      let offset = 0\n      let tabSize = 0\n\n      const sizeName = ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n        ? 'width'\n        : 'height'\n      const sizeDir = sizeName === 'width' ? 'x' : 'y'\n\n      props.tabs.every((tab) => {\n        const $el = instance.parent?.refs?.[\n          `tab-${tab.paneName}`\n        ] as HTMLElement\n        if (!$el) return false\n\n        if (!tab.active) {\n          return true\n        }\n\n        tabSize = $el[`client${capitalize(sizeName)}`]\n        const position = sizeDir === 'x' ? 'left' : 'top'\n        offset =\n          $el.getBoundingClientRect()[position] -\n          ($el.parentElement?.getBoundingClientRect()[position] ?? 0)\n        const tabStyles = window.getComputedStyle($el)\n\n        if (sizeName === 'width') {\n          if (props.tabs.length > 1) {\n            tabSize -=\n              Number.parseFloat(tabStyles.paddingLeft) +\n              Number.parseFloat(tabStyles.paddingRight)\n          }\n          offset += Number.parseFloat(tabStyles.paddingLeft)\n        }\n        return false\n      })\n\n      return {\n        [sizeName]: `${tabSize}px`,\n        transform: `translate${capitalize(sizeDir)}(${offset}px)`,\n      }\n    }\n\n    const update = () => (barStyle.value = getBarStyle())\n\n    watch(\n      () => props.tabs,\n      async () => {\n        await nextTick()\n        update()\n      },\n      { immediate: true }\n    )\n    useResizeObserver(bar$, () => update())\n\n    return {\n      bar$,\n      rootTabs,\n      barStyle,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}