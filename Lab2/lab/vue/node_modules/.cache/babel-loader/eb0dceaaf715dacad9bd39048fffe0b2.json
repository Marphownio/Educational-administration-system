{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, computed, openBlock, createElementBlock, createElementVNode, normalizeStyle, Fragment, createTextVNode, toDisplayString, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport { menuItemGroupProps } from './menu-item-group.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst COMPONENT_NAME = \"ElMenuItemGroup\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  props: menuItemGroupProps,\n\n  setup() {\n    const instance = getCurrentInstance();\n    const menu = inject(\"rootMenu\");\n    if (!menu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const levelPadding = computed(() => {\n      if (menu.props.collapse) return 20;\n      let padding = 20;\n      let parent = instance.parent;\n\n      while (parent && parent.type.name !== \"ElMenu\") {\n        if (parent.type.name === \"ElSubMenu\") {\n          padding += 20;\n        }\n\n        parent = parent.parent;\n      }\n\n      return padding;\n    });\n    return {\n      levelPadding\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  class: \"el-menu-item-group\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"li\", _hoisted_1, [createElementVNode(\"div\", {\n    class: \"el-menu-item-group__title\",\n    style: normalizeStyle({\n      paddingLeft: `${_ctx.levelPadding}px`\n    })\n  }, [!_ctx.$slots.title ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createTextVNode(toDisplayString(_ctx.title), 1)], 2112)) : renderSlot(_ctx.$slots, \"title\", {\n    key: 1\n  })], 4), createElementVNode(\"ul\", null, [renderSlot(_ctx.$slots, \"default\")])]);\n}\n\nvar MenuItemGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { MenuItemGroup as default };","map":{"version":3,"mappings":";;;;;AAsBA,MAAMA,cAAiB,oBAAvB;;AAEA,MAAKC,YAAaC,eAAa;AAC7BC,MAAM,gBADuB;AAG7BC,OAAO,oBAHsB;;AAK7BC,OAAQ;AACN,UAAMC,QAAW,uBAAjB;AACA,UAAMC,OAAOC,MAAqB,YAAlC;AACA,QAAI,CAACD,IAAL,EAAWE,WAAWT,cAAX,EAA2B,0BAA3B;AAEL,yBAAeU,SAAS,MAAM;AAClC,UAAIH,KAAKH,KAAL,CAAWO,QAAf,EAAgC;AAChC,UAAIC,OAAU,KAAd;AACA,UAAIC,SAASP,QAAS,OAAtB;;AACA,aAAOO,MAAU,WAAOC,IAAP,CAAYX,IAAZ,KAAqB,QAAtC,EAAgD;AAC1C,mBAAOW,IAAP,CAAYX,IAAZ,KAAqB,WAArB,EAAkC;AACzBS;AAAA;;AAEbC,iBAASA,MAAO,OAAhB;AAAgB;;AAEX;AAAA,KAVY,CAAf;AAaC;AACLE;AADK;AACL;;AAxByB,EAA/B;;;AAvBMC,OAAM;;;;AAAV,yCAWK,IAXL,cAWK,CAVHC,kBAMM;AALJD,SAAM,6BAKF;AAJHE,WAAKC,cAAoB;AAAAC;AAAA;AAItB,KAJsB,CAET,aAAOC,KAAP,IAAOC,aAAxBC,kBAAqD;AAAAC;AAAA,sCAAnBC,IAAK,MAAc,GAAd,CAAc,IAAd,IAAc,CAApC,IACjBC,UAA4B;AAAAF;AAAA,IAHF,CAItB,EADwB,CACxB,CAIH,EAHHP,kBAEK,cADHS,UAAQ,wBACL,EACF,CAXL;AASY","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","props","setup","instance","menu","inject","throwError","computed","collapse","padding","parent","type","levelPadding","class","_createElementVNode","style","_normalizeStyle","paddingLeft","title","openBlock","_createElementBlock","key","_ctx","_renderSlot"],"sources":["../../../../../../packages/components/menu/src/menu-item-group.vue"],"sourcesContent":["<template>\n  <li class=\"el-menu-item-group\">\n    <div\n      class=\"el-menu-item-group__title\"\n      :style=\"{ paddingLeft: `${levelPadding}px` }\"\n    >\n      <template v-if=\"!$slots.title\">{{ title }}</template>\n      <slot v-else name=\"title\" />\n    </div>\n    <ul>\n      <slot />\n    </ul>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, getCurrentInstance, inject } from 'vue'\nimport { throwError } from '@element-plus/utils'\nimport { menuItemGroupProps } from './menu-item-group'\n\nimport type { MenuProvider } from './types'\n\nconst COMPONENT_NAME = 'ElMenuItemGroup'\n\nexport default defineComponent({\n  name: COMPONENT_NAME,\n\n  props: menuItemGroupProps,\n\n  setup() {\n    const instance = getCurrentInstance()!\n    const menu = inject<MenuProvider>('rootMenu')\n    if (!menu) throwError(COMPONENT_NAME, 'can not inject root menu')\n\n    const levelPadding = computed(() => {\n      if (menu.props.collapse) return 20\n      let padding = 20\n      let parent = instance.parent\n      while (parent && parent.type.name !== 'ElMenu') {\n        if (parent.type.name === 'ElSubMenu') {\n          padding += 20\n        }\n        parent = parent.parent\n      }\n      return padding\n    })\n\n    return {\n      levelPadding,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}