{"ast":null,"code":"import { Fragment, defineComponent, getCurrentInstance, ref, onUpdated, onMounted, watch, nextTick, provide, h, renderSlot } from 'vue';\nimport { isPromise, NOOP } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Plus } from '@element-plus/icons-vue';\nimport '../../../tokens/index.mjs';\nimport TabNav from './tab-nav.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT } from '../../../constants/event.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst tabsProps = buildProps({\n  type: {\n    type: String,\n    values: [\"card\", \"border-card\", \"\"],\n    default: \"\"\n  },\n  activeName: {\n    type: String,\n    default: \"\"\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n    default: \"\"\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: [\"top\", \"right\", \"bottom\", \"left\"],\n    default: \"top\"\n  },\n  beforeLeave: {\n    type: definePropType(Function),\n    default: () => true\n  },\n  stretch: Boolean\n});\nconst tabsEmits = {\n  [UPDATE_MODEL_EVENT]: tabName => typeof tabName === \"string\" || typeof tabName === \"number\",\n  [INPUT_EVENT]: tabName => typeof tabName === \"string\" || typeof tabName === \"number\",\n  \"tab-click\": (pane, ev) => ev instanceof Event,\n  edit: (paneName, action) => action === \"remove\" || action === \"add\",\n  \"tab-remove\": paneName => typeof paneName === \"string\" || typeof paneName === \"number\",\n  \"tab-add\": () => true\n};\n\nconst getPaneInstanceFromSlot = (vnode, paneInstanceList = []) => {\n  const children = vnode.children || [];\n  Array.from(children).forEach(node => {\n    let type = node.type;\n    type = type.name || type;\n\n    if (type === \"ElTabPane\" && node.component) {\n      paneInstanceList.push(node.component);\n    } else if (type === Fragment || type === \"template\") {\n      getPaneInstanceFromSlot(node, paneInstanceList);\n    }\n  });\n  return paneInstanceList;\n};\n\nvar Tabs = defineComponent({\n  name: \"ElTabs\",\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, {\n    emit,\n    slots,\n    expose\n  }) {\n    const instance = getCurrentInstance();\n    const nav$ = ref();\n    const panes = ref([]);\n    const currentName = ref(props.modelValue || props.activeName || \"0\");\n    const paneStatesMap = {};\n\n    const updatePaneInstances = (isForceUpdate = false) => {\n      if (slots.default) {\n        const children = instance.subTree.children;\n        const content = Array.from(children).find(({\n          props: props2\n        }) => (props2 == null ? void 0 : props2.class) === \"el-tabs__content\");\n        if (!content) return;\n        const paneInstanceList = getPaneInstanceFromSlot(content).map(paneComponent => paneStatesMap[paneComponent.uid]);\n        const panesChanged = !(paneInstanceList.length === panes.value.length && paneInstanceList.every((pane, index) => pane.uid === panes.value[index].uid));\n\n        if (isForceUpdate || panesChanged) {\n          panes.value = paneInstanceList;\n        }\n      } else if (panes.value.length !== 0) {\n        panes.value = [];\n      }\n    };\n\n    const changeCurrentName = value => {\n      currentName.value = value;\n      emit(INPUT_EVENT, value);\n      emit(UPDATE_MODEL_EVENT, value);\n    };\n\n    const setCurrentName = value => {\n      var _a;\n\n      if (currentName.value === value) return;\n      const canLeave = (_a = props.beforeLeave) == null ? void 0 : _a.call(props, value, currentName.value);\n\n      if (isPromise(canLeave)) {\n        canLeave.then(() => {\n          var _a2, _b;\n\n          changeCurrentName(value);\n          (_b = (_a2 = nav$.value) == null ? void 0 : _a2.removeFocus) == null ? void 0 : _b.call(_a2);\n        }, NOOP);\n      } else if (canLeave !== false) {\n        changeCurrentName(value);\n      }\n    };\n\n    const handleTabClick = (tab, tabName, event) => {\n      if (tab.props.disabled) return;\n      setCurrentName(tabName);\n      emit(\"tab-click\", tab, event);\n    };\n\n    const handleTabRemove = (pane, ev) => {\n      if (pane.props.disabled) return;\n      ev.stopPropagation();\n      emit(\"edit\", pane.props.name, \"remove\");\n      emit(\"tab-remove\", pane.props.name);\n    };\n\n    const handleTabAdd = () => {\n      emit(\"edit\", null, \"add\");\n      emit(\"tab-add\");\n    };\n\n    onUpdated(() => updatePaneInstances());\n    onMounted(() => updatePaneInstances());\n    watch(() => props.activeName, modelValue => setCurrentName(modelValue));\n    watch(() => props.modelValue, modelValue => setCurrentName(modelValue));\n    watch(currentName, async () => {\n      var _a, _b;\n\n      updatePaneInstances(true);\n      await nextTick();\n      await ((_a = nav$.value) == null ? void 0 : _a.$nextTick());\n      (_b = nav$.value) == null ? void 0 : _b.scrollToActiveTab();\n    });\n    provide(tabsRootContextKey, {\n      props,\n      currentName,\n      updatePaneState: pane => paneStatesMap[pane.uid] = pane\n    });\n    expose({\n      currentName\n    });\n    return () => {\n      const newButton = props.editable || props.addable ? h(\"span\", {\n        class: \"el-tabs__new-tab\",\n        tabindex: \"0\",\n        onClick: handleTabAdd,\n        onKeydown: ev => {\n          if (ev.code === EVENT_CODE.enter) handleTabAdd();\n        }\n      }, [h(ElIcon, {\n        class: \"is-icon-plus\"\n      }, {\n        default: () => h(Plus)\n      })]) : null;\n      const header = h(\"div\", {\n        class: [\"el-tabs__header\", `is-${props.tabPosition}`]\n      }, [newButton, h(TabNav, {\n        currentName: currentName.value,\n        editable: props.editable,\n        type: props.type,\n        panes: panes.value,\n        stretch: props.stretch,\n        ref: nav$,\n        onTabClick: handleTabClick,\n        onTabRemove: handleTabRemove\n      })]);\n      const panels = h(\"div\", {\n        class: \"el-tabs__content\"\n      }, [renderSlot(slots, \"default\")]);\n      return h(\"div\", {\n        class: {\n          \"el-tabs\": true,\n          \"el-tabs--card\": props.type === \"card\",\n          [`el-tabs--${props.tabPosition}`]: true,\n          \"el-tabs--border-card\": props.type === \"border-card\"\n        }\n      }, props.tabPosition !== \"bottom\" ? [header, panels] : [panels, header]);\n    };\n  }\n\n});\nexport { Tabs as default, tabsEmits, tabsProps };","map":{"version":3,"mappings":"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","names":["tabsProps","buildProps","type","String","values","default","activeName","closable","Boolean","addable","modelValue","Number","editable","tabPosition","beforeLeave","definePropType","Function","stretch","tabsEmits","UPDATE_MODEL_EVENT","tabName","INPUT_EVENT","pane","ev","Event","edit","paneName","action","getPaneInstanceFromSlot","vnode","paneInstanceList","children","Array","from","forEach","node","name","component","push","Fragment","defineComponent","props","emits","setup","emit","slots","expose","instance","getCurrentInstance","nav$","ref","panes","currentName","paneStatesMap","updatePaneInstances","isForceUpdate","subTree","content","find","props2","class","map","paneComponent","uid","panesChanged","length","value","every","index","changeCurrentName","setCurrentName","_a","canLeave","call","isPromise","then","_a2","_b","removeFocus","NOOP","handleTabClick","tab","event","disabled","handleTabRemove","stopPropagation","handleTabAdd","onUpdated","onMounted","watch","nextTick","$nextTick","scrollToActiveTab","provide","tabsRootContextKey","updatePaneState","newButton","h","tabindex","onClick","onKeydown","code","EVENT_CODE","enter","ElIcon","Plus","header","TabNav","onTabClick","onTabRemove","panels","renderSlot"],"sources":["../../../../../../packages/components/tabs/src/tabs.ts"],"sourcesContent":["import {\n  defineComponent,\n  Fragment,\n  getCurrentInstance,\n  h,\n  nextTick,\n  onMounted,\n  onUpdated,\n  provide,\n  ref,\n  renderSlot,\n  watch,\n} from 'vue'\nimport { isPromise, NOOP } from '@vue/shared'\nimport { buildProps, definePropType } from '@element-plus/utils'\nimport {\n  EVENT_CODE,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport ElIcon from '@element-plus/components/icon'\nimport { Plus } from '@element-plus/icons-vue'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport TabNav from './tab-nav'\nimport type { TabsPaneContext } from '@element-plus/tokens'\n\nimport type {\n  Component,\n  ComponentInternalInstance,\n  VNode,\n  ExtractPropTypes,\n  Ref,\n} from 'vue'\n\nexport const tabsProps = buildProps({\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  activeName: {\n    type: String,\n    default: '',\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n    default: '',\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: ['top', 'right', 'bottom', 'left'],\n    default: 'top',\n  },\n  beforeLeave: {\n    type: definePropType<\n      (\n        newTabName: string | number,\n        oldTabName: string | number\n      ) => void | boolean | Promise<void | boolean>\n    >(Function),\n    default: () => true,\n  },\n  stretch: Boolean,\n} as const)\nexport type TabsProps = ExtractPropTypes<typeof tabsProps>\n\nexport const tabsEmits = {\n  [UPDATE_MODEL_EVENT]: (tabName: string | number) =>\n    typeof tabName === 'string' || typeof tabName === 'number',\n  [INPUT_EVENT]: (tabName: string | number) =>\n    typeof tabName === 'string' || typeof tabName === 'number',\n  'tab-click': (pane: TabsPaneContext, ev: Event) => ev instanceof Event,\n  edit: (paneName: string | number | null, action: 'remove' | 'add') =>\n    action === 'remove' || action === 'add',\n  'tab-remove': (paneName: string | number) =>\n    typeof paneName === 'string' || typeof paneName === 'number',\n  'tab-add': () => true,\n}\nexport type TabsEmits = typeof tabsEmits\n\nconst getPaneInstanceFromSlot = (\n  vnode: VNode,\n  paneInstanceList: ComponentInternalInstance[] = []\n) => {\n  const children = (vnode.children || []) as ArrayLike<VNode>\n  Array.from(children).forEach((node) => {\n    let type = node.type\n    type = (type as Component).name || type\n    if (type === 'ElTabPane' && node.component) {\n      paneInstanceList.push(node.component)\n    } else if (type === Fragment || type === 'template') {\n      getPaneInstanceFromSlot(node, paneInstanceList)\n    }\n  })\n  return paneInstanceList\n}\n\nexport default defineComponent({\n  name: 'ElTabs',\n\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, { emit, slots, expose }) {\n    const instance = getCurrentInstance()!\n    const nav$ = ref<InstanceType<typeof TabNav>>()\n\n    const panes: Ref<TabsPaneContext[]> = ref([])\n    const currentName = ref(props.modelValue || props.activeName || '0')\n\n    const paneStatesMap: Record<number, TabsPaneContext> = {}\n\n    const updatePaneInstances = (isForceUpdate = false) => {\n      if (slots.default) {\n        const children = instance.subTree.children as ArrayLike<VNode>\n        const content = Array.from(children).find(\n          ({ props }) => props?.class === 'el-tabs__content'\n        )\n        if (!content) return\n\n        const paneInstanceList: TabsPaneContext[] = getPaneInstanceFromSlot(\n          content\n        ).map((paneComponent) => paneStatesMap[paneComponent.uid])\n\n        const panesChanged = !(\n          paneInstanceList.length === panes.value.length &&\n          paneInstanceList.every(\n            (pane, index) => pane.uid === panes.value[index].uid\n          )\n        )\n\n        if (isForceUpdate || panesChanged) {\n          panes.value = paneInstanceList\n        }\n      } else if (panes.value.length !== 0) {\n        panes.value = []\n      }\n    }\n\n    const changeCurrentName = (value: string | number) => {\n      currentName.value = value\n      emit(INPUT_EVENT, value)\n      emit(UPDATE_MODEL_EVENT, value)\n    }\n\n    const setCurrentName = (value: string | number) => {\n      // should do nothing.\n      if (currentName.value === value) return\n\n      const canLeave = props.beforeLeave?.(value, currentName.value)\n      if (isPromise(canLeave)) {\n        canLeave.then(\n          () => {\n            changeCurrentName(value)\n\n            // call exposed function, Vue doesn't support expose in typescript yet.\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-expect-error\n            nav$.value?.removeFocus?.()\n          },\n          // ignore promise rejection in `before-leave` hook\n          NOOP\n        )\n      } else if (canLeave !== false) {\n        changeCurrentName(value)\n      }\n    }\n\n    const handleTabClick = (\n      tab: TabsPaneContext,\n      tabName: string | number,\n      event: Event\n    ) => {\n      if (tab.props.disabled) return\n      setCurrentName(tabName)\n      emit('tab-click', tab, event)\n    }\n\n    const handleTabRemove = (pane: TabsPaneContext, ev: Event) => {\n      if (pane.props.disabled) return\n      ev.stopPropagation()\n      emit('edit', pane.props.name, 'remove')\n      emit('tab-remove', pane.props.name)\n    }\n\n    const handleTabAdd = () => {\n      emit('edit', null, 'add')\n      emit('tab-add')\n    }\n\n    onUpdated(() => updatePaneInstances())\n    onMounted(() => updatePaneInstances())\n\n    watch(\n      () => props.activeName,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(\n      () => props.modelValue,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(currentName, async () => {\n      updatePaneInstances(true)\n      await nextTick()\n      await nav$.value?.$nextTick()\n\n      // call exposed function, Vue doesn't support expose in typescript yet.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      nav$.value?.scrollToActiveTab()\n    })\n\n    provide(tabsRootContextKey, {\n      props,\n      currentName,\n      updatePaneState: (pane) => (paneStatesMap[pane.uid] = pane),\n    })\n\n    expose({\n      currentName,\n    })\n\n    return () => {\n      const newButton =\n        props.editable || props.addable\n          ? h(\n              'span',\n              {\n                class: 'el-tabs__new-tab',\n                tabindex: '0',\n                onClick: handleTabAdd,\n                onKeydown: (ev: KeyboardEvent) => {\n                  if (ev.code === EVENT_CODE.enter) handleTabAdd()\n                },\n              },\n              [h(ElIcon, { class: 'is-icon-plus' }, { default: () => h(Plus) })]\n            )\n          : null\n\n      const header = h(\n        'div',\n        { class: ['el-tabs__header', `is-${props.tabPosition}`] },\n        [\n          newButton,\n          h(TabNav, {\n            currentName: currentName.value,\n            editable: props.editable,\n            type: props.type,\n            panes: panes.value,\n            stretch: props.stretch,\n            ref: nav$,\n            onTabClick: handleTabClick,\n            onTabRemove: handleTabRemove,\n          }),\n        ]\n      )\n\n      const panels = h('div', { class: 'el-tabs__content' }, [\n        renderSlot(slots, 'default'),\n      ])\n\n      return h(\n        'div',\n        {\n          class: {\n            'el-tabs': true,\n            'el-tabs--card': props.type === 'card',\n            [`el-tabs--${props.tabPosition}`]: true,\n            'el-tabs--border-card': props.type === 'border-card',\n          },\n        },\n        props.tabPosition !== 'bottom' ? [header, panels] : [panels, header]\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}