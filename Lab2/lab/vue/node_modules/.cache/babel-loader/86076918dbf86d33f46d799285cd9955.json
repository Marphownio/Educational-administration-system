{"ast":null,"code":"import { defineComponent, ref, provide, unref, onMounted, nextTick, watch, onBeforeUnmount, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport { getEdges, tryFocus, focusableStack, focusFirstDescendant, obtainAllFocusableElements } from './utils.mjs';\nimport { ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT, FOCUS_TRAP_INJECTION_KEY, FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS, FOCUS_ON_UNMOUNT } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElFocusTrap\",\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean\n  },\n  emits: [ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT],\n\n  setup(props, {\n    emit\n  }) {\n    const focusTrapRef = ref();\n    const forwardRef = ref(null);\n    let lastFocusBeforeMounted;\n    let lastFocusAfterMounted;\n    const focusLayer = {\n      paused: false,\n\n      pause() {\n        this.paused = true;\n      },\n\n      resume() {\n        this.paused = false;\n      }\n\n    };\n\n    const onKeydown = e => {\n      if (!props.loop && !props.trapped) return;\n      if (focusLayer.paused) return;\n      const {\n        key,\n        altKey,\n        ctrlKey,\n        metaKey,\n        currentTarget,\n        shiftKey\n      } = e;\n      const {\n        loop\n      } = props;\n      const isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;\n      const currentFocusingEl = document.activeElement;\n\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget;\n        const [first, last] = getEdges(container);\n        const isTabbable = first && last;\n\n        if (!isTabbable) {\n          if (currentFocusingEl === container) e.preventDefault();\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault();\n            if (loop) tryFocus(first, true);\n          } else if (shiftKey && currentFocusingEl === first) {\n            e.preventDefault();\n            if (loop) tryFocus(last, true);\n          }\n        }\n      }\n    };\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown\n    });\n\n    const focusOnMount = e => {\n      emit(ON_MOUNT_FOCUS_EVT, e);\n    };\n\n    const focusOnUnmount = e => emit(ON_UNMOUNT_FOCUS_EVT, e);\n\n    const onFocusIn = e => {\n      const trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n      const target = e.target;\n\n      if (target && trapContainer.contains(target)) {\n        lastFocusAfterMounted = target;\n      } else {\n        tryFocus(lastFocusAfterMounted, true);\n      }\n    };\n\n    const onFocusOut = e => {\n      const trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n\n      if (!trapContainer.contains(e.relatedTarget)) {\n        tryFocus(lastFocusAfterMounted, true);\n      }\n    };\n\n    const cleanupDocumentListeners = () => {\n      document.removeEventListener(\"focusin\", onFocusIn);\n      document.removeEventListener(\"focusout\", onFocusOut);\n    };\n\n    onMounted(() => {\n      const trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        focusableStack.push(focusLayer);\n        const prevFocusedElement = document.activeElement;\n        lastFocusBeforeMounted = prevFocusedElement;\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);\n\n        if (!isPrevFocusContained) {\n          const mountEvent = new Event(FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS);\n          trapContainer.addEventListener(FOCUS_ON_MOUNT, focusOnMount);\n          trapContainer.dispatchEvent(mountEvent);\n\n          if (!mountEvent.defaultPrevented) {\n            nextTick(() => {\n              focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);\n\n              if (document.activeElement === prevFocusedElement) {\n                tryFocus(trapContainer);\n              }\n            });\n          }\n        }\n      }\n\n      watch(() => props.trapped, trapped => {\n        if (trapped) {\n          document.addEventListener(\"focusin\", onFocusIn);\n          document.addEventListener(\"focusout\", onFocusOut);\n        } else {\n          cleanupDocumentListeners();\n        }\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(() => {\n      cleanupDocumentListeners();\n      const trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_ON_MOUNT, focusOnMount);\n        const unmountEvent = new Event(FOCUS_ON_UNMOUNT, FOCUS_ON_MOUNT_OPTS);\n        trapContainer.addEventListener(FOCUS_ON_UNMOUNT, focusOnUnmount);\n        trapContainer.dispatchEvent(unmountEvent);\n\n        if (!unmountEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeMounted != null ? lastFocusBeforeMounted : document.body, true);\n        }\n\n        trapContainer.removeEventListener(FOCUS_ON_UNMOUNT, focusOnMount);\n        focusableStack.remove(focusLayer);\n      }\n    });\n    return {\n      focusTrapRef,\n      forwardRef,\n      onKeydown\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\");\n}\n\nvar ElFocusTrap = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElFocusTrap as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","inheritAttrs","props","loop","trapped","emits","ON_MOUNT_FOCUS_EVT","ON_UNMOUNT_FOCUS_EVT","setup","emit","focusTrapRef","forwardRef","ref","focusLayer","paused","pause","resume","e","key","altKey","ctrlKey","metaKey","currentTarget","shiftKey","EVENT_CODE","currentFocusingEl","document","isTabbing","container","first","last","getEdges","isTabbable","tryFocus","provide","FOCUS_TRAP_INJECTION_KEY","onKeydown","focusOnUnmount","trapContainer","unref","target","lastFocusAfterMounted","contains","relatedTarget","cleanupDocumentListeners","removeEventListener","onFocusIn","onFocusOut","onMounted","focusableStack","push","prevFocusedElement","lastFocusBeforeMounted","isPrevFocusContained","Event","FOCUS_ON_MOUNT","FOCUS_ON_MOUNT_OPTS","addEventListener","focusOnMount","dispatchEvent","mountEvent","defaultPrevented","nextTick","focusFirstDescendant","obtainAllFocusableElements","activeElement","watch","immediate","onBeforeUnmount","FOCUS_ON_UNMOUNT","unmountEvent","remove","_renderSlot"],"sources":["../../../../../../packages/components/focus-trap/src/focus-trap.vue"],"sourcesContent":["<template>\n  <slot />\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  onMounted,\n  onBeforeUnmount,\n  provide,\n  unref,\n  watch,\n  nextTick,\n} from 'vue'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  focusableStack,\n  focusFirstDescendant,\n  getEdges,\n  tryFocus,\n  obtainAllFocusableElements,\n} from './utils'\nimport {\n  FOCUS_TRAP_INJECTION_KEY,\n  FOCUS_ON_MOUNT,\n  FOCUS_ON_MOUNT_OPTS,\n  ON_MOUNT_FOCUS_EVT,\n  ON_UNMOUNT_FOCUS_EVT,\n  FOCUS_ON_UNMOUNT,\n} from './tokens'\n\nimport type { FocusLayer } from './utils'\n\nexport default defineComponent({\n  name: 'ElFocusTrap',\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n  },\n  emits: [ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT],\n  setup(props, { emit }) {\n    const focusTrapRef = ref<HTMLElement | null>()\n    const forwardRef = ref<HTMLElement | null>(null)\n    let lastFocusBeforeMounted: HTMLElement | null\n    let lastFocusAfterMounted: HTMLElement | null\n\n    const focusLayer: FocusLayer = {\n      paused: false,\n      pause() {\n        this.paused = true\n      },\n      resume() {\n        this.paused = false\n      },\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      if (!props.loop && !props.trapped) return\n      if (focusLayer.paused) return\n\n      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e\n      const { loop } = props\n      const isTabbing =\n        key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey\n\n      const currentFocusingEl = document.activeElement\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget as HTMLElement\n        const [first, last] = getEdges(container)\n        const isTabbable = first && last\n\n        if (!isTabbable) {\n          if (currentFocusingEl === container) e.preventDefault()\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault()\n            if (loop) tryFocus(first, true)\n          } else if (shiftKey && currentFocusingEl === first) {\n            e.preventDefault()\n            if (loop) tryFocus(last, true)\n          }\n        }\n      }\n    }\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown,\n    })\n\n    const focusOnMount = (e: Event) => {\n      emit(ON_MOUNT_FOCUS_EVT, e)\n    }\n    const focusOnUnmount = (e: Event) => emit(ON_UNMOUNT_FOCUS_EVT, e)\n    const onFocusIn = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n      const target = e.target as HTMLElement | null\n      if (target && trapContainer.contains(target)) {\n        lastFocusAfterMounted = target\n      } else {\n        tryFocus(lastFocusAfterMounted, true)\n      }\n    }\n\n    const onFocusOut = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n\n      if (\n        !trapContainer.contains(\n          (e as FocusEvent).relatedTarget as HTMLElement | null\n        )\n      ) {\n        tryFocus(lastFocusAfterMounted, true)\n      }\n    }\n\n    const cleanupDocumentListeners = () => {\n      document.removeEventListener('focusin', onFocusIn)\n      document.removeEventListener('focusout', onFocusOut)\n    }\n\n    onMounted(() => {\n      const trapContainer = unref(forwardRef)\n      if (trapContainer) {\n        focusableStack.push(focusLayer)\n        const prevFocusedElement = document.activeElement\n        lastFocusBeforeMounted = prevFocusedElement as HTMLElement | null\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement)\n        if (!isPrevFocusContained) {\n          const mountEvent = new Event(FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS)\n          trapContainer.addEventListener(FOCUS_ON_MOUNT, focusOnMount)\n          trapContainer.dispatchEvent(mountEvent)\n          if (!mountEvent.defaultPrevented) {\n            nextTick(() => {\n              focusFirstDescendant(\n                obtainAllFocusableElements(trapContainer),\n                true\n              )\n              if (document.activeElement === prevFocusedElement) {\n                tryFocus(trapContainer)\n              }\n            })\n          }\n        }\n      }\n\n      watch(\n        () => props.trapped,\n        (trapped) => {\n          if (trapped) {\n            document.addEventListener('focusin', onFocusIn)\n            document.addEventListener('focusout', onFocusOut)\n          } else {\n            cleanupDocumentListeners()\n          }\n        },\n        { immediate: true }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      cleanupDocumentListeners()\n      const trapContainer = unref(forwardRef)\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_ON_MOUNT, focusOnMount)\n        const unmountEvent = new Event(FOCUS_ON_UNMOUNT, FOCUS_ON_MOUNT_OPTS)\n\n        trapContainer.addEventListener(FOCUS_ON_UNMOUNT, focusOnUnmount)\n        trapContainer.dispatchEvent(unmountEvent)\n\n        if (!unmountEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeMounted ?? document.body, true)\n        }\n\n        trapContainer.removeEventListener(FOCUS_ON_UNMOUNT, focusOnMount)\n        focusableStack.remove(focusLayer)\n      }\n    })\n\n    return {\n      focusTrapRef,\n      forwardRef,\n      onKeydown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}