{"ast":null,"code":"import { defineComponent, ref, nextTick, onMounted, provide, reactive, toRefs, watch, openBlock, createElementBlock, normalizeClass, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { radioGroupProps, radioGroupEmits } from './radio-group.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { radioGroupKey } from '../../../tokens/radio.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElRadioGroup\",\n  props: radioGroupProps,\n  emits: radioGroupEmits,\n\n  setup(props, ctx) {\n    const ns = useNamespace(\"radio\");\n    const radioGroupRef = ref();\n    const {\n      formItem\n    } = useFormItem();\n\n    const changeEvent = value => {\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => ctx.emit(\"change\", value));\n    };\n\n    const handleKeydown = e => {\n      if (!radioGroupRef.value) return;\n      const target = e.target;\n      const className = target.nodeName === \"INPUT\" ? \"[type=radio]\" : \"[role=radio]\";\n      const radios = radioGroupRef.value.querySelectorAll(className);\n      const length = radios.length;\n      const index = Array.from(radios).indexOf(target);\n      const roleRadios = radioGroupRef.value.querySelectorAll(\"[role=radio]\");\n      let nextIndex = null;\n\n      switch (e.code) {\n        case EVENT_CODE.left:\n        case EVENT_CODE.up:\n          e.stopPropagation();\n          e.preventDefault();\n          nextIndex = index === 0 ? length - 1 : index - 1;\n          break;\n\n        case EVENT_CODE.right:\n        case EVENT_CODE.down:\n          e.stopPropagation();\n          e.preventDefault();\n          nextIndex = index === length - 1 ? 0 : index + 1;\n          break;\n\n        default:\n          break;\n      }\n\n      if (nextIndex === null) return;\n      roleRadios[nextIndex].click();\n      roleRadios[nextIndex].focus();\n    };\n\n    onMounted(() => {\n      const radios = radioGroupRef.value.querySelectorAll(\"[type=radio]\");\n      const firstLabel = radios[0];\n\n      if (!Array.from(radios).some(radio => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0;\n      }\n    });\n    provide(radioGroupKey, reactive({ ...toRefs(props),\n      changeEvent\n    }));\n    watch(() => props.modelValue, () => formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err)));\n    return {\n      ns,\n      radioGroupRef,\n      handleKeydown\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"radioGroupRef\",\n    class: normalizeClass(_ctx.ns.b(\"group\")),\n    role: \"radiogroup\",\n    onKeydown: _cache[0] || (_cache[0] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n  }, [renderSlot(_ctx.$slots, \"default\")], 34);\n}\n\nvar RadioGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { RadioGroup as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AA6BA,MAAKA,YAAaC,eAAa;AAC7BC,MAAM,gBADuB;AAE7BC,OAAO,iBAFsB;AAG7BC,OAAO,iBAHsB;;AAK7BC,QAAMF,KAAN,EAAaG,GAAb,EAAkB;AAChB,UAAMC,KAAKC,YAAa,SAAxB;AACA,UAAMC,aAAgB,QAAtB;AACA,UAAM;AAAEC;AAAF,QAAeC,aAArB;;AAEM,wBAAeC,KAAD,IAA0C;AAC5DN,UAAIO,IAAJ,CAASC,kBAAT,EAA6BF,KAA7B;AACSG,qBAAMT,GAAI,KAAJ,CAAS,QAAT,EAAmBM,KAAnB,CAAN;AAAyB,KAF9B;;AAKA,0BAAiBI,CAAD,IAAsB;AAC1C,UAAI,CAACP,aAAc,MAAnB,EAA0B;AAG1B,YAAMQ,SAASD,CAAE,OAAjB;AACA,YAAME,SACJ,UAAOC,QAAP,KAAoB,OAApB,GAA8B,cAA9B,GAA+C,cADjD;AAEM,qBACJV,aAAc,MAAd,CAAoBW,gBAApB,CAAuDF,SAAvD,CADI;AAEN,YAAMG,SAASC,MAAO,OAAtB;AACA,YAAMC,KAAQ,SAAMC,IAAN,CAAWF,MAAX,EAAmBG,OAAnB,CAA2BR,MAA3B,CAAd;AACM,yBACJR,aAAc,MAAd,CAAoBW,gBAApB,CAAuD,cAAvD,CADI;AAGN,UAAIM,SAA2B,OAA/B;;AACA,cAAQV,CAAE,KAAV;AAAU,aACHW,UAAW,KADR;AACQ,aACXA,UAAW,GADA;AAEZX;AACAA;AACFU,sBAAYH,KAAU,MAAV,GAAcF,MAAS,IAAvB,GAA2BE,KAAQ,IAA/C;AACA;;AAAA,aACGI,UAAW,MADd;AACc,aACXA,UAAW,KADA;AAEZX;AACAA;AACFU,sBAAYH,KAAU,cAAS,CAAnB,GAAuB,CAAvB,GAA2BA,KAAQ,IAA/C;AACA;;AAAA;AAEA;AAdJ;;AAgBA,UAAIG,SAAc,SAAlB,EAAwB;AACxBE,iBAAWF,SAAX,EAAsBG,KAAtB;AACAD,iBAAWF,SAAX,EAAsBI,KAAtB;AAAsB,KAjClB;;AAoCNC,cAAU,MAAM;AACR,qBACJtB,aAAc,MAAd,CAAqBW,gBAArB,CAAwD,cAAxD,CADI;AAEN,YAAMY,aAAaV,MAAO,GAA1B;;AACI,WAACW,MAAMT,IAAN,CAAWF,MAAX,EAAmBY,IAAnB,CAAyBC,KAAD,IAAWA,KAAM,QAAzC,CAAD,IAAsDH,UAAtD,EAAkE;AACpEA,mBAAWI,QAAX,GAAsB,CAAtB;AAAsB;AAAA,KAL1B;AASAC,YACEC,aADF,EAEEC,QAAS,MACJC,MAAO,OADH;AAEPC;AAFO,MAFX;AASEC,gBAAMvC,KAAM,WAAZ,EACA,MAAMO,mBAAmB,KAAU,CAA7B,GAA6BA,QAAO,SAAP,CAAyB,QAAzB,EAAyBiC,KAAzB,CAAyBC,qBAAzB,CADnC;AAIK;AACLrC,QADK;AAELE,mBAFK;AAGLoC;AAHK;AAGL;;AA5EyB,EAA/B;;;sBA5BEC,kBAOM;AANJC,OAAI,iBAMA;AALHC,WAAKC,cAAE,SAAGC,CAAH,CAAI,OAAJ,EAKJ;AAJJC,QAAK,cAID;AAHHC,eAAOC,MAAE,GAAF,KAAEA,0EAAF;AAGJ,KAHM,CAEVC,UAAa,wBAFH,CAGN,EADS,EACT","names":["_sfc_main","defineComponent","name","props","emits","setup","ctx","ns","useNamespace","radioGroupRef","formItem","useFormItem","value","emit","UPDATE_MODEL_EVENT","nextTick","e","target","className","nodeName","querySelectorAll","length","radios","index","from","indexOf","nextIndex","EVENT_CODE","roleRadios","click","focus","onMounted","firstLabel","Array","some","radio","tabIndex","provide","radioGroupKey","reactive","toRefs","changeEvent","watch","catch","err","handleKeydown","_createElementBlock","ref","class","_normalizeClass","b","role","onKeydown","_cache","_renderSlot"],"sources":["../../../../../../packages/components/radio/src/radio-group.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"radioGroupRef\"\n    :class=\"ns.b('group')\"\n    role=\"radiogroup\"\n    @keydown=\"handleKeydown\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  provide,\n  onMounted,\n  ref,\n  reactive,\n  toRefs,\n  watch,\n} from 'vue'\nimport { EVENT_CODE, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { radioGroupKey } from '@element-plus/tokens'\nimport { useFormItem, useNamespace } from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\nimport { radioGroupEmits, radioGroupProps } from './radio-group'\nimport type { RadioGroupProps } from '..'\n\nexport default defineComponent({\n  name: 'ElRadioGroup',\n  props: radioGroupProps,\n  emits: radioGroupEmits,\n\n  setup(props, ctx) {\n    const ns = useNamespace('radio')\n    const radioGroupRef = ref<HTMLDivElement>()\n    const { formItem } = useFormItem()\n\n    const changeEvent = (value: RadioGroupProps['modelValue']) => {\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => ctx.emit('change', value))\n    }\n\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (!radioGroupRef.value) return\n\n      // 左右上下按键 可以在 radio 组内切换不同选项\n      const target = e.target as HTMLInputElement\n      const className =\n        target.nodeName === 'INPUT' ? '[type=radio]' : '[role=radio]'\n      const radios =\n        radioGroupRef.value.querySelectorAll<HTMLInputElement>(className)\n      const length = radios.length\n      const index = Array.from(radios).indexOf(target)\n      const roleRadios =\n        radioGroupRef.value.querySelectorAll<HTMLInputElement>('[role=radio]')\n\n      let nextIndex: number | null = null\n      switch (e.code) {\n        case EVENT_CODE.left:\n        case EVENT_CODE.up:\n          e.stopPropagation()\n          e.preventDefault()\n          nextIndex = index === 0 ? length - 1 : index - 1\n          break\n        case EVENT_CODE.right:\n        case EVENT_CODE.down:\n          e.stopPropagation()\n          e.preventDefault()\n          nextIndex = index === length - 1 ? 0 : index + 1\n          break\n        default:\n          break\n      }\n      if (nextIndex === null) return\n      roleRadios[nextIndex].click()\n      roleRadios[nextIndex].focus()\n    }\n\n    onMounted(() => {\n      const radios =\n        radioGroupRef.value!.querySelectorAll<HTMLInputElement>('[type=radio]')\n      const firstLabel = radios[0]\n      if (!Array.from(radios).some((radio) => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0\n      }\n    })\n\n    provide(\n      radioGroupKey,\n      reactive({\n        ...toRefs(props),\n        changeEvent,\n      })\n    )\n\n    watch(\n      () => props.modelValue,\n      () => formItem?.validate('change').catch((err) => debugWarn(err))\n    )\n\n    return {\n      ns,\n      radioGroupRef,\n      handleKeydown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}