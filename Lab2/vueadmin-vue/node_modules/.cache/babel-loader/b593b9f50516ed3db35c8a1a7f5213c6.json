{"ast":null,"code":"import { defineComponent, inject, ref, getCurrentInstance, provide, watch, nextTick, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode, Fragment, renderList, vShow } from 'vue';\nimport { isFunction, isString } from '@vue/shared';\nimport _CollapseTransition from '../../collapse-transition/index.mjs';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading, CaretRight } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport _sfc_main$1 from './tree-node-content.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { dragEventsKey } from './model/useDragNode.mjs';\nimport Node from './model/node.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElCollapseTransition: _CollapseTransition,\n    ElCheckbox,\n    NodeContent: _sfc_main$1,\n    ElIcon,\n    Loading\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({})\n    },\n    props: {\n      type: Object,\n      default: () => ({})\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"node-expand\"],\n\n  setup(props, ctx) {\n    const ns = useNamespace(\"tree\");\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const tree = inject(\"RootTree\");\n    const expanded = ref(false);\n    const childNodeRendered = ref(false);\n    const oldChecked = ref(null);\n    const oldIndeterminate = ref(null);\n    const node$ = ref(null);\n    const dragEvents = inject(dragEventsKey);\n    const instance = getCurrentInstance();\n    provide(\"NodeInstance\", instance);\n\n    if (!tree) {\n      debugWarn(\"Tree\", \"Can not find node's tree.\");\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true;\n      childNodeRendered.value = true;\n    }\n\n    const childrenKey = tree.props[\"children\"] || \"children\";\n    watch(() => {\n      const children = props.node.data[childrenKey];\n      return children && [...children];\n    }, () => {\n      props.node.updateChildren();\n    });\n    watch(() => props.node.indeterminate, val => {\n      handleSelectChange(props.node.checked, val);\n    });\n    watch(() => props.node.checked, val => {\n      handleSelectChange(val, props.node.indeterminate);\n    });\n    watch(() => props.node.expanded, val => {\n      nextTick(() => expanded.value = val);\n\n      if (val) {\n        childNodeRendered.value = true;\n      }\n    });\n\n    const getNodeKey$1 = node => {\n      return getNodeKey(tree.props.nodeKey, node.data);\n    };\n\n    const getNodeClass = node => {\n      const nodeClassFunc = props.props.class;\n\n      if (!nodeClassFunc) {\n        return {};\n      }\n\n      let className;\n\n      if (isFunction(nodeClassFunc)) {\n        const {\n          data\n        } = node;\n        className = nodeClassFunc(data, node);\n      } else {\n        className = nodeClassFunc;\n      }\n\n      if (isString(className)) {\n        return {\n          [className]: true\n        };\n      } else {\n        return className;\n      }\n    };\n\n    const handleSelectChange = (checked, indeterminate) => {\n      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {\n        tree.ctx.emit(\"check-change\", props.node.data, checked, indeterminate);\n      }\n\n      oldChecked.value = checked;\n      oldIndeterminate.value = indeterminate;\n    };\n\n    const handleClick = e => {\n      const store = tree.store.value;\n      store.setCurrentNode(props.node);\n      tree.ctx.emit(\"current-change\", store.currentNode ? store.currentNode.data : null, store.currentNode);\n      tree.currentNode.value = props.node;\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick();\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: {\n            checked: !props.node.checked\n          }\n        });\n      }\n\n      tree.ctx.emit(\"node-click\", props.node.data, props.node, instance, e);\n    };\n\n    const handleContextMenu = event => {\n      if (tree.instance.vnode.props[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n\n      tree.ctx.emit(\"node-contextmenu\", event, props.node.data, props.node, instance);\n    };\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return;\n\n      if (expanded.value) {\n        tree.ctx.emit(\"node-collapse\", props.node.data, props.node, instance);\n        props.node.collapse();\n      } else {\n        props.node.expand();\n        ctx.emit(\"node-expand\", props.node.data, props.node, instance);\n      }\n    };\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);\n      nextTick(() => {\n        const store = tree.store.value;\n        tree.ctx.emit(\"check\", props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    };\n\n    const handleChildNodeExpand = (nodeData, node, instance2) => {\n      broadcastExpanded(node);\n      tree.ctx.emit(\"node-expand\", nodeData, node, instance2);\n    };\n\n    const handleDragStart = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragStart({\n        event,\n        treeNode: props\n      });\n    };\n\n    const handleDragOver = event => {\n      event.preventDefault();\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: {\n          $el: node$.value,\n          node: props.node\n        }\n      });\n    };\n\n    const handleDrop = event => {\n      event.preventDefault();\n    };\n\n    const handleDragEnd = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragEnd(event);\n    };\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey: getNodeKey$1,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"];\nconst _hoisted_2 = [\"aria-expanded\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  const _component_loading = resolveComponent(\"loading\");\n\n  const _component_node_content = resolveComponent(\"node-content\");\n\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  const _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.node.isCurrent), _ctx.ns.is(\"hidden\", !_ctx.node.visible), _ctx.ns.is(\"focusable\", !_ctx.node.disabled), _ctx.ns.is(\"checked\", !_ctx.node.disabled && _ctx.node.checked), _ctx.getNodeClass(_ctx.node)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),\n    onDragstart: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), [\"stop\"])),\n    onDragover: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), [\"stop\"])),\n    onDragend: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), [\"stop\"])),\n    onDrop: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: normalizeStyle({\n      paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    })\n  }, [_ctx.tree.props.icon || _ctx.CaretRight ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"expand-icon\"), _ctx.ns.is(\"leaf\", _ctx.node.isLeaf), {\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"])),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"loading-icon\"), _ctx.ns.is(\"loading\")])\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 6), createVNode(_component_el_collapse_transition, null, {\n    default: withCtx(() => [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"node\", \"children\")),\n      role: \"group\",\n      \"aria-expanded\": _ctx.expanded\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.node.childNodes, child => {\n      return openBlock(), createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        \"render-content\": _ctx.renderContent,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        node: child,\n        accordion: _ctx.accordion,\n        props: _ctx.props,\n        onNodeExpand: _ctx.handleChildNodeExpand\n      }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"accordion\", \"props\", \"onNodeExpand\"]);\n    }), 128))], 10, _hoisted_2)), [[vShow, _ctx.expanded]]) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  })], 42, _hoisted_1)), [[vShow, _ctx.node.visible]]);\n}\n\nvar ElTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElTreeNode as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElCollapseTransition","ElCheckbox","NodeContent","ElIcon","Loading","props","node","type","default","accordion","renderContent","renderAfterExpand","showCheckbox","emits","setup","ctx","ns","useNamespace","broadcastExpanded","useNodeExpandEventBroadcast","tree","inject","expanded","ref","childNodeRendered","oldChecked","oldIndeterminate","node$","dragEvents","instance","provide","debugWarn","value","watch","data","childrenKey","children","updateChildren","indeterminate","val","handleSelectChange","checked","nextTick","getNodeKeyUtil","nodeKey","class","nodeClassFunc","isFunction","className","isString","emit","e","store","setCurrentNode","currentNode","expandOnClickNode","handleExpandIconClick","checkOnClickNode","disabled","handleCheckChange","target","event","vnode","isLeaf","collapse","expand","ev","setChecked","checkStrictly","checkedNodes","checkedKeys","halfCheckedNodes","halfCheckedKeys","handleChildNodeExpand","nodeData","instance2","draggable","treeNode","treeNodeDragOver","$el","treeNodeDragEnd","getNodeKey","getNodeClass","handleClick","handleContextMenu","handleDragStart","handleDragOver","handleDrop","handleDragEnd","CaretRight","_createElementBlock","_ctx","b","is","isCurrent","visible","role","tabindex","onClick","_cache","onContextmenu","onDragstart","onDragover","onDragend","onDrop","_createElementVNode","_normalizeClass","be","style","_normalizeStyle","paddingLeft","level","indent","icon","_openBlock","_createBlock","key","_withModifiers","_","onChange","_createCommentVNode","loading","openBlock","_createVNode","withDirectives","_Fragment","_renderList","childNodes","child","onNodeExpand"],"sources":["../../../../../../packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\"></component>\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  getCurrentInstance,\n  ref,\n  watch,\n  nextTick,\n  inject,\n  provide,\n} from 'vue'\nimport { isString, isFunction } from '@vue/shared'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { TreeOptionProps, TreeNodeData, RootTreeType } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      const store = tree.store.value\n      store.setCurrentNode(props.node)\n      tree.ctx.emit(\n        'current-change',\n        store.currentNode ? store.currentNode.data : null,\n        store.currentNode\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}