{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, shallowRef, computed, nextTick, watch, onMounted, onUpdated, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, normalizeStyle, createCommentVNode, Fragment, renderSlot, createElementVNode, mergeProps, createBlock, withCtx, resolveDynamicComponent, withModifiers, createVNode, toDisplayString, vShow } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleClose, View } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport { calcTextareaHeight } from './calc-textarea-height.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { isObject } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nconst PENDANT_MAP = {\n  suffix: \"append\",\n  prefix: \"prepend\"\n};\n\nconst _sfc_main = defineComponent({\n  name: \"ElInput\",\n  components: {\n    ElIcon,\n    CircleClose,\n    IconView: View\n  },\n  inheritAttrs: false,\n  props: inputProps,\n  emits: inputEmits,\n\n  setup(props, {\n    slots,\n    emit,\n    attrs: rawAttrs\n  }) {\n    const instance = getCurrentInstance();\n    const attrs = useAttrs();\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const inputSize = useSize();\n    const inputDisabled = useDisabled();\n    const nsInput = useNamespace(\"input\");\n    const nsTextarea = useNamespace(\"textarea\");\n    const input = ref();\n    const textarea = ref();\n    const focused = ref(false);\n    const hovering = ref(false);\n    const isComposing = ref(false);\n    const passwordVisible = ref(false);\n\n    const _textareaCalcStyle = shallowRef(props.inputStyle);\n\n    const inputOrTextarea = computed(() => input.value || textarea.value);\n    const needStatusIcon = computed(() => {\n      var _a;\n\n      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n    });\n    const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || \"\");\n    const validateIcon = computed(() => ValidateComponentsMap[validateState.value]);\n    const containerStyle = computed(() => [rawAttrs.style, props.inputStyle]);\n    const computedTextareaStyle = computed(() => [props.inputStyle, _textareaCalcStyle.value, {\n      resize: props.resize\n    }]);\n    const nativeInputValue = computed(() => props.modelValue === null || props.modelValue === void 0 ? \"\" : String(props.modelValue));\n    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value));\n    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !props.readonly && (!!nativeInputValue.value || focused.value));\n    const isWordLimitVisible = computed(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword);\n    const textLength = computed(() => Array.from(nativeInputValue.value).length);\n    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));\n\n    const resizeTextarea = () => {\n      const {\n        type,\n        autosize\n      } = props;\n      if (!isClient || type !== \"textarea\") return;\n\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : void 0;\n        const maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        _textareaCalcStyle.value = { ...calcTextareaHeight(textarea.value, minRows, maxRows)\n        };\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n\n    const setNativeInputValue = () => {\n      const input2 = inputOrTextarea.value;\n      if (!input2 || input2.value === nativeInputValue.value) return;\n      input2.value = nativeInputValue.value;\n    };\n\n    const calcIconOffset = place => {\n      const {\n        el\n      } = instance.vnode;\n      if (!el) return;\n      const elList = Array.from(el.querySelectorAll(`.${nsInput.e(place)}`));\n      const target = elList.find(item => item.parentNode === el);\n      if (!target) return;\n      const pendant = PENDANT_MAP[place];\n\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === \"suffix\" ? \"-\" : \"\"}${el.querySelector(`.${nsInput.be(\"group\", pendant)}`).offsetWidth}px)`;\n      } else {\n        target.removeAttribute(\"style\");\n      }\n    };\n\n    const updateIconOffset = () => {\n      calcIconOffset(\"prefix\");\n      calcIconOffset(\"suffix\");\n    };\n\n    const handleInput = event => {\n      const {\n        value\n      } = event.target;\n      if (isComposing.value) return;\n      if (value === nativeInputValue.value) return;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      nextTick(setNativeInputValue);\n    };\n\n    const handleChange = event => {\n      emit(\"change\", event.target.value);\n    };\n\n    const focus = () => {\n      nextTick(() => {\n        var _a;\n\n        (_a = inputOrTextarea.value) == null ? void 0 : _a.focus();\n      });\n    };\n\n    const blur = () => {\n      var _a;\n\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.blur();\n    };\n\n    const handleFocus = event => {\n      focused.value = true;\n      emit(\"focus\", event);\n    };\n\n    const handleBlur = event => {\n      var _a;\n\n      focused.value = false;\n      emit(\"blur\", event);\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\").catch(err => debugWarn(err));\n      }\n    };\n\n    const select = () => {\n      var _a;\n\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.select();\n    };\n\n    const handleCompositionStart = event => {\n      emit(\"compositionstart\", event);\n      isComposing.value = true;\n    };\n\n    const handleCompositionUpdate = event => {\n      var _a;\n\n      emit(\"compositionupdate\", event);\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      const lastCharacter = text[text.length - 1] || \"\";\n      isComposing.value = !isKorean(lastCharacter);\n    };\n\n    const handleCompositionEnd = event => {\n      emit(\"compositionend\", event);\n\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n\n    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);\n    watch(() => props.modelValue, () => {\n      var _a;\n\n      nextTick(resizeTextarea);\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => debugWarn(err));\n      }\n    });\n    watch(nativeInputValue, () => setNativeInputValue());\n    watch(() => props.type, () => {\n      nextTick(() => {\n        setNativeInputValue();\n        resizeTextarea();\n        updateIconOffset();\n      });\n    });\n    onMounted(() => {\n      setNativeInputValue();\n      updateIconOffset();\n      nextTick(resizeTextarea);\n    });\n    onUpdated(() => {\n      nextTick(updateIconOffset);\n    });\n\n    const onMouseLeave = evt => {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n\n    const onMouseEnter = evt => {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n\n    const handleKeydown = evt => {\n      emit(\"keydown\", evt);\n    };\n\n    return {\n      input,\n      textarea,\n      attrs,\n      inputSize,\n      validateState,\n      validateIcon,\n      containerStyle,\n      computedTextareaStyle,\n      inputDisabled,\n      showClear,\n      showPwdVisible,\n      isWordLimitVisible,\n      textLength,\n      hovering,\n      inputExceed,\n      passwordVisible,\n      inputOrTextarea,\n      suffixVisible,\n      needStatusIcon,\n      resizeTextarea,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd,\n      handlePasswordVisible,\n      clear,\n      select,\n      focus,\n      blur,\n      onMouseLeave,\n      onMouseEnter,\n      handleKeydown,\n      nsInput,\n      nsTextarea\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"type\", \"disabled\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\"];\nconst _hoisted_2 = [\"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_circle_close = resolveComponent(\"circle-close\");\n\n  const _component_icon_view = resolveComponent(\"icon-view\");\n\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.type === \"textarea\" ? _ctx.nsTextarea.b() : _ctx.nsInput.b(), _ctx.nsInput.m(_ctx.inputSize), _ctx.nsInput.is(\"disabled\", _ctx.inputDisabled), _ctx.nsInput.is(\"exceed\", _ctx.inputExceed), {\n      [_ctx.nsInput.b(\"group\")]: _ctx.$slots.prepend || _ctx.$slots.append,\n      [_ctx.nsInput.bm(\"group\", \"append\")]: _ctx.$slots.append,\n      [_ctx.nsInput.bm(\"group\", \"prepend\")]: _ctx.$slots.prepend,\n      [_ctx.nsInput.m(\"prefix\")]: _ctx.$slots.prefix || _ctx.prefixIcon,\n      [_ctx.nsInput.m(\"suffix\")]: _ctx.$slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword,\n      [_ctx.nsInput.m(\"suffix--password-clear\")]: _ctx.showClear && _ctx.showPwdVisible\n    }, _ctx.$attrs.class]),\n    style: normalizeStyle(_ctx.containerStyle),\n    onMouseenter: _cache[17] || (_cache[17] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),\n    onMouseleave: _cache[18] || (_cache[18] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args))\n  }, [createCommentVNode(\" input \"), _ctx.type !== \"textarea\" ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createCommentVNode(\" prepend slot \"), _ctx.$slots.prepend ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.be(\"group\", \"prepend\"))\n  }, [renderSlot(_ctx.$slots, \"prepend\")], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", mergeProps({\n    ref: \"input\",\n    class: _ctx.nsInput.e(\"inner\")\n  }, _ctx.attrs, {\n    type: _ctx.showPassword ? _ctx.passwordVisible ? \"text\" : \"password\" : _ctx.type,\n    disabled: _ctx.inputDisabled,\n    readonly: _ctx.readonly,\n    autocomplete: _ctx.autocomplete,\n    tabindex: _ctx.tabindex,\n    \"aria-label\": _ctx.label,\n    placeholder: _ctx.placeholder,\n    style: _ctx.inputStyle,\n    onCompositionstart: _cache[0] || (_cache[0] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n    onCompositionupdate: _cache[1] || (_cache[1] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n    onCompositionend: _cache[2] || (_cache[2] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n    onInput: _cache[3] || (_cache[3] = (...args) => _ctx.handleInput && _ctx.handleInput(...args)),\n    onFocus: _cache[4] || (_cache[4] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n    onBlur: _cache[5] || (_cache[5] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n    onChange: _cache[6] || (_cache[6] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onKeydown: _cache[7] || (_cache[7] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n  }), null, 16, _hoisted_1), createCommentVNode(\" prefix slot \"), _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    class: normalizeClass(_ctx.nsInput.e(\"prefix\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.nsInput.e(\"prefix-inner\"))\n  }, [renderSlot(_ctx.$slots, \"prefix\"), _ctx.prefixIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.e(\"icon\"))\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" suffix slot \"), _ctx.suffixVisible ? (openBlock(), createElementBlock(\"span\", {\n    key: 2,\n    class: normalizeClass(_ctx.nsInput.e(\"suffix\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.nsInput.e(\"suffix-inner\"))\n  }, [!_ctx.showClear || !_ctx.showPwdVisible || !_ctx.isWordLimitVisible ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [renderSlot(_ctx.$slots, \"suffix\"), _ctx.suffixIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.e(\"icon\"))\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true), _ctx.showClear ? (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"clear\")]),\n    onMousedown: _cache[8] || (_cache[8] = withModifiers(() => {}, [\"prevent\"])),\n    onClick: _ctx.clear\n  }, {\n    default: withCtx(() => [createVNode(_component_circle_close)]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showPwdVisible ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"clear\")]),\n    onClick: _ctx.handlePasswordVisible\n  }, {\n    default: withCtx(() => [createVNode(_component_icon_view)]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.isWordLimitVisible ? (openBlock(), createElementBlock(\"span\", {\n    key: 3,\n    class: normalizeClass(_ctx.nsInput.e(\"count\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.nsInput.e(\"count-inner\"))\n  }, toDisplayString(_ctx.textLength) + \" / \" + toDisplayString(_ctx.attrs.maxlength), 3)], 2)) : createCommentVNode(\"v-if\", true)], 2), _ctx.validateState && _ctx.validateIcon && _ctx.needStatusIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"validateIcon\")])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.validateIcon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" append slot \"), _ctx.$slots.append ? (openBlock(), createElementBlock(\"div\", {\n    key: 3,\n    class: normalizeClass(_ctx.nsInput.be(\"group\", \"append\"))\n  }, [renderSlot(_ctx.$slots, \"append\")], 2)) : createCommentVNode(\"v-if\", true)], 64)) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [createCommentVNode(\" textarea \"), createElementVNode(\"textarea\", mergeProps({\n    ref: \"textarea\",\n    class: _ctx.nsTextarea.e(\"inner\")\n  }, _ctx.attrs, {\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.inputDisabled,\n    readonly: _ctx.readonly,\n    autocomplete: _ctx.autocomplete,\n    style: _ctx.computedTextareaStyle,\n    \"aria-label\": _ctx.label,\n    placeholder: _ctx.placeholder,\n    onCompositionstart: _cache[9] || (_cache[9] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n    onCompositionupdate: _cache[10] || (_cache[10] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n    onCompositionend: _cache[11] || (_cache[11] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n    onInput: _cache[12] || (_cache[12] = (...args) => _ctx.handleInput && _ctx.handleInput(...args)),\n    onFocus: _cache[13] || (_cache[13] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n    onBlur: _cache[14] || (_cache[14] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n    onChange: _cache[15] || (_cache[15] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onKeydown: _cache[16] || (_cache[16] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n  }), null, 16, _hoisted_2), _ctx.isWordLimitVisible ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.e(\"count\"))\n  }, toDisplayString(_ctx.textLength) + \" / \" + toDisplayString(_ctx.attrs.maxlength), 3)) : createCommentVNode(\"v-if\", true)], 64))], 38)), [[vShow, _ctx.type !== \"hidden\"]]);\n}\n\nvar Input = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Input as default };","map":{"version":3,"mappings":"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","names":["PENDANT_MAP","suffix","prefix","_sfc_main","defineComponent","name","components","ElIcon","CircleClose","IconView","inheritAttrs","props","emits","setup","slots","emit","attrs","rawAttrs","instance","form","formItem","useFormItem","inputSize","inputDisabled","nsInput","useNamespace","nsTextarea","input","textarea","focused","ref","hovering","isComposing","passwordVisible","shallowRef","inputOrTextarea","value","needStatusIcon","_a","validateState","validateIcon","_textareaCalcStyle","resize","String","showClear","computed","isWordLimitVisible","type","autosize","minHeight","input2","nativeInputValue","el","target","item","pendant","calcIconOffset","event","nextTick","handleChange","handleInput","focus","watch","setNativeInputValue","resizeTextarea","updateIconOffset","onMounted","onUpdated","containerStyle","computedTextareaStyle","showPwdVisible","textLength","inputExceed","suffixVisible","handleFocus","handleBlur","handleCompositionStart","handleCompositionUpdate","handleCompositionEnd","handlePasswordVisible","clear","select","_hoisted_1","_hoisted_2","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","class","_normalizeClass","b","is","bm","onMouseenter","_createCommentVNode","_openBlock","key","prepend","_renderSlot","_createElementVNode","disabled","readonly","autocomplete","tabindex","placeholder","style","onCompositionstart","onCompositionupdate","onCompositionend","onInput","args","onFocus","onBlur","onChange","onKeydown","default","_createBlock","_","e","onMousedown","_withModifiers","onClick","_createVNode","_createElementBlock","_toDisplayString","append"],"sources":["../../../../../../packages/components/input/src/input.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"type !== 'hidden'\"\n    :class=\"[\n      type === 'textarea' ? nsTextarea.b() : nsInput.b(),\n      nsInput.m(inputSize),\n      nsInput.is('disabled', inputDisabled),\n      nsInput.is('exceed', inputExceed),\n      {\n        [nsInput.b('group')]: $slots.prepend || $slots.append,\n        [nsInput.bm('group', 'append')]: $slots.append,\n        [nsInput.bm('group', 'prepend')]: $slots.prepend,\n        [nsInput.m('prefix')]: $slots.prefix || prefixIcon,\n        [nsInput.m('suffix')]:\n          $slots.suffix || suffixIcon || clearable || showPassword,\n        [nsInput.m('suffix--password-clear')]: showClear && showPwdVisible,\n      },\n      $attrs.class,\n    ]\"\n    :style=\"containerStyle\"\n    @mouseenter=\"onMouseEnter\"\n    @mouseleave=\"onMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" :class=\"nsInput.be('group', 'prepend')\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <input\n        ref=\"input\"\n        :class=\"nsInput.e('inner')\"\n        v-bind=\"attrs\"\n        :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :tabindex=\"tabindex\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        :style=\"inputStyle\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n\n      <!-- prefix slot -->\n      <span v-if=\"$slots.prefix || prefixIcon\" :class=\"nsInput.e('prefix')\">\n        <span :class=\"nsInput.e('prefix-inner')\">\n          <slot name=\"prefix\"></slot>\n          <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('icon')\">\n            <component :is=\"prefixIcon\" />\n          </el-icon>\n        </span>\n      </span>\n\n      <!-- suffix slot -->\n      <span v-if=\"suffixVisible\" :class=\"nsInput.e('suffix')\">\n        <span :class=\"nsInput.e('suffix-inner')\">\n          <template v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\">\n            <slot name=\"suffix\"></slot>\n            <el-icon v-if=\"suffixIcon\" :class=\"nsInput.e('icon')\">\n              <component :is=\"suffixIcon\" />\n            </el-icon>\n          </template>\n          <el-icon\n            v-if=\"showClear\"\n            :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n            @mousedown.prevent\n            @click=\"clear\"\n          >\n            <circle-close />\n          </el-icon>\n          <el-icon\n            v-if=\"showPwdVisible\"\n            :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n            @click=\"handlePasswordVisible\"\n          >\n            <icon-view />\n          </el-icon>\n          <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n            <span :class=\"nsInput.e('count-inner')\">\n              {{ textLength }} / {{ attrs.maxlength }}\n            </span>\n          </span>\n        </span>\n        <el-icon\n          v-if=\"validateState && validateIcon && needStatusIcon\"\n          :class=\"[nsInput.e('icon'), nsInput.e('validateIcon')]\"\n        >\n          <component :is=\"validateIcon\" />\n        </el-icon>\n      </span>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" :class=\"nsInput.be('group', 'append')\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        ref=\"textarea\"\n        :class=\"nsTextarea.e('inner')\"\n        v-bind=\"attrs\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"computedTextareaStyle\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n        {{ textLength }} / {{ attrs.maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  nextTick,\n  getCurrentInstance,\n  ref,\n  shallowRef,\n  onMounted,\n  onUpdated,\n} from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CircleClose, View as IconView } from '@element-plus/icons-vue'\nimport {\n  ValidateComponentsMap,\n  isObject,\n  isKorean,\n  debugWarn,\n} from '@element-plus/utils'\nimport {\n  useAttrs,\n  useDisabled,\n  useFormItem,\n  useSize,\n  useNamespace,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { calcTextareaHeight } from './calc-textarea-height'\nimport { inputProps, inputEmits } from './input'\n\nimport type { StyleValue } from 'vue'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\nconst PENDANT_MAP = {\n  suffix: 'append',\n  prefix: 'prepend',\n} as const\n\nexport default defineComponent({\n  name: 'ElInput',\n\n  components: { ElIcon, CircleClose, IconView },\n\n  inheritAttrs: false,\n\n  props: inputProps,\n  emits: inputEmits,\n\n  setup(props, { slots, emit, attrs: rawAttrs }) {\n    const instance = getCurrentInstance()!\n    const attrs = useAttrs()\n\n    const { form, formItem } = useFormItem()\n    const inputSize = useSize()\n    const inputDisabled = useDisabled()\n    const nsInput = useNamespace('input')\n    const nsTextarea = useNamespace('textarea')\n\n    const input = ref<HTMLInputElement>()\n    const textarea = ref<HTMLTextAreaElement>()\n    const focused = ref(false)\n    const hovering = ref(false)\n    const isComposing = ref(false)\n    const passwordVisible = ref(false)\n    const _textareaCalcStyle = shallowRef(props.inputStyle)\n\n    const inputOrTextarea = computed(() => input.value || textarea.value)\n\n    const needStatusIcon = computed(() => form?.statusIcon ?? false)\n    const validateState = computed(() => formItem?.validateState || '')\n    const validateIcon = computed(\n      () => ValidateComponentsMap[validateState.value]\n    )\n    const containerStyle = computed<StyleValue>(() => [\n      rawAttrs.style,\n      props.inputStyle,\n    ])\n    const computedTextareaStyle = computed<StyleValue>(() => [\n      props.inputStyle,\n      _textareaCalcStyle.value,\n      { resize: props.resize },\n    ])\n    const nativeInputValue = computed(() =>\n      props.modelValue === null || props.modelValue === undefined\n        ? ''\n        : String(props.modelValue)\n    )\n    const showClear = computed(\n      () =>\n        props.clearable &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !!nativeInputValue.value &&\n        (focused.value || hovering.value)\n    )\n    const showPwdVisible = computed(\n      () =>\n        props.showPassword &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        (!!nativeInputValue.value || focused.value)\n    )\n    const isWordLimitVisible = computed(\n      () =>\n        props.showWordLimit &&\n        !!attrs.value.maxlength &&\n        (props.type === 'text' || props.type === 'textarea') &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !props.showPassword\n    )\n    const textLength = computed(() => Array.from(nativeInputValue.value).length)\n    const inputExceed = computed(\n      () =>\n        // show exceed style if length of initial value greater then maxlength\n        !!isWordLimitVisible.value &&\n        textLength.value > Number(attrs.value.maxlength)\n    )\n\n    const resizeTextarea = () => {\n      const { type, autosize } = props\n\n      if (!isClient || type !== 'textarea') return\n\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : undefined\n        const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n        _textareaCalcStyle.value = {\n          ...calcTextareaHeight(textarea.value!, minRows, maxRows),\n        }\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value!).minHeight,\n        }\n      }\n    }\n\n    const setNativeInputValue = () => {\n      const input = inputOrTextarea.value\n      if (!input || input.value === nativeInputValue.value) return\n      input.value = nativeInputValue.value\n    }\n\n    const calcIconOffset = (place: 'prefix' | 'suffix') => {\n      const { el } = instance.vnode\n      if (!el) return\n      const elList: HTMLSpanElement[] = Array.from(\n        el.querySelectorAll(`.${nsInput.e(place)}`)\n      )\n      const target = elList.find((item) => item.parentNode === el)\n\n      if (!target) return\n\n      const pendant = PENDANT_MAP[place]\n\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === 'suffix' ? '-' : ''}${\n          el.querySelector(`.${nsInput.be('group', pendant)}`).offsetWidth\n        }px)`\n      } else {\n        target.removeAttribute('style')\n      }\n    }\n\n    const updateIconOffset = () => {\n      calcIconOffset('prefix')\n      calcIconOffset('suffix')\n    }\n\n    const handleInput = (event: Event) => {\n      const { value } = event.target as TargetElement\n\n      // should not emit input during composition\n      // see: https://github.com/ElemeFE/element/issues/10516\n      if (isComposing.value) return\n\n      // hack for https://github.com/ElemeFE/element/issues/8548\n      // should remove the following line when we don't support IE\n      if (value === nativeInputValue.value) return\n\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('input', value)\n\n      // ensure native input value is controlled\n      // see: https://github.com/ElemeFE/element/issues/12850\n      nextTick(setNativeInputValue)\n    }\n\n    const handleChange = (event: Event) => {\n      emit('change', (event.target as TargetElement).value)\n    }\n\n    const focus = () => {\n      // see: https://github.com/ElemeFE/element/issues/18573\n      nextTick(() => {\n        inputOrTextarea.value?.focus()\n      })\n    }\n\n    const blur = () => {\n      inputOrTextarea.value?.blur()\n    }\n\n    const handleFocus = (event: FocusEvent) => {\n      focused.value = true\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: FocusEvent) => {\n      focused.value = false\n      emit('blur', event)\n      if (props.validateEvent) {\n        formItem?.validate?.('blur').catch((err) => debugWarn(err))\n      }\n    }\n\n    const select = () => {\n      inputOrTextarea.value?.select()\n    }\n\n    const handleCompositionStart = (event: CompositionEvent) => {\n      emit('compositionstart', event)\n      isComposing.value = true\n    }\n\n    const handleCompositionUpdate = (event: CompositionEvent) => {\n      emit('compositionupdate', event)\n      const text = (event.target as HTMLInputElement)?.value\n      const lastCharacter = text[text.length - 1] || ''\n      isComposing.value = !isKorean(lastCharacter)\n    }\n\n    const handleCompositionEnd = (event: CompositionEvent) => {\n      emit('compositionend', event)\n      if (isComposing.value) {\n        isComposing.value = false\n        handleInput(event)\n      }\n    }\n\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, '')\n      emit('change', '')\n      emit('clear')\n      emit('input', '')\n    }\n\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value\n      focus()\n    }\n\n    const suffixVisible = computed(\n      () =>\n        !!slots.suffix ||\n        !!props.suffixIcon ||\n        showClear.value ||\n        props.showPassword ||\n        isWordLimitVisible.value ||\n        (!!validateState.value && needStatusIcon.value)\n    )\n\n    watch(\n      () => props.modelValue,\n      () => {\n        nextTick(resizeTextarea)\n        if (props.validateEvent) {\n          formItem?.validate?.('change').catch((err) => debugWarn(err))\n        }\n      }\n    )\n\n    // native input value is set explicitly\n    // do not use v-model / :value in template\n    // see: https://github.com/ElemeFE/element/issues/14521\n    watch(nativeInputValue, () => setNativeInputValue())\n\n    // when change between <input> and <textarea>,\n    // update DOM dependent value and styles\n    // https://github.com/ElemeFE/element/issues/14857\n    watch(\n      () => props.type,\n      () => {\n        nextTick(() => {\n          setNativeInputValue()\n          resizeTextarea()\n          updateIconOffset()\n        })\n      }\n    )\n\n    onMounted(() => {\n      setNativeInputValue()\n      updateIconOffset()\n      nextTick(resizeTextarea)\n    })\n\n    onUpdated(() => {\n      nextTick(updateIconOffset)\n    })\n\n    const onMouseLeave = (evt: MouseEvent) => {\n      hovering.value = false\n      emit('mouseleave', evt)\n    }\n\n    const onMouseEnter = (evt: MouseEvent) => {\n      hovering.value = true\n      emit('mouseenter', evt)\n    }\n\n    const handleKeydown = (evt: KeyboardEvent) => {\n      emit('keydown', evt)\n    }\n\n    return {\n      input,\n      textarea,\n      attrs,\n      inputSize,\n      validateState,\n      validateIcon,\n      containerStyle,\n      computedTextareaStyle,\n      inputDisabled,\n      showClear,\n      showPwdVisible,\n      isWordLimitVisible,\n      textLength,\n      hovering,\n      inputExceed,\n      passwordVisible,\n      inputOrTextarea,\n      suffixVisible,\n      needStatusIcon,\n\n      resizeTextarea,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd,\n      handlePasswordVisible,\n      clear,\n      select,\n      focus,\n      blur,\n      onMouseLeave,\n      onMouseEnter,\n      handleKeydown,\n\n      nsInput,\n      nsTextarea,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}