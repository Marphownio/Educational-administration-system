{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, createElementVNode, openBlock, createElementBlock, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSlPanel\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance();\n    const cursorTop = ref(0);\n    const cursorLeft = ref(0);\n    const background = ref(\"hsl(0, 100%, 50%)\");\n    const colorValue = computed(() => {\n      const hue = props.color.get(\"hue\");\n      const value = props.color.get(\"value\");\n      return {\n        hue,\n        value\n      };\n    });\n\n    function update() {\n      const saturation = props.color.get(\"saturation\");\n      const value = props.color.get(\"value\");\n      const el = instance.vnode.el;\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = el;\n      cursorLeft.value = saturation * width / 100;\n      cursorTop.value = (100 - value) * height / 100;\n      background.value = `hsl(${props.color.get(\"hue\")}, 100%, 50%)`;\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      let left = clientX - rect.left;\n      let top = clientY - rect.top;\n      left = Math.max(0, left);\n      left = Math.min(left, rect.width);\n      top = Math.max(0, top);\n      top = Math.min(top, rect.height);\n      cursorLeft.value = left;\n      cursorTop.value = top;\n      props.color.set({\n        saturation: left / rect.width * 100,\n        value: 100 - top / rect.height * 100\n      });\n    }\n\n    watch(() => colorValue.value, () => {\n      update();\n    });\n    onMounted(() => {\n      draggable(instance.vnode.el, {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      });\n      update();\n    });\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update\n    };\n  }\n\n});\n\nconst _hoisted_1 = /* @__PURE__ */createElementVNode(\"div\", {\n  class: \"el-color-svpanel__white\"\n}, null, -1);\n\nconst _hoisted_2 = /* @__PURE__ */createElementVNode(\"div\", {\n  class: \"el-color-svpanel__black\"\n}, null, -1);\n\nconst _hoisted_3 = /* @__PURE__ */createElementVNode(\"div\", null, null, -1);\n\nconst _hoisted_4 = [_hoisted_3];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: \"el-color-svpanel\",\n    style: normalizeStyle({\n      backgroundColor: _ctx.background\n    })\n  }, [_hoisted_1, _hoisted_2, createElementVNode(\"div\", {\n    class: \"el-color-svpanel__cursor\",\n    style: normalizeStyle({\n      top: _ctx.cursorTop + \"px\",\n      left: _ctx.cursorLeft + \"px\"\n    })\n  }, _hoisted_4, 4)], 4);\n}\n\nvar SvPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { SvPanel as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","setup","instance","cursorTop","ref","cursorLeft","background","computed","get","hue","value","vnode","el","clientWidth","width","clientHeight","height","saturation","event","rect","clientX","clientY","getClientXY","left","max","min","top","set","watch","colorValue","update","onMounted","draggable","drag","handleDrag","end","_createElementVNode","class","_hoisted_3","_createElementBlock","style","backgroundColor","_hoisted_1","_hoisted_2","_ctx","_hoisted_4"],"sources":["../../../../../../../packages/components/color-picker/src/components/sv-panel.vue"],"sourcesContent":["<template>\n  <div\n    class=\"el-color-svpanel\"\n    :style=\"{\n      backgroundColor: background,\n    }\"\n  >\n    <div class=\"el-color-svpanel__white\"></div>\n    <div class=\"el-color-svpanel__black\"></div>\n    <div\n      class=\"el-color-svpanel__cursor\"\n      :style=\"{\n        top: cursorTop + 'px',\n        left: cursorLeft + 'px',\n      }\"\n    >\n      <div></div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  computed,\n  watch,\n  getCurrentInstance,\n  onMounted,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElSlPanel',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    // instance\n    const instance = getCurrentInstance()\n    // data\n    const cursorTop = ref(0)\n    const cursorLeft = ref(0)\n    const background = ref('hsl(0, 100%, 50%)')\n    const colorValue = computed(() => {\n      const hue = props.color.get('hue')\n      const value = props.color.get('value')\n      return { hue, value }\n    })\n\n    // methods\n    function update() {\n      const saturation = props.color.get('saturation')\n      const value = props.color.get('value')\n\n      const el = instance.vnode.el\n      const { clientWidth: width, clientHeight: height } = el\n\n      cursorLeft.value = (saturation * width) / 100\n      cursorTop.value = ((100 - value) * height) / 100\n\n      background.value = `hsl(${props.color.get('hue')}, 100%, 50%)`\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      let left = clientX - rect.left\n      let top = clientY - rect.top\n      left = Math.max(0, left)\n      left = Math.min(left, rect.width)\n\n      top = Math.max(0, top)\n      top = Math.min(top, rect.height)\n\n      cursorLeft.value = left\n      cursorTop.value = top\n      props.color.set({\n        saturation: (left / rect.width) * 100,\n        value: 100 - (top / rect.height) * 100,\n      })\n    }\n\n    // watch\n    watch(\n      () => colorValue.value,\n      () => {\n        update()\n      }\n    )\n    // mounted\n    onMounted(() => {\n      draggable(instance.vnode.el as HTMLElement, {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      })\n\n      update()\n    })\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}